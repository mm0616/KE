5. Mixly 教程
=============

5.1 资料下载
------------

资料下载： :download:`资料下载<./Mixly.7z>`

**教程所需APP安装包！！！**

下载： :download:`APP <../APP.7z>`

5.2 软件安装
------------

1. 下载压缩包，压缩包存放路径不要有中文

|image1|

2. 解压压缩包，打开文件夹，打开\ |image2|\ 。

3. 需要输入的地方全部输入“y”，等待更新即可。

|image3|

4. 更新完毕后，关闭。

   |image4|

5.再次打开文件夹，可以看到软件已存在，点击打开。

|image5|

5.3 软件介绍
------------

1. 打开软件后，选择“Arduino ESP32”.

.. figure:: ./media/image-20250623091616027.png
   :alt: image-20250623091616027

   image-20250623091616027

2. 工具栏介绍

   |image6|

5.4 导入库文件
--------------

1. 点击“设置”—->“管理库”

   |image7|

2.选择本地导入，再选择所需的库文件，选择库文件中的“.xml”后缀的文件导入。

|image8|

5.5 上传代码文件
----------------

1. 点击“文件”—->“打开”

|image9|

2. 找到代码保存的位置，选择“.mix”文件，点击“确定”

|image10|

3. 点击“上传”。

   |image11|

5.6 项目课程
------------

项目一 Hello World
~~~~~~~~~~~~~~~~~~

1.1 项目介绍

对于ESP32的初学者，先从一些简单的开始学习吧！在这个项目中，你只需要一个ESP32主板，USB线和计算机就可以完成“Hello
World!”项目。它不仅是ESP32主板和计算机的通信测试，也是ESP32的初级项目。这也是一个入门实验，让你进入计算机的编程世界。

1.2 实验组件

================= =========
|img|             |image12|
================= =========
ESP32 Plus主板 x1 USB线 x1
================= =========

1.3 实验接线图

.. figure:: ./media/011301.png
   :alt: 011301

   011301

1.4 代码说明

.. figure:: ./media/img-20241023140243.png
   :alt: Img

   Img

设置串口波特率，一般是设置为9600。

.. figure:: ./media/img-20241023140328.png
   :alt: Img

   Img

自动换行输出数据。从串行端口输出数据，跟随一个回车和一个换行符。

.. figure:: ./media/img-20241101093914.png
   :alt: Img

   Img

从串行端口不换行输出数据。

.. figure:: ./media/img-20241023140625.png
   :alt: Img

   Img

将程序的执行暂停一段时间，也就是延时。单位是毫秒。

1.5 实验代码

本项目中使用的代码保存在文件夹“\*\*..:raw-latex:`\程序代码`:raw-latex:`\Mixly`\_代码\ **”中
（**\ 后面的项目代码保存的路径也一样，即：同下。\**），你也可以自己编写代码，其如下：

1. 从 “\ |Img|\ ” 拖出 “\ |image13|\ ”。

2. 从 “\ |image14|\ ” 拖出 “\ |image15|\ ” 放入 “\ |image16|\ ”。

3. 从 “\ |image17|\ ” 拖出 “\ |image18|\ ”。

4. 从 “\ |image19|\ ” 拖出 “\ |image20|\ ” 放入 “\ |image21|\ ”，将
   hello 修改为 Hello World。

5. 从 “\ |Img|\ ” 拖出 “\ |image22|\ ”。

完整代码：

.. figure:: ./media/img-20241023140731.png
   :alt: Img

   Img

在上传项目代码到ESP32之前，需要手动选择Arduino ESP32主控板的板型 “ESP32
Dev Moduel”
和串口端口（COM6）\ **提示：不同的电脑，串口端口是不一样的**\ 。(注意：将ESP32主板通过USB线连接到计算机后才能看到对应的端口。)
（\ **后面上传项目代码的步骤也一样，即：同下。**\ ）

.. figure:: ./media/img-20241023141133.png
   :alt: Img

   Img

.. figure:: ./media/img-20241023141156.png
   :alt: Img

   Img

单击 |image23| 将项目代码上传到ESP32主板上。(下同)

.. figure:: ./media/img-20241023141718.png
   :alt: Img

   Img

项目代码上传成功！

.. figure:: ./media/img-20241023142033.png
   :alt: Img

   Img

1.6 实验结果

项目代码上传成功后，利用USB线上电，单击图标\ |image24|\ 进入串行监视器，设置波特率为9600，这样串口监视器打印“Hello
World!”。

.. figure:: ./media/img-20241023142219.png
   :alt: Img

   Img

.. figure:: ./media/img-20241023142346.png
   :alt: Img

   Img

.. figure:: ./media/img-20241023142423.png
   :alt: Img

   Img

项目二 LED
~~~~~~~~~~

1.1 项目介绍

LED，即发光二极管的简称。由含镓（Ga）、砷（As）、磷（P）、氮（N）等的\ `化合物 <https://baike.baidu.com/item/化合物/1142931>`__\ 制成。当电子与\ `空穴 <https://baike.baidu.com/item/空穴/3517781>`__\ 复合时能辐射出可见光，因而可以用来制成发光二极管。在电路及仪器中作为指示灯，或者组成文字或数字显示。砷化镓二极管发红光，磷化镓二极管发绿光，碳化硅二极管发黄光，氮化镓二极管发蓝光。因化学性质又分有机发光二极管OLED和无机发光二极管LED。

为了实验的方便，我们将紫色LED发光二极管做成了一个紫色LED模块。它的控制方法非常简单，只要让LED两端有一定的电压就可以点亮LED。在这个项目中，我们用一个最基本的测试代码来控制LED，亮一秒钟，灭一秒钟，来实现闪烁的效果。你可以改变代码中LED灯亮灭的时间，实现不同的闪烁效果。我们通过编程控制信号端S的高低电平，从而控制LED的亮灭。LED模块信号端S为高电平时LED亮起，S为低电平时LED熄灭。

1.2 模块参数

工作电压：DC 3.3-5V

控制信号：数字信号

尺寸：32 x 23.5 x 12 mm

定位孔大小：直径为 4.8 mm

接口：间距为2.54 mm 3pin防反接口

1.3 模块原理图

.. figure:: ./media/021301.jpg
   :alt: img

   img

这是一个常用的LED模块，它采用F5-白发紫LED（外观白色，显示紫光）元件。同时，模块上自带一个间距为
2.54mm 的 3pin 防反插红色端子。控制时，模块上GND
VCC供电后，信号端S为高电平时，模块上LED亮起。

模块兼容各种单片机控制板，如arduino系列单片机。

1.4 实验组件

+----------------+----------------+-------------------+--------------+
| |img|          | |image25|      | |image26|         | |image27|    |
+================+================+===================+==============+
| ESP32 Plus主板 | Keyes          | XH2.54-3P         | USB线 x1     |
| x1             | 紫色LED模块 x1 | 转杜邦线母单线 x1 |              |
+----------------+----------------+-------------------+--------------+

1.5 模块接线图

.. figure:: ./media/021501.png
   :alt: 021501

   021501

1.6 代码说明

.. figure:: ./media/img-20241029163343.png
   :alt: Img

   Img

向指定管脚设置“高”或“低”，选择“高”代表给该管脚设置高电平，有电压，有电流，则LED点亮；选择“低”代表给管脚设置低电平，没电压，没有电流，则LED不亮。

1.7 实验代码

本项目中使用的代码保存在文件夹“\*\*..:raw-latex:`\程序代码`:raw-latex:`\Mixly`\_代码\ **”中
（**\ 后面的项目代码保存的路径也一样，即：同下。\**），你也可以自己编写代码，其如下：

1. 从 “\ |Img|\ ” 拖出 “\ |image28|\ ”。

2. 从 “\ |image29|\ ” 拖出 “ |image30| ” 放入 “\ |image31|\ ”，管脚为 5
   ，设为 “低” 。

3. 从 “\ |image32|\ ” 拖出 “ |image33| ” ，管脚为 5 ，设为 “高” 。

4. 从 “\ |Img|\ ” 拖出 “\ |image34|\ ”，设置延时为500毫秒。

5. 复制代码块 “\ |image35| ” 1 次，将 “高” 改为 “低”。

完整代码：

.. figure:: ./media/img-20241029163959.png
   :alt: Img

   Img

在上传项目代码到ESP32之前，需要手动选择Arduino ESP32主控板的板型 “ESP32
Dev Moduel”
和串口端口（COM6）（提示：不同的电脑，串口端口是不一样的）。(注意：将ESP32主板通过USB线连接到计算机后才能看到对应的端口。)
（\ **后面上传项目代码的步骤也一样，即：同下。**\ ）

.. figure:: ./media/img-20241113152219.png
   :alt: Img

   Img

.. figure:: ./media/img-20241113152250.png
   :alt: Img

   Img

单击 |image36| 将项目代码上传到ESP32主板上。(下同)

.. figure:: ./media/img-20241113152411.png
   :alt: Img

   Img

项目代码上传成功！

.. figure:: ./media/img-20241113152457.png
   :alt: Img

   Img

1.8 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，你会看到模块上的紫色LED一亮一灭，循环闪烁。

.. figure:: ./media/021701.png
   :alt: img

   img

.. figure:: ./media/021702.png
   :alt: img

   img

项目三 交通灯模块
~~~~~~~~~~~~~~~~~

1.1 项目介绍

交通灯，也就是马路上十字路口的红绿灯，在我们的日常生活中很常见。交通灯是由红、黄、绿三种颜色组成的，根据一定的时间规律循环交替亮起或熄灭。每个人都应该遵守交通规则，这可以避免许多交通事故。

想学习交通灯的原理吗？我们可以用红、黄、绿3个LED外接电路来模拟马路上的交通灯。因此我们特别设计了这款交通灯模块，模块上的红、黄、绿3个LED灯模拟交通灯。

1.2 模块参数

工作电压 : DC 5V

电流 ：100 mA

最大功率 ：0.5 W

工作温度 ：-10°C ~ +50°C

输入信号 : 数字信号

尺寸 ：47.6 x 23.8 x 11.8 mm

定位孔大小：直径为 4.8 mm

接口 ：间距为2.54 mm 5pin防反接口

1.3 模块原理图

.. figure:: ./media/031301.png
   :alt: 031301

   031301

上一课我们学习了如何控制一个LED，由原理图可以得知，控制这个模块就好比分别控制3个独立的LED灯(我们这个灯可直接由单片机IO口驱动)，给对应颜色灯高电平就亮起对应的颜色。比如，我们给信号“R”输出高电平，也就是3.3V，则红色LED点亮。

1.4 实验组件

+----------------+----------------+-------------------+--------------+
| |img|          | |image37|      | |image38|         | |image39|    |
+================+================+===================+==============+
| ESP32 Plus主板 | Keyes          | XH2.54-5P         | USB线 x1     |
| x1             | 交通灯模块 x1  | 转杜邦线母单线 x1 |              |
+----------------+----------------+-------------------+--------------+

1.5 模块接线图

.. figure:: ./media/031501.jpg
   :alt: img

   img

1.6 实验代码

本项目中使用的代码保存在文件夹“\*\*..:raw-latex:`\程序代码`:raw-latex:`\Mixly`\_代码\ **”中
（**\ 后面的项目代码保存的路径也一样，即：同下。\**），你也可以自己编写代码，其如下：

1. 从 “\ |Img|\ ” 拖出 “\ |image40|\ ”。

2. 从 “\ |image41|\ ” 分别拖出 “ |image42| ” 、 “ |image43| ” 、 “
   |image44| ” 放入 “\ |image45|\ ”，红色LED管脚为 5 、黄色LED管脚为 13
   、绿色LED管脚为 12 ，全部设为 “低”。

.. figure:: ./media/img-20241029171409.png
   :alt: Img

   Img

3. 复制代码块 “ |image46| ” 1 次，将红色LED设为 “高”；又从 “\ |Img|\ ”
   拖出 “\ |image47|\ ”，设置延时为5000毫秒；再复制复制代码块 “
   |image48| ” 1次，延时为500毫秒。

.. figure:: ./media/img-20241029171344.png
   :alt: Img

   Img

4. 从 “\ |Img|\ ” 拖出 “ |image49| ” ，从 1 到 10 步长为 1 改成从 1 到 3
   步长为 1。

5. 复制代码块 “ |image50| ” 1 次 放入 “ |image51| ”，将黄色LED设为 “低”
   改成设为 “高”，再复制代码块 “ |image52| ” 1 次放入 “ |image53| ” ，

.. figure:: ./media/img-20241029171941.png
   :alt: Img

   Img

6. 复制代码块 “ |image54| ” 1次，将红色LED设为 “高” 改成 “低”
   ，再把绿色LED设为 “低” 改成设为 “高”。

.. figure:: ./media/img-20241029172101.png
   :alt: Img

   Img

7. 复制代码块 “ |image55| ” 1次。

完整代码：

.. figure:: ./media/img-20241113154626.png
   :alt: Img

   Img

1.7 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，你会看到模块上绿色LED亮5秒然后熄灭，黄色LED闪烁3秒然后熄灭，红色LED亮5秒然后熄灭。模块按此顺序循环亮灭。

项目四 激光头传感器模块发出激光
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

在这个套件中，有一个Keyes
激光头传感器，激光与常见的光不同。一方面，激光的单色性好。另一方面，激光发射器内部特定的结构，使得激光能够被聚集成单束光，朝着同一方向射出，亮度高，方向性好。

正是由于这些特性，激光被广泛用于对特定材料进行切割、焊接、表面处理等等。激光的能量非常高，玩具激光笔照射人眼可能导致眩光，长时间可能导致视网膜损害，我国也禁止用激光照射航行的飞机。因此，\ **请注意不要用激光发射器对准人眼。**

1.2 模块参数

工作电压 ：DC 5V

工作温度 ：-10°C ~ +50°C

输入信号 ：数字信号

尺寸 ：32 x 23.8 x 10 mm

定位孔大小 ：直径为 4.8 mm

接口 ：间距为2.54 mm 3pin防反接口

1.3 模块原理图

.. figure:: ./media/041301.png
   :alt: img

   img

激光头传感器主要由激光头组成，激光头由发光管芯、聚光透镜、铜可调套筒三部分组成。

从激光模块的电路原理图我们可以知道，它是用三极管驱动的。激光头的 1
脚始终上拉到VCC，在信号端 S
处输入一个高电平数字信号，NPN三极管Q1导通，激光头的 2
脚被下拉到GND，此时传感器开始工作。在信号端 S
处输入低电平时NPN三极管Q1不导通，传感器停止工作。

1.4 实验组件

+----------------+----------------+-------------------+--------------+
| |img|          | |image56|      | |image57|         | |image58|    |
+================+================+===================+==============+
| ESP32 Plus主板 | Keyes 激光模块 | XH2.54-3P         | USB线 x1     |
| x1             | x1             | 转杜邦线母单线 x1 |              |
+----------------+----------------+-------------------+--------------+

1.5 模块接线图

.. figure:: ./media/041501.png
   :alt: img

   img

1.6 代码说明

.. figure:: ./media/img-20241113155054.png
   :alt: Img

   Img

向指定管脚设置“高”或“低”，选择“高”代表给该管脚设置高电平，有电压，有电流，则激光头点亮；选择“低”代表给管脚设置低电平，没电压，没有电流，则激光头不亮。

1.7 实验代码

本项目中使用的代码保存在文件夹“\*\*..:raw-latex:`\程序代码`:raw-latex:`\Mixly`\_代码\ **”中
（**\ 后面的项目代码保存的路径也一样，即：同下。\**），你也可以自己编写代码，其如下：

1. 从 “\ |Img|\ ” 拖出 “\ |image59|\ ”。

2. 从 “\ |image60|\ ” 拖出 “ |image61| ” 放入 “\ |image62|\ ”，管脚为 5
   ，设为 “低” 。

3. 从 “\ |image63|\ ” 拖出 “ |image64| ” ，管脚为 5 ，设为 “高” 。

4. 从 “\ |Img|\ ” 拖出 “\ |image65|\ ”，设置延时为2000毫秒。

5. 复制代码块 “ |image66| ” 1 次，将 “高” 改为 “低”。

完整代码：

.. figure:: ./media/img-20241113155422.png
   :alt: Img

   Img

1.8 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，你能看到模块上激光管发射红色激光信号2秒，然后关闭发射2秒，循环交替。

.. figure:: ./media/041701.png
   :alt: 041701

   041701

项目五 呼吸灯
~~~~~~~~~~~~~

1.1 项目介绍

在第二课我们学习了如何让LED闪烁。但是LED的玩法远不仅如此。在日常生活中你有没有遇到过灯光慢慢变亮或者慢慢变暗呢？这叫呼吸灯。所谓呼吸灯，就是控制LED逐渐变亮，然后逐渐变暗，循环交替。上一课我们学会了直接用高电平点亮LED，低电平熄灭LED。如果要让LED不那么亮但又不完全熄灭，介于中间状态，只需控制流过LED的电流就可以实现。电流减小LED变暗，电流增大LED变亮。所以只需要调节LED两端的电压减小或增大（电流也会随之减小或增大）就能控制LED的亮暗程度了。

数字端口电压输出只有LOW与HIGH两个开关，对应的就是0V与3.3V（或5V）的电压输出。可以把LOW定义为0，HIGH定义为1，1秒内让单片机输出500个0或者1的信号。如果这500个信号全部为1，那就是完整的3.3V；如果全部为0，那就是0V。如果010101010101这样输出，刚好一半，端口输出的平均电压就为1.65V了。这和放映电影是一个道理。我们所看的电影并不是完全连续的，它其实是每秒输出25张图片，人的肉眼分辨不出来，看上去就是连续的了，PWM也是同样的道理。如果想要不同的电压，就控制0与1的输出比例就可以了。当然这和真实的连续输出还是有差别的，单位时间内输出的0,1信号越多，控制的就越精确。

那么什么是PWM呢？PWM简称脉宽调制，是利用微处理器的数字输出来对模拟电路进行控制的一种非常有效的技术。

.. figure:: ./media/061101.jpg
   :alt: img

   img

PWM的频率是指在1秒钟内，信号从高电平到低电平再回到高电平的次数，也就是说一秒钟PWM有多少个周期，单位Hz。

PWM的周期，T=1/f，T是周期，f是频率。如果频率为50Hz
，也就是说一个周期是20ms，那么一秒钟就有 50次PWM周期。

占空比，是一个脉冲周期内，高电平的时间与整个周期时间的比例，单位是%
(0%-100%) 一个周期的长度。如下图所示。

.. figure:: ./media/061102.jpg
   :alt: img

   img

这一课学习使用PWM来控制0与1的输出比例实现控制电压。

1.2 模块参数

工作电压 : DC 3.3 ~ 5V

工作温度 ：-10°C ~ +50°C

控制信号 : 数字信号

尺寸 ：32 x 23.8 x 12 mm

定位孔大小：直径为 4.8 mm

接口 ：间距为2.54 mm 3pin防反接口

1.3 模块原理图

.. figure:: ./media/021301.jpg
   :alt: img

   img

前面实验二我们就学习了如何控制一个LED，由原理图可以得知，控制时，模块上GND
VCC供电后，信号端S为高电平时，模块上LED亮起。

1.4 实验组件

+----------------+----------------+-------------------+--------------+
| |img|          | |image67|      | |image68|         | |image69|    |
+================+================+===================+==============+
| ESP32 Plus主板 | Keyes          | XH2.54-3P         | USB线 x1     |
| x1             | 紫色LED模块 x1 | 转杜邦线母单线 x1 |              |
+----------------+----------------+-------------------+--------------+

1.5 模块接线图

.. figure:: ./media/021501.png
   :alt: img

   img

1.6 代码说明

.. figure:: ./media/img-20241029165007.png
   :alt: Img

   Img

向指定管脚设置通道，赋值可以为0 ~ 255，是LED熄灭。

.. figure:: ./media/img-20241029164725.png
   :alt: Img

   Img

将数字管脚 5 的通道设置为CH0(LT0)，赋值为0 ，是LED熄灭。

.. figure:: ./media/img-20241029165054.png
   :alt: Img

   Img

将管脚 5 的通道设置为CH0(LT0)，赋值为i。

.. figure:: ./media/img-20241029165146.png
   :alt: Img

   Img

设置一个变量 i ，i从 0 逐渐增加到 255，每一次都加 5，总共加了 51 次，
每次以10毫秒的频率增加 5，LED逐渐变亮。

.. figure:: ./media/img-20241029165211.png
   :alt: Img

   Img

设置一个变量i，i从 255 逐渐减少到 0，每一次都减5，总共减了51次， 每次以
10 毫秒的频率减 5，LED逐渐变暗。

1.7 实验代码

本项目中使用的代码保存在文件夹“\*\*..:raw-latex:`\程序代码`:raw-latex:`\Mixly`\_代码\ **”中
（**\ 后面的项目代码保存的路径也一样，即：同下。\**），你也可以自己编写代码，其如下：

1. 从 “\ |Img|\ ” 拖出 “\ |image70|\ ”。

2. 从 “\ |image71|\ ” 拖出 “ |image72| ” 放入 “\ |image73|\ ”，管脚为 5
   ，通道设置为CH0(LT0)，赋值为 0。

3. 从 “\ |Img|\ ” 拖出 “ |image74| ” ，从 1 到 10 步长为 1 改成从 0 到
   255 步长为 5。

4. 从 “\ |image75|\ ” 拖出 “ |image76| ” 放入 “ |image77| ”，管脚为 5
   ，通道设置为CH0(LT0)；又从 “ |image78|\ ” 拖出 “\ |image79| ”
   放入赋值为 0 处。

5. 从 “\ |Img|\ ” 拖出 “\ |image80|\ ” 放入 “ |image81|
   ”，设置延时为10毫秒。

6. 复代码块 “ |image82| ” 1 次，从 0 到 255 步长为 5 改成从 255 到 0
   步长为 -5。

完整代码：

.. figure:: ./media/img-20241113161102.png
   :alt: Img

   Img

1.8 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，你能看到模块上的紫色LED从暗逐渐变亮，再从亮逐渐变暗，就像呼吸一样。

项目六 RGB模块调节LED颜色
~~~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

在这个套件中，有一个Keyes
共阴RGB模块，它采用F10-全彩RGB雾状共阴LED元件。控制时，我们需要将模块的R、G、B脚连接至单片机的PWM口。由于我们这个RGB模块是共阴的，公共管脚就接GND（共阳RGB公共管脚接VCC)。

RGB三色也就是三基色，红色、绿色、蓝色。人眼对RGB三色最为敏感，大多数的颜色可以通过RGB三色按照不同的比例合成产生。同样绝大多数单色光也可以分解成RGB三种色光。这是色度学的最基本原理，即三基色原理。RGB三基色按照不同的比例相加合成混色称为相加混色，除了相加混色法之外还有相减混色法。可根据需要相加相减调配颜色。

接下来，我们基于刚刚学习的三基色原理，通过PWM端口控制R、G、B各色的占空比，使R、G、B三色按照不同的比例合成产生多重颜色显示在LED上。

1.2 模块参数

工作电压 ：DC 3.3 ~ 5V

工作温度 ：-10°C ~ +50°C

输入信号 ：PWM信号

尺寸 ：32 x 23.8 x 16.9 mm

定位孔大小 ：直径为 4.8 mm

接口 ：间距为2.54 mm 4pin防反接口

1.3 模块原理图

.. figure:: ./media/061301.png
   :alt: img

   img

通过调节R、G、B、三个灯的PWM值，控制LED元件显示红光、绿光和蓝光的比例，从而控制RGB模块上LED显示不同颜色灯光。当设置的PWM值越大，对应显示的颜色比例越重。理论上来说，通过调节这3中颜色光的混合比例，可以模拟出所有颜色的灯光。

1.4 实验组件

+----------------+----------------+---------------------+-------------+
| |img|          | |image83|      | |image84|           | |image85|   |
+================+================+=====================+=============+
| ESP32 Plus主板 | Keyes          | XH2.54-4P           | USB线 x1    |
| x1             | 共阴RGB模块 x1 | 转杜邦线母单线 x1   |             |
+----------------+----------------+---------------------+-------------+

1.5 模块接线图

.. figure:: ./media/061501.png
   :alt: img

   img

1.6 代码说明

.. figure:: ./media/img-20241101084925.png
   :alt: Img

   Img

设置共阴RGB亮不同颜色光，R、G、B可以在 0 ~ 255 之间设置任何数字。

1.7 实验代码

你可以打开我们提供的代码，也可以自己编写代码，其如下：

1. 从 “\ |Img|\ ” 拖出 “\ |image86|\ ”。

2. 从 “\ |image87|\ ” 拖出 “ |image88| ” 放入 “\ |image89|\ ”，R 管脚 为
   32 、G 管脚 为 4 、B 管脚 为 2 ，R 、G、B 的值都赋值为 0 。

.. figure:: ./media/img-20241101091350.png
   :alt: Img

   Img

3. 从 “\ |Img|\ ” 拖出 “ |image90| ” ，从 1 到 10 步长为 1 改成从 0 到
   255 步长为 1。

4. 复制代码块 “ |image91| ” 1 次放入 “ |image92| ” ，又从 “ |image93|\ ”
   拖出 “\ |image94| ” 放入 R（0 ~ 255）后面 0 处；再从 “ |image95| ”
   拖出 “ |image96| 放入 G（0 ~ 255）后面 0 处，将 “ + ” 改成 “ - ”
   ，把“ - ”前面的 1 改成 128，“ - ”后面的 1 替换成变量 i ；再复制代码块
   “ |image97| ” 放入 G（0~255）后面 0 处，将 128 改成 255 ；再延时 10
   毫秒。

.. figure:: ./media/img-20241029175036.png
   :alt: Img

   Img

5. 复制代码块 “ |image98| ” 1 次，将 从 0 到 255 步长为 1 改成 从 255 到
   0 步长为 -1 。

.. figure:: ./media/img-20241101092739.png
   :alt: Img

   Img

完整代码：

.. figure:: ./media/img-20241113163146.png
   :alt: Img

   Img

1.8 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，你能看到模块上RGB
LED开始随机显示颜色。

.. figure:: ./media/061701.png
   :alt: img

   img

.. figure:: ./media/061702.png
   :alt: img

   img

项目七 按键传感器检测实验
~~~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

在这个套件中，有一个Keyes单路按键模块，它主要由1个轻触开关组成，自带1个黄色按键帽。第二课我们学习了怎么让单片机的引脚输出一个高电平或者低电平，这节课程我们就来学习怎么读取引脚的电平。

按键模块的按键按下，单片机读取到低电平，松开按键读取到高电平。通过读取传感器上S端的高低电平，判断按键是否按下，并且在串口监视器上显示测试结果。

1.2 模块参数

工作电压 : DC 3.3 ~ 5V

工作温度 ：-10°C ~ +50°C

控制信号 : 数字信号

尺寸 ：32 x 23.8 x 15.6 mm

定位孔大小：直径为 4.8 mm

接口 ：间距为2.54 mm 3pin防反接口

1.3 模块原理图

.. figure:: ./media/071301.png
   :alt: img

   img

按键有四个引脚，其中1与3相连，2与4相连。按键未被按下时，13与24是断开的。信号端S读取的电平是被4.7K的上拉电阻R1所拉高的高电平。而当按键被按下时，13和24连通，原本上拉的13脚被24脚接的GND下拉至低电平，此时信号端S读取到低电平。即按下按键，传感器信号端S为低电平；松开按键时，信号端S为高电平。

1.4 实验组件

+----------------+----------------+-------------------+--------------+
| |img|          | |image99|      | |image100|        | |image101|   |
+================+================+===================+==============+
| ESP32 Plus主板 | Keyes          | XH2.54-3P         | USB线 x1     |
| x1             | 单路按键模块   | 转杜邦线母单线 x1 |              |
|                | x1             |                   |              |
+----------------+----------------+-------------------+--------------+

1.5 模块接线图

.. figure:: ./media/071501.png
   :alt: img

   img

1.6 代码说明

.. figure:: ./media/img-20241029162852.png
   :alt: Img

   Img

从指定的数字管脚读取按键开关的数字信号(高/低电平)。

.. figure:: ./media/img-20241113171600.png
   :alt: Img

   Img

如果（ ）里的表达式为真，则运行 执行 块内的代码。如果（ ）里表达式为假
，则运行 否则 块内的代码。

1.7 实验代码

你可以打开我们提供的代码，也可以自己编写代码，其如下：

1. 从 “\ |Img|\ ” 拖出 “\ |image102|\ ”。

2. 从 “\ |image103|\ ” 拖出 “\ |image104|\ ” 放入 “\ |image105|\ ”。

3. 先从 “ |image106|\ ” 拖出 “\ |image107|\ ” 放入 “\ |image108|\ ”
   中；再从 “\ |image109|\ ” 拖出 “\ |image110|\ ” 放入
   “\ |image111|\ ”中，将 “item” 改成 “switch_state” 。

.. figure:: ./media/img-20241030141614.png
   :alt: Img

   Img

4. 先从 “\ |image112|\ ” 拖出 “\ |image113|\ ” ，再从 “\ |image114|\ ”
   拖出 “ |image115| ” ，管脚为 5 。

.. figure:: ./media/img-20241030141846.png
   :alt: Img

   Img

5. 先从 “\ |image116|\ ” 拖出 “ |image117| ”，将 “自动换行” 改成
   “不换行” ；再从 “ |image118|\ ” 拖出 “\ |image119| ” 。

.. figure:: ./media/img-20241030141906.png
   :alt: Img

   Img

6. 先从 “\ |Img|\ ” 拖出 “\ |image120|\ ” 点击 |image121| 进去将
   “\ |image122|\ ” 移进 “\ |image123|\ ” 中，再点击 |image124| ；接着从
   “\ |image125|\ ” 拖出 “\ |image126|\ ” 放入 “\ |image127|\ ” 中；再从
   “ |image128|\ ” 拖出 “\ |image129| ” 放入 “ = ” 左侧 ；最后从
   “\ |image130|\ ” 拖出 “\ |image131|\ ” 放入 “ = ” 右侧。

.. figure:: ./media/img-20241030142059.png
   :alt: Img

   Img

7. 先从 “\ |image132|\ ” 拖出 “\ |image133|\ ” 放入 “\ |image134|\ ”的
   执行 处 ，将 “自动换行” 改成 “不换行” ；接着从 “ |image135| ” 拖出 “
   |image136| ”，将 hello 变成 2 个空格；复制代码块 “\ |image137|\ ”
   1次，将 “不换行” 改成 “自动换行” ，空格改成 “Press the botton”
   ；添加延时 100 毫秒。

.. figure:: ./media/img-20241113170607.png
   :alt: Img

   Img

8. 复制代码块 “\ |image138|\ ” 1 次 放入 否则 处 ，将 “Press the botton”
   改成 “Loosen the botton” 。

.. figure:: ./media/img-20241113170917.png
   :alt: Img

   Img

完整代码：

.. figure:: ./media/img-20241113171037.png
   :alt: Img

   Img

1.8 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，打开串口监视器，设置波特率为
**9600** 。

当按下传感器模块上的按键时，按键值value为0，串口监视器打印出“\ **0 Press
the button**\ ”；松开按键时，按键值value为1，串口监视器打印出“\ **1
Loosen the button**\ ”字符。

.. figure:: ./media/img-20241113171743.png
   :alt: Img

   Img

项目八 电容触摸传感器检测实验
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

在这个套件中，有一个Keyes 电容触摸模块，它主要由1个触摸检测芯片
TTP223-BA6
构成。模块上提供一个触摸按键，功能是用可变面积的按键取代传统按键。当我们上电之后，传感器需要约0.5秒的稳定时间，此时间段内不要触摸按键，此时所有功能都被禁止，始终进行自校准，校准周期约为4秒。

1.2 模块参数

工作电压 ：DC 3.3 ~ 5V

最大功率 ：0.3 W

工作温度 ：-10°C ~ +50°C

输出信号 ：数字信号

尺寸 ：32 x 23.8 x 9 mm

定位孔大小 ：直径为 4.8 mm

接口 ：间距为2.54 mm 3pin防反接口

1.3 模块原理图

.. figure:: ./media/081301.png
   :alt: img

   img

TTP223N-BA6 的输出通过 AHLB（4）引脚选择高电平或低电平有效。通过
TOG（6）引脚选择直接模式或触发模式。

=== ==== =====================
TOG AHLB 引脚Q的功能
=== ==== =====================
0   0    直接模式，高电平有效
0   1    直接模式，低电平有效
1   0    触发模式，上电状态为0
1   1    触发模式，上电状态为1
=== ==== =====================

从原理图我们可以知道 TOG 脚和 AHLB
脚是悬空的，此时输出为直接模式，高电平有效。

当我们用手指触摸模块上的感应区时，信号端 S
输出高电平（上一课学习的按键模块与之相反，当按键感应到按下输出低电平），板载红色LED点亮，我们通过读取模块上
S 端的高低电平，判断电容触摸模块上的感应区是否感应到触摸。

1.4 实验组件

+----------------+----------------+-------------------+--------------+
| |img|          | |image139|     | |image140|        | |image141|   |
+================+================+===================+==============+
| ESP32 Plus主板 | Keyes          | XH2.54-3P         | USB线 x1     |
| x1             | 电容触摸模块   | 转杜邦线母单线 x1 |              |
|                | x1             |                   |              |
+----------------+----------------+-------------------+--------------+

1.5 模块接线图

.. figure:: ./media/081501.png
   :alt: img

   img

1.6 代码说明

.. figure:: ./media/img-20241113172000.png
   :alt: Img

   Img

从指定的数字管脚读取电容触摸传感器的数字信号(高/低电平)。

.. figure:: ./media/img-20241113171600.png
   :alt: Img

   Img

如果（ ）里的表达式为真，则运行 执行 块内的代码。如果（ ）里表达式为假
，则运行 否则 块内的代码。

1.7 实验代码

你可以打开我们提供的代码，也可以自己编写代码，其编写代码的过程可以参考
“\ 第七课 按键传感器检测实验\ ”，这里就不重复讲解：

.. figure:: ./media/img-20241113172712.png
   :alt: Img

   Img

1.8 实验结果

代按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，打开串口监视器，设置波特率为
**9600**\ 。

当触摸模块上的感应区感应到触摸时，板载红色LED点亮，value 值为
1，串口监视器打印出“\ **1 Press the
button**\ ”；当没有感应到触摸时，板载红色LED熄灭，value 值为
0，串口监视器打印出“\ **0 Loosen the button**\ ”。

.. figure:: ./media/081701.png
   :alt: img

   img

.. figure:: ./media/081702.png
   :alt: img

   img

.. figure:: ./media/img-20241113173131.png
   :alt: Img

   Img

项目九 避障传感器检测障碍物
~~~~~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

在这个套件中，有一个Keyes
避障传感器，它主要由一对红外线发射与接收管元件组成。实验中，我们通过读取传感器上S端高低电平，判断是否存在障碍物。

1.2 模块参数

工作电压 : DC 5V

电流 : 50 mA

最大功率 : 0.3 W

工作温度 ：-10°C ~ +50°C

输出信号 : 数字信号

感应距离 : 2 ~ 40 cm

尺寸 ：32 x 23.8 x 11 mm

定位孔大小：直径为 4.8 mm

接口 ：间距为2.54 mm 3pin防反接口

1.3 模块原理图

.. figure:: ./media/091301.jpg
   :alt: img

   img

NE555时基电路提供给发射管TX发射出一定频率的红外信号，红外信号会随着传送距离的加大逐渐衰减，如果遇到障碍物，就会形成红外反射。当检测方向RX遇到反射回来的信号比较弱时，接收检测引脚输出高电平，说明障碍物比较远；当反射回来的信号比较强，接收检测引脚输出低电平，说明障碍物比较近，此时指示灯亮起。传感器上有两个电位器，一个用于调节发送功率，一个用于调节接收频率，通过调节两个电位器，我们可以调节它的有效距离。

1.4 实验组件

+----------------+----------------+-------------------+--------------+
| |img|          | |image142|     | |image143|        | |image144|   |
+================+================+===================+==============+
| ESP32 Plus主板 | Keyes          | XH2.54-3P         | USB线 x1     |
| x1             | 避障传感器 x1  | 转杜邦线母单线 x1 |              |
+----------------+----------------+-------------------+--------------+

1.5 模块接线图

.. figure:: ./media/091501.png
   :alt: img

   img

1.6 代码说明

.. figure:: ./media/img-20241113174322.png
   :alt: Img

   Img

从指定的数字管脚读取避障传感器的数字信号(高/低电平)。

.. figure:: ./media/img-20241113171600.png
   :alt: Img

   Img

如果（ ）里的表达式为真，则运行 执行 块内的代码。如果（ ）里表达式为假
，则运行 否则 块内的代码。

1.7 实验代码

你可以打开我们提供的代码，也可以自己编写代码，其编写代码的过程可以参考
“\ 第七课 按键传感器检测实验\ ”，这里就不重复讲解：

.. figure:: ./media/img-20241113174052.png
   :alt: Img

   Img

1.8 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，接着开始调节传感器模块上的两个电位器感应距离。避障传感器上有两个电位器，分别是接收频率调节电位器和发射功率调节电位器，如下图所示。

.. figure:: ./media/091701.jpg
   :alt: img

   img

先调节发射功率调节电位器，先将电位器顺时针拧到尽头，然后逆时针慢慢往回调，当调节到SLED灯亮起时，微调使传感器上SLED灯介于亮与不亮之间的\ **不亮**\ 状态。

接着设置接收频率调节电位器，同样将电位器顺时针拧到尽头，然后逆时针慢慢往回调，当SLED灯亮起时，微调使传感器上SLED灯介于亮与不亮之间的\ **不亮**\ 状态，此时能检测障碍物的距离最长。

打开串口监视器，设置波特率为 **9600**\ 。当传感器检测到障碍物时，value
值为 **0**\ ，SLED 灯亮，串口监视器打印出 “\ **0 There are
obstacles**\ ” ；没有检测到障碍物时，value 值为 **1**\ ，SLED
灯灭，串口监视器打印出 “\ **1 All going well**\ ” 。

.. figure:: ./media/091703.png
   :alt: img

   img

.. figure:: ./media/091704.png
   :alt: img

   img

.. figure:: ./media/img-20241113174610.png
   :alt: Img

   Img

项目十 循迹传感器检测黑白线
~~~~~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

在这个套件中，有一个Keyes 单路循线传感器，它主要由1个TCRT5000
反射型黑白线识别传感器元件组成。

1.2 模块参数

工作电压 ：DC 3.3 ~ 5V

工作温度 ：-10°C ~ +50°C

输入信号 ：PWM信号

尺寸 ：32 x 23.8 x 9.4 mm

定位孔大小 ：直径为 4.8 mm

接口 ：间距为2.54 mm 3pin防反接口

1.3 模块原理图

.. figure:: ./media/101301.png
   :alt: 041301

   041301

上一课我们学习了避障传感器的原理，而巡线传感器的原理也是相类似的。TCRT5000
反射型传感器包含了一个红外发射器和光电探测器，彼此相邻。巡线传感器的红外发射器持续发出红外线，红外线经过反射后被接收。接收后会产生电流，这个电流随着红外线光增强而变大。接收后利用电压比较器
LM393 ，将接收到红外线后 LM393 的 3 脚的电压值与可调电位器给 LM393 的 2
脚设置的阈值电压进行比较。

当发射出的红外线没有被反射回来或被反射回来但强度不够大时，红外接收管一直处于关闭状态，此时
R3 处的电压接近VCC，即 LM393 的 3 脚电压接近 VCC。而LM393 的 2
脚电压小于 VCC，通过 LM393 比较器后比较 1
脚输出高电平，LED不导通。随着反射回来的红外线光增强，电流也随之变大。此时
3 脚的电压值等于 VCC - I*R3，随着电流的增大，3
脚的电压就会越来越小。当电压小到比 2 脚的电压还小的时候，接收检测引脚 1
脚输出低电平，LED导通，被点亮。

当红外信号发送到黑色轨道时，由于黑色吸光能力比较强，红外信号发送出去后就会被吸收掉，反射部分很微弱。而白色反射率高，所以白色轨道就会把大部分红外信号反射回来。即检测到黑色或没检测到物体时，信号端为高电平；检测到白色物体时，信号端为低电平。它的检测高度为
0—3cm。我们可以通过旋转传感器上电位器，调节灵敏度，即调节检测高度。当旋转电位器，使传感器上红色
LED介于不亮与亮之间的临界点时，灵敏度最好。

1.4 实验组件

+----------------+------------------+-------------------+--------------+
| |img|          | |image145|       | |image146|        | |image147|   |
+================+==================+===================+==============+
| ESP32 Plus主板 | Keyes            | XH2.54-3P         | USB线 x1     |
| x1             | 单路循线传感器x1 | 转杜邦线母单线 x1 |              |
+----------------+------------------+-------------------+--------------+

1.5 模块接线图

.. figure:: ./media/101501.png
   :alt: img

   img

1.6 代码说明

.. figure:: ./media/img-20241113175032.png
   :alt: Img

   Img

从指定的数字管脚读取循迹传感器的数字信号(高/低电平)。

.. figure:: ./media/img-20241113171600.png
   :alt: Img

   Img

如果（ ）里的表达式为真，则运行 执行 块内的代码。如果（ ）里表达式为假
，则运行 否则 块内的代码。

1.7 实验代码

你可以打开我们提供的代码，也可以自己编写代码，其编写代码的过程可以参考
“\ 第七课 按键传感器检测实验\ ”，这里就不重复讲解：

.. figure:: ./media/img-20241113175142.png
   :alt: Img

   Img

1.8 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，打开串口监视器，设置波特率为
**9600**\ 。

串口监视器打印出对应的数据和字符。当传感器检测到黑色物体货检测距离太远时，value值为
1 ，LED不亮，串口监视器打印出“\ **1
Black**\ ”；检测到白色物体（能够反光）时，value值为 0
，LED亮，串口监视器打印出“\ **0 White**\ ”。

.. figure:: ./media/img-20241113175655.png
   :alt: Img

   Img

项目十一 光折断计数
~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

在这个套件中，有一个Keyes 光折断模块，它主要由 1 个 ITR-9608
光电开关组成，它属于对射光电开关传感器。

这一课，我们通过设置代码，模拟出流水线上利用类似传感器实现对产品进行计数的功能。

1.2 模块参数

工作电压 ：DC 3.3 ~ 5V

工作温度 ：-10°C ~ +50°C

输入信号 ：PWM信号

尺寸 ：32 x 23.8 x 13 mm

定位孔大小 ：直径为 4.8 mm

接口 ：间距为2.54 mm 3pin防反接口

1.3 模块原理图

光电开关是是利用被检测物体对光束的遮挡或反射，由同步回路选通电路，从而检测遮挡物体的有无。所有能反射光线的物体都可以被检测。光电开关将输入的电流在发射器上转换为光信号并射出，然后接收器根据接收到的光线强弱或有无，对目标物体进行检测。

.. figure:: ./media/111301.jpg
   :alt: img

   img

当用不透明物体放置在传感器凹槽时，C 脚与 VCC 连通，传感器信号端 S
为高电平，自带红色 LED熄灭；传感器凹槽没有任何东西时，传感器信号端被 R2
拉低为低电平，自带红色LED亮起。

1.4 实验组件

+---------------+-----------------+--------------------+---------------+
| |img|         | |image148|      | |image149|         | |image150|    |
+===============+=================+====================+===============+
| ESP32         | Keyes           | XH2.54-3P          | USB线 x1      |
| Plus主板 x1   | 光折断模块 x1   | 转杜邦线母单线 x1  |               |
+---------------+-----------------+--------------------+---------------+

1.5 模块接线图

.. figure:: ./media/111501.png
   :alt: img

   img

1.6 代码说明

.. figure:: ./media/img-20241114084659.png
   :alt: Img

   Img

从指定的数字管脚读取光折断传感器的数字信号(高/低电平)。

.. figure:: ./media/img-20241114084747.png
   :alt: Img

   Img

如果（ ）里的表达式为真，则运行 执行 块内的代码。

通过以下表格，我们可以了解此课程代码的逻辑设置，这个编程技巧我们在后面还会用到。

===================================== =======
初始状态                              
===================================== =======
State（传感信号端数值）               设置为0
lastState（传感器信号端上一循环数值） 设置为0
PushCounter（累计通过物体数目）       设置为0
===================================== =======

+----------------------------+------------------------------------------------------------------+--------------------------------------------------+
| 状态                       |                                                                  |                                                  |
+============================+==================================================================+==================================================+
| 当物体开始穿过传感器凹槽时 | lastState为0，State检测到变为1，两个数据不相等，lastState变为1。 | PushCounter设置为PushCounter加1打印PushCounter值 |
+----------------------------+------------------------------------------------------------------+--------------------------------------------------+
| 当物体离开传感器凹槽时     | lastState为1，State检测到变为0，两个数据不相等，lastState变为0。 | PushCounter不变不打印PushCounter值               |
+----------------------------+------------------------------------------------------------------+--------------------------------------------------+
| 当物体再次穿过传感器凹槽时 | lastState为0，State检测到变为1，两个数据不相等，lastState变为1。 | PushCounter设置为PushCounter加1打印PushCounter值 |
+----------------------------+------------------------------------------------------------------+--------------------------------------------------+
| 当物体再次离开传感器凹槽时 | lastState为1，State检测到变为0，两个数据不相等，lastState变为0。 | PushCounter不变不打印PushCounter值               |
+----------------------------+------------------------------------------------------------------+--------------------------------------------------+

1.7 实验代码

你可以打开我们提供的代码，也可以自己编写代码，其如下：

1. 从 “\ |Img|\ ” 拖出 “\ |image151|\ ”。

2. 从 “\ |image152|\ ” 拖出 “\ |image153|\ ” 放入 “\ |image154|\ ”。

3. 先从 “ |image155|\ ” 拖出 “\ |image156|\ ” 3 次 放入 “\ |image157|\ ”
   中；再从 “\ |image158|\ ” 拖出 “\ |image159|\ ” 3 次 放入
   “\ |image160|\ ”中，将 “item” 分别改成 “ PushCounter ” 、“ State ”、“
   lastState ”。

.. figure:: ./media/img-20241114082327.png
   :alt: Img

   Img

4. 先从 “\ |image161|\ ” 拖出 “\ |image162|\ ” ，再从 “\ |image163|\ ”
   拖出 “ |image164| ” ，管脚为 5 。

.. figure:: ./media/img-20241114082600.png
   :alt: Img

   Img

5. 先从 “\ |Img|\ ” 拖出 “\ |image165|\ ” ；接着从 “\ |image166|\ ” 拖出
   “\ |image167|\ ” 放入 “\ |image168|\ ” 中；再从 “ |image169|\ ” 拖出
   “\ |image170|\ ” 放入 “ = ” 左侧， 拖出 “\ |image171|\ ” 放入 “ = ”
   右侧，将 “=” 改成 “≠” 。

.. figure:: ./media/img-20241114083016.png
   :alt: Img

   Img

6. 复制代码块 “\ |image172|\ ” 1 次放入 “\ |image173|\ ” 中，将
   “\ |image174|\ ” 换成 “\ |image175|\ ” ，“≠” 改成 “=” ，数字 0 改成 1
   。

.. figure:: ./media/img-20241114083344.png
   :alt: Img

   Img

7. 先从 “\ |image176|\ ” 拖出 “\ |image177|\ ” 放入 “\ |image178|\ ”
   中；接着从 “\ |image179|\ ” 拖出 “\ |image180|\ ” 放入
   “\ |image181|\ ” 中；再从 “\ |image182|\ ” 拖出 “\ |image183|\ ” 放入
   “\ |image184|\ ” 左侧 1 处。

.. figure:: ./media/img-20241114084114.png
   :alt: Img

   Img

8. 先从 “\ |image185|\ ” 拖出 “\ |image186|\ ” 放入 “\ |image187|\ ”
   中；接着复制 “\ |image188|\ ” 1 次放入 “\ |image189|\ ” 中。

.. figure:: ./media/img-20241114084302.png
   :alt: Img

   Img

9. 从 “\ |image190|\ ” 拖出 “\ |image191|\ ” 和 “\ |image192|\ ”
   并且组合在一起，放入 “\ |image193|\ ” 中。

.. figure:: ./media/img-20241114084553.png
   :alt: Img

   Img

完整代码：

.. figure:: ./media/img-20241114082003.png
   :alt: Img

   Img

1.8 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，打开串口监视器，设置波特率为
**9600**\ 。

串口监视器打印出 PushCounter
的数据，物体每穿过传感器凹槽一次，PushCounter 数据加 1。

.. figure:: ./media/111701.png
   :alt: img

   img

.. figure:: ./media/111702.png
   :alt: img

   img

.. figure:: ./media/img-20241114081909.png
   :alt: Img

   Img

项目十二 倾斜模块的原理
~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

在这个套件中，有一个Keyes
倾斜传感器，主要由一个倾斜开关组成，其内部带有一颗滚珠，用来监测倾斜情况。倾斜开关可以依据模块是否倾斜而输出不同的电平信号。当开关高于水平位置倾斜时开关导通，低于水平位置时开关断开。倾斜模块可用于倾斜检测、报警器制作或者其他检测。

1.2 模块参数

工作电压 : DC 3.3 ~ 5V

电流 : 50 mA

最大功率 : 0.3 W

工作温度 ：-10°C ~ +50°C

输出信号 : 数字信号

尺寸 ：32 x 23.8 x 8 mm

定位孔大小：直径为 4.8 mm

接口 ：间距为2.54 mm 3pin防反接口

1.3 模块原理图

.. figure:: ./media/121301.png
   :alt: img

   img

Keyes
倾斜传感器的原理非常简单，主要是利用滚珠在开关内随不同倾斜角度的变化使滚珠开关P1的引脚1和2导通或者不导通，当滚珠开关P1的引脚1和2导通时，由于1脚接GND，所以信号端S被拉低为低电平，此时红色LED和R2组成的电路形成回路，电流经过红色LED，点亮红色LED；当滚珠开关P1的引脚1和2不导通时，滚珠开关P1的引脚2被4.7K的上拉电阻R1拉高使得信号端S为高电平，电流不经过红色LED，红色LED熄灭。

1.4 实验组件

+----------------+----------------+-------------------+--------------+
| |img|          | |image194|     | |image195|        | |image196|   |
+================+================+===================+==============+
| ESP32 Plus主板 | Keyes          | XH2.54-3P         | USB线 x1     |
| x1             | 倾斜传感器 x1  | 转杜邦线母单线 x1 |              |
+----------------+----------------+-------------------+--------------+

1.5 模块接线图

.. figure:: ./media/121501.png
   :alt: img

   img

1.6 代码说明

.. figure:: ./media/img-20241114090554.png
   :alt: Img

   Img

从指定的数字管脚读取倾斜传感器的数字信号(高/低电平)。

.. figure:: ./media/img-20241113171600.png
   :alt: Img

   Img

如果（ ）里的表达式为真，则运行 执行 块内的代码。如果（ ）里表达式为假
，则运行 否则 块内的代码。

1.7 实验代码

你可以打开我们提供的代码，也可以自己编写代码，其编写代码的过程可以参考
“\ 第七课 按键传感器检测实验\ ”，这里就不重复讲解：

.. figure:: ./media/img-20241114091355.png
   :alt: Img

   Img

1.8 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，打开串口监视器，设置波特率为
**9600**\ 。

将倾斜模块往某一边倾斜，若模块上的红色LED\ **不亮**\ ，串口监视器打印数字电平信号“\ **1**\ ”；若模块上的红色LED点\ **亮**\ ，串口监视器打印数字电平信号“\ **0**\ ”。

|image197|

|image198|

项目十三 碰撞传感器的原理
~~~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

在这个套件中，有一个Keyes
碰撞传感器。上一课我们学习的倾斜模块用的是滚珠开关，这一课我们学习的碰撞传感器用的是轻触开关。碰撞传感器常用于3D打印机内做限位开关。

1.2 模块参数

工作电压 ：DC 3.3-5V

控制信号 ：数字信号

尺寸 ：39.5 x 23.5 x 9.2 mm

定位孔大小 ：直径为 4.8 mm

接口 ：间距为2.54 mm 3pin防反接口

1.3 模块原理图

.. figure:: ./media/131301.png
   :alt: img

   img

碰撞传感器主要由 1 个轻触开关组成。当物体碰到轻触开关弹片，下压时，2
脚和 3 脚导通，传感器信号端 S 被下拉为低电平，模块上自带的红色 LED
点亮；当没有物体碰撞轻触开关时，2 脚和 3 脚不导通，3 脚被 4.7 K的电阻 R1
上拉为高电平，即传感器信号端S为高电平，此时自带红色 LED
熄灭。碰撞传感器的原理与倾斜模块的电路原理几乎一样，不同之处在于导通方式。

1.4 实验组件

+---------------+---------------+---------------------+---------------+
| |img|         | |image199|    | |image200|          | |image201|    |
+===============+===============+=====================+===============+
| ESP32         | Keyes         | XH2.54-3P           | USB线 x1      |
| Plus主板 x1   | 碰撞传感器 x1 | 转杜邦线母单线 x1   |               |
+---------------+---------------+---------------------+---------------+

1.5 模块接线图

.. figure:: ./media/131501.png
   :alt: img

   img

1.6 代码说明

.. figure:: ./media/img-20241114091648.png
   :alt: Img

   Img

从指定的数字管脚读取碰撞传感器的数字信号(高/低电平)。

.. figure:: ./media/img-20241113171600.png
   :alt: Img

   Img

如果（ ）里的表达式为真，则运行 执行 块内的代码。如果（ ）里表达式为假
，则运行 否则 块内的代码。

1.7 实验代码

你可以打开我们提供的代码，也可以自己编写代码，其编写代码的过程可以参考
“\ 第七课 按键传感器检测实验\ ”，这里就不重复讲解：

.. figure:: ./media/img-20241114091919.png
   :alt: Img

   Img

1.8 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，打开串口监视器，设置波特率为
**9600**\ 。

将传感器的上弹片下压时，value值为0，模块上LED点亮，串口监视器打印出“\ **0
The end of this!**\ ”
；当松开弹片时，value值为1，模块上LED熄灭，串口监视器打印出“\ **1 All
going well!**\ ”。

.. figure:: ./media/img-20241114091847.png
   :alt: Img

   Img

项目十四 霍尔传感器检测南极磁场
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

在这个套件中，有一个Keyes 霍尔传感器，它主要由 A3144
线性霍尔元件组成。该元件是由电压调整器、霍尔电压发生器、差分放大器、史密特触发器，温度补偿电路和集电极开路的输出级组成的磁敏传感电路，其输入为磁感应强度，输出是一个数字电压讯号。

.. figure:: ./media/141101.png
   :alt: img

   img

霍尔效应传感器有两种主要类型，一种提供模拟输出，另一种提供数字输出。
A3144 是数字输出霍尔传感器。

1.2 模块参数

工作电压：DC 3.3-5V

控制信号：数字信号

尺寸：32 x 23.5 x 9.2 mm

定位孔大小：直径为 4.8 mm

接口：间距为2.54 mm 3pin防反接口

1.3 模块原理图

.. figure:: ./media/141301.jpg
   :alt: img

   img

传感器感应到无磁场或北极磁场时，信号端为高电平；感应到南极磁场时，信号端为低电平。当感应磁场强度越强时，感应距离越长。

1.4 实验组件

+-----------------+---------------+--------------------+---------------+
| |img|           | |image202|    | |image203|         | |image204|    |
+=================+===============+====================+===============+
| ESP32 Plus主板  | Keyes         | XH2.54-3P          | USB线 x1      |
| x1              | 霍尔传感器 x1 | 转杜邦线母单线 x1  |               |
+-----------------+---------------+--------------------+---------------+

1.5 模块接线图

.. figure:: ./media/141501.png
   :alt: img

   img

1.6 代码说明

.. figure:: ./media/img-20241114092024.png
   :alt: Img

   Img

从指定的数字管脚读取霍尔传感器的数字信号(高/低电平)。

.. figure:: ./media/img-20241113171600.png
   :alt: Img

   Img

如果（ ）里的表达式为真，则运行 执行 块内的代码。如果（ ）里表达式为假
，则运行 否则 块内的代码。

1.7 实验代码

你可以打开我们提供的代码，也可以自己编写代码，其编写代码的过程可以参考
“\ 第七课 按键传感器检测实验\ ”，这里就不重复讲解：

.. figure:: ./media/img-20241114092147.png
   :alt: Img

   Img

1.8 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，打开串口监视器，设置波特率为
**9600**\ 。

当传感器感应到北极磁场或无磁场感应时，串口监视器打印出“\ **1 Just be all
normal!**\ ”，且传感器上的LED处于熄灭状态；当传感器感应到南极磁场时，串口监视器打印出“\ **0
The magnetic field at the South Pole!**\ ”，且模块上的LED被点亮。

.. figure:: ./media/img-20241114092449.png
   :alt: Img

   Img

项目十五 干簧管检测附近磁场
~~~~~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

在这个套件中，有一个Keyes 干簧管模块，它主要由一个MKA10110
绿色磁簧元件组成。簧管是干式舌簧管的简称，是一种有触点的无源电子开关元件，具有结构简单，体积小便于控制等优点。它的外壳是一根密封的玻璃管，管中装有两个铁质的弹性簧片电板，还灌有一种惰性气体。

实验中，我们通过读取模块上S端高低电平，判断模块附近是否存在磁场；并且在串口监视器上显示测试结果。

1.2 模块参数

工作电压 : DC 3.3 ~ 5V

电流 : 50 mA

最大功率 : 0.3 W

工作温度 ：-10°C ~ +50°C

输出信号 : 数字信号

尺寸 ：32 x 23.8 x 7.4 mm

定位孔大小：直径为 4.8 mm

接口 ：间距为2.54 mm 3pin防反接口

1.3 模块原理图

.. figure:: ./media/151301.png
   :alt: img

   img

一般状态下，玻璃管中的两个由特殊材料制成的簧片是分开的，此时信号端S被电阻R2上拉为高电平，LED熄灭。当有磁性物质靠近玻璃管时，在磁场磁力线的作用下，管内的两个簧片被磁化而互相吸引接触，簧片就会吸合在一起，使结点所接的电路连通，即信号端S连通GND，此时LED点亮。外磁力消失后，两个簧片由于本身的弹性而分开，线路也就断开了。该传感器就是利用元件这一特性，搭建电路将磁场信号转换为高低电平变换信号。

1.4 实验组件

+----------------+----------------+-------------------+--------------+
| |img|          | |image205|     | |image206|        | |image207|   |
+================+================+===================+==============+
| ESP32 Plus主板 | Keyes          | XH2.54-3P         | USB线 x1     |
| x1             | 干簧管模块 x1  | 转杜邦线母单线 x1 |              |
+----------------+----------------+-------------------+--------------+

1.5 模块接线图

.. figure:: ./media/151501.png
   :alt: img

   img

1.6 代码说明

.. figure:: ./media/img-20241114092540.png
   :alt: Img

   Img

从指定的数字管脚读取干簧管传感器的数字信号(高/低电平)。

.. figure:: ./media/img-20241113171600.png
   :alt: Img

   Img

如果（ ）里的表达式为真，则运行 执行 块内的代码。如果（ ）里表达式为假
，则运行 否则 块内的代码。

1.7 实验代码

你可以打开我们提供的代码，也可以自己编写代码，其编写代码的过程可以参考
“\ 第七课 按键传感器检测实验\ ”，这里就不重复讲解：

.. figure:: ./media/img-20241114092659.png
   :alt: Img

   Img

1.8 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，打开串口监视器，设置波特率为
**9600**\ 。

拿一块带有磁性的物体靠近干簧管模块，当模块检测到磁场时，value值为0且模块上的红色LED点亮，串口监视器打印出“\ **0
A magnetic
field**\ ”；没有检测到磁场时，value值为1，模块上红色LED熄灭，串口监视器打印出“\ **1
There is no magnetic field**\ ”。

.. figure:: ./media/img-20241114092747.png
   :alt: Img

   Img

项目十六 附近有人吗
~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

在这个套件中，有一个Keyes
人体红外热释传感器，它主要由一个RE200B-P传感器元件组成。它是一款基于热释电效应的人体热释运动传感器，能检测到人体或动物身上发出的红外线，配合菲涅尔透镜能使传感器探测范围更远更广。

实验中，通过读取模块上S端高低电平，判断附近是否有人在运动；并且在串口监视器上显示测试结果。

1.2 模块参数

工作电压 : DC 5 ~ 15V

工作电流 : 50 mA

最大功率 : 0.3 W

静态电流 : <50 uA

工作温度 ：-10°C ~ +50°C

控制信号 : 数字信号

触发方式 : L 不可重复触发/H 重复触发

最大检测距离 : 7米

感应角度 : <100 度锥角

尺寸 ：32 x 23.8 x 7.4 mm

定位孔大小：直径为 4.8 mm

接口 ：间距为2.54 mm 3pin防反接口

1.3 模块原理图

.. figure:: ./media/161301.jpg
   :alt: img

   img

这个模块的原理图可能较前面的模块稍复杂，我们一部分一部分来看。先看电压转换部分，作用是将5V输入电压转换为3.3V输入电压。因为我们模块上用到的热释电红外传感器的工作电压是3.3V，不能直接用5V电压供电使用。有了这个电压转换部分，3.3V输入电压和5V输入电压都适用于此热释电红外传感器。

当红外热释传感器没有检测到红外信号时，红外热释传感器的1脚输出低电平，此时模块上的LED两端有电压差，有电流流过，LED被点亮，MOS管Q1导通（Q1是NPN
MOS管，型号为2N7002。由于红外热释传感器的1脚输出低电平，所以Q1的源极Vs=0，而Q1的栅极Vg=3.3V，于是Q1的栅极G和Q1的源极S之间的电压
Vgs = 3.3V 大于Q1的阈值电压 2.5V，Q1导通。），信号端S检测到低电平。

当红外热释传感器检测到红外信号时，红外热释传感器的1脚输出高电平，此时模块上的LED熄灭，MOS管Q1不导通，则信号端S检测到被10K上拉电阻R5拉高的高电平。

1.4 实验组件

+----------------+--------------------+-------------------+--------------+
| |img|          | |image208|         | |image209|        | |image210|   |
+================+====================+===================+==============+
| ESP32 Plus主板 | Keyes              | XH2.54-3P         | USB线 x1     |
| x1             | 人体红外热释传感器 | 转杜邦线母单线 x1 |              |
|                | x1                 |                   |              |
+----------------+--------------------+-------------------+--------------+

1.5 模块接线图

.. figure:: ./media/161501.png
   :alt: img

   img

1.6 代码说明

.. figure:: ./media/img-20241114093010.png
   :alt: Img

   Img

从指定的数字管脚读取人体红外传感器的数字信号(高/低电平)。

.. figure:: ./media/img-20241113171600.png
   :alt: Img

   Img

如果（ ）里的表达式为真，则运行 执行 块内的代码。如果（ ）里表达式为假
，则运行 否则 块内的代码。

1.7 实验代码

你可以打开我们提供的代码，也可以自己编写代码，其编写代码的过程可以参考
“\ 第七课 按键传感器检测实验\ ”，这里就不重复讲解：

.. figure:: ./media/img-20241114093102.png
   :alt: Img

   Img

1.8 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，打开串口监视器，设置波特率为\ **9600**\ 。

当传感器检测到附近有人在运动时，value值为1，模块上LED熄灭，串口监视器显示“\ **1
Somebody is in this
area!**\ ”；没有检测到附近有人在运动时，value值为0，模块上LED点亮，串口监视器显示“\ **0
No one!**\ ”。

.. figure:: ./media/img-20241114093216.png
   :alt: Img

   Img

项目十七 有源蜂鸣器模块播放声音
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

在这个套件中，有一个有源蜂鸣器模块，还有一个功放模块（原理相当于无源蜂鸣器）。在这个实验中，我们来学习尝试控制有源蜂鸣器发出声音。有源蜂鸣器元件内部自带震荡电路，使用时，我们只需要给蜂鸣器元件足够的电压，蜂鸣器就会自动响起。

1.2 模块参数

工作电压 : DC 3.3 ~ 5V

工作温度 ：-10°C ~ +50°C

输入信号 : 数字信号

尺寸 ：32 x 23.8 x 12.3 mm

定位孔大小：直径为 4.8 mm

接口 ：间距为2.54 mm 3pin防反接口

1.3 模块原理图

.. figure:: ./media/171301.jpg
   :alt: img

   img

从原理图我们可以得知，蜂鸣器的1脚通过串联一个电阻R2连接到电压正极；蜂鸣器的2脚连接到NPN三极管Q1的C极，集电极；Q1的B极，也就是基极通过串联一个电阻R1连接到S信号端；发射集接到GND。

当三极管Q1导通时，蜂鸣器的2脚连通GND，有源蜂鸣器便会工作。那么如何让三极管Q1导通呢？\ **NPN三极管的导通条件是基极（B）电压比发射极（E）电压高
0.3V
以上，**\ 只需要基极（B）被上拉至高电平即可。虽然三极管Q1的基极（B）有一个下拉电阻R3导致其不导通，但是R3电阻的阻值大，使其为弱下拉电阻。三极管Q1的基极（B）还连接了一个阻值小的强上拉电阻R1，只要我们用单片机IO口给S信号端输入高电平，强上拉电阻R1会将三极管Q1的基极（B）强上拉为高电平，三极管Q1就会导通，有源蜂鸣器就会工作。

1.4 实验组件

+----------------+----------------+-------------------+--------------+
| |img|          | |image211|     | |image212|        | |image213|   |
+================+================+===================+==============+
| ESP32 Plus主板 | Keyes          | XH2.54-3P         | USB线 x1     |
| x1             | 有源蜂鸣器模块 | 转杜邦线母单线 x1 |              |
|                | x1             |                   |              |
+----------------+----------------+-------------------+--------------+

1.5 模块接线图

.. figure:: ./media/171501.png
   :alt: img

   img

1.6 代码说明

.. figure:: ./media/img-20241114093516.png
   :alt: Img

   Img

向指定管脚设置“高”或“低”，选择“高”代表给该管脚设置高电平，有电压，有电流，则有源蜂鸣器鸣叫；选择“低”代表给管脚设置低电平，没电压，没有电流，则有源蜂鸣器不响。

1.7 实验代码

你可以打开我们提供的代码，也可以自己编写代码，其编写代码的过程可以参考
“\ 第二课 LED\ ”，这里就不重复讲解：

.. figure:: ./media/img-20241114093816.png
   :alt: Img

   Img

1.8 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，模块上有源蜂鸣器响起0.5秒，停0.5秒，循环交替。

项目十八 8002b功放 喇叭模块
~~~~~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

在这个套件中，有一个Keyes 8002b功放
喇叭模块，这个模块主要由一个可调电位器、一个喇叭和一个音频放大芯片组成。上一课我们学习了有源蜂鸣器模块的使用方法，这一课我们来学习套件中的8002b功放
喇叭模块的使用方法。这个模块主要功能是：可以对输出的小音频信号进行放大，大概放大倍数为8.5倍，并且可以通过自带的小功率喇叭播放出来，也可以用来播放音乐，作为一些音乐播放设备的外接扩音设备。

1.2 模块参数

工作电压 : DC 5V

工作电流 : ≥100 mA

最大功率 : 2.5 W

喇叭功率 : 0.15 W

喇叭声音 : 80 db

放大芯片 : SC8002B

工作温度 ：-10°C ~ +50°C

尺寸 ：47.6 x 23.8 x 10 mm

定位孔大小：直径为 4.8 mm

接口 ：间距为2.54 mm 3pin防反接口

1.3 模块原理图

.. figure:: ./media/181301.jpg
   :alt: img

   img

其实这个喇叭就类似于于一个无源蜂鸣器，上一课我们介绍过，有源蜂鸣器自带振荡源，只要我们给它足够的电压就能响起来，而无源蜂鸣器元件内部不带震荡电路，需要在元件正极（也就是1脚）输入不同频率的方波，负极（也就是2脚）接地，从而控制蜂鸣器响起不同频率的声音。

1.4 实验组件

+----------------+------------------+-------------------+--------------+
| |img|          | |image214|       | |image215|        | |image216|   |
+================+==================+===================+==============+
| ESP32 Plus主板 | Keyes 8002b功放  | XH2.54-3P         | USB线 x1     |
| x1             | 喇叭模块 x1      | 转杜邦线母单线 x1 |              |
+----------------+------------------+-------------------+--------------+

1.5 模块接线图

.. figure:: ./media/181501.png
   :alt: img

   img

1.6 代码说明

.. figure:: ./media/img-20241030112339.png
   :alt: Img

   Img

向指定管脚关闭功放喇叭模块，使喇叭不发声。

.. figure:: ./media/img-20241030112545.png
   :alt: Img

   Img

向指定管脚设置功放喇叭模块发声的音调和节拍。

.. figure:: ./media/img-20241030112733.png
   :alt: Img

   Img

向指定管脚设置功放喇叭模块播放特定音乐。

.. figure:: ./media/img-20241118102147.png
   :alt: Img

   Img

1.7 实验代码

你可以打开我们提供的代码，也可以自己编写代码，其如下：

1. 从 “\ |Img|\ ” 拖出 “\ |image217|\ ”。

2. 从 “\ |image218|\ ” 拖出 “ |image219| ” 放入 “\ |image220|\ ”，管脚为
   4 。

3. 先从 “\ |image221|\ ” 拖出 “ |image222| ” ，管脚为 4 ，选择
   “Christmas” ；再拖出 “ |image223| ” ，管脚为 4 。

4. 从 “\ |Img|\ ” 拖出 “\ |image224|\ ”，设置延时为2000毫秒。

5. 复制代码块 “ |image225| ” 1 次，选择 “Birthday” 。

完整代码：

.. figure:: ./media/img-20241118102103.png
   :alt: Img

   Img

1.8 实验结果

代码上传成功后，拔下USB线断电，按照接线图正确接好模块后再用USB线连接到计算机上电，功放喇叭模块循环播放音乐。如果觉得喇叭声音太大或太小，可以使用十字螺丝刀调节模块上的电位器以调整音量大小。

项目十九 130电机模块
~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

在这个套件中，有一个Keyes
130电机驱动模块。HR1124S是应用于直流电机方案的单通道H桥驱动器芯片。HR1124S的H桥驱动部分采用低导通电阻的PMOS和NMOS功率管。低导通电阻保证芯片低的功率损耗，使得芯片安全工作更长时间。此外HR1124S拥有低待机电流，低静态工作电流，这些性能使HR1124S易用于玩具方案。

实验中，我们可通过输出到两个信号端IN+和IN-的电压方向来控制电机的转动方向，让电机转动起来。

1.2 模块参数

工作电压 : DC 3.3 ~ 5V

电流 : 50 mA

最大功率 : 0.3 W

工作温度 ：-10°C ~ +50°C

输出信号 : 数字信号

尺寸 ：32 x 23.8 x 24.5 mm

定位孔大小：直径为 4.8 mm

接口 ：间距为2.54 mm 4pin防反接口

1.3 模块原理图

.. figure:: ./media/191301.jpg
   :alt: img

   img

HR1124S芯片的作用是助于驱动电机。而电机所需电流较大，无法用三极管驱动更无法直接用IO口驱动。让电机转动起来的方法很简单，给电机两端添加电压即可。不同电压方向电机转向也不相同，额度电压内，电压越大，电机转动得越快；反之电压越低，电机转动得越慢，甚至无法转动。所以我们可以用PWM口来控制电机的转速，这一课我们先学习用高低电平来控制电机。

1.4 实验组件

+---------------------+---------------------+-------------------------+
| |img|               | |image226|          | |image227|              |
+=====================+=====================+=========================+
| ESP32 Plus主板 x1   | Keyes 130电机模块   | XH2.54-4P               |
|                     | x1                  | 转杜邦线母单线 x1       |
+---------------------+---------------------+-------------------------+
| |image228|          | |image229|          | |image230|              |
+---------------------+---------------------+-------------------------+
| USB线 x1            | 6节5号电池盒 x1     | 5号电池\ **(自备)** x6  |
+---------------------+---------------------+-------------------------+

**注意：电机与风扇叶是分开装的，需要组合到一起。**

1.5 模块接线图

**注意：请勿用手握住风扇叶，请将风扇叶对着空旷的地方，以免受伤。**

.. figure:: ./media/191501.png
   :alt: img

   img

1.6 代码说明

.. figure:: ./media/img-20241030152746.png
   :alt: Img

   Img

.. figure:: ./media/img-20241030152845.png
   :alt: Img

   Img

这 2 个指令方块都可以用来设置直流电机(小风扇)不转。

.. figure:: ./media/img-20241030152910.png
   :alt: Img

   Img

设置直流电机(小风扇)逆时针转动。

.. figure:: ./media/img-20241030152947.png
   :alt: Img

   Img

设置直流电机(小风扇)顺时针转动。

**注意：**
将管脚设置为GPIO5、GPIO13，当GPIO5输出为低电平即INA输入低电平，GPIO13输出为高电平即INB输入高电平时（输入与输出是相对的，这个实验中对于我们单片机的引脚来说，单片机输出高低电平，自然模块就为输入了，即从单片机输出到模块；例如按键模块则相反，是模块输出到单片机），电机顺时针旋转；当GPIO5输出为高电平，GPIO13输出为低电平时，电机逆时针旋转；当两个管脚都设置为低电平时，电机停止转动。

1.7 实验代码

你可以打开我们提供的代码，也可以自己编写代码，其如下：

1. 从 “\ |Img|\ ” 拖出 “\ |image231|\ ”。

2. 从 “\ |image232|\ ” 拖出 “\ |image233|\ ” 放入 “\ |image234|\ ” ，INA
   管脚为 5 ，INB管脚为 13 ，将 “高” 都改成 “低” 。

.. figure:: ./media/img-20241114095846.png
   :alt: Img

   Img

3. 先从 “\ |image235|\ ” 拖出 “\ |image236|\ ” ，INA 管脚为 5
   ，INB管脚为 13 ，将 INB 后面的“高” 改成 “低”，再从 “\ |Img|\ ” 拖出
   “\ |image237|\ ”，设置延时为2000毫秒。

.. figure:: ./media/img-20241114095920.png
   :alt: Img

   Img

4. 复制代码块 “ |image238| ” 1 次，将 INA 后面的“高” 改成
   “低”，延时2000毫秒改成1000毫秒。

.. figure:: ./media/img-20241114100040.png
   :alt: Img

   Img

5 复制代码块 “ |image239| ” 1 次，将 INA “高” INB “低” 改成 INA “低” INB
“高” ，其他的不变。

.. figure:: ./media/img-20241114100250.png
   :alt: Img

   Img

完整代码：

.. figure:: ./media/img-20241114095744.png
   :alt: Img

   Img

1.8 实验结果

**注意：请勿用手握住风扇叶，请将风扇叶对着空旷的地方，以免受伤。**

按照接线图正确接好模块后再上传代码，上传成功后，外接电源给主控板供电，上电后风扇逆时针转动2秒；停止1秒；顺时针转动2秒；停止1秒；循环交替。

项目二十 读取旋转电位器传感器的值
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

在这个套件中，有一个Keyes
旋转电位器传感器，它一个模拟传感器。前面我们学习过的传感器，都是数字传感器。例如我们前面学习的按键模块，当按键没有按下去时，我们读取到高电平（3.3V），当按键按下去时，我们读取到低电平（0V），而在0~3.3V中间的电压值，我们数字IO口无法读取到，当然按键模块也只能输出高低电平。而模拟传感器就可以通过我们ESP32主板上的16个ADC模拟口读取中间的电压值。

1.2 模块参数

工作电压 : DC 3.3 ~ 5V

工作电流 : 20 mA

工作功率 : 0.1 W

工作温度 ：-10°C ~ +50°C

输出信号 : 模拟信号

尺寸 ：32 x 23.8 x 28.4 mm

定位孔大小：直径为 4.8 mm

接口 ：间距为2.54 mm 3pin防反接口

1.3 模块原理图

.. figure:: ./media/201301.png
   :alt: img

   img

旋转电位器原理是靠电刷在电阻体上滑动，在电路中获取与输入电压形成一定关系地输出电压。Keyes
旋转电位器传感器选用了一个10K可调电阻。通过旋转电位器，我们可以改变电阻大小，信号端S检测到电压变化（0
~
3.3V），而这个电压变化是一个连续变化的模拟量，也就是在0~3.3V内可以取任意值，我们必须先对这个模拟量进行ADC采集，来测量连续的这些模拟量。A/D
是模拟量到数字量的转换，依靠的是模数转换器(Analog to Digital
Converter)，简称ADC。我们的ESP32主板已经集成了ADC采集，可以直接使用。

我们的ESP32主板ADC位数是12位。一个 n 位的 ADC 表示这个 ADC 共有 2 的 n
次方个刻度，12位的 ADC，输出的是从0～4095一共4096个数字量，也就是 2 的
12 次方个数据刻度，每个刻度就是3.3V/4095≈0.00081V，这也叫分辨率。

ADC：ADC是一种电子集成电路，用于将模拟信号(如电压)转换为由1和0表示的数字信号。我们在ESP32上的ADC的范围是12位（ADC的位数表示将模拟量转换成数字量后所用的二进制位数），其可存储数字量范围为：0
~ 2^12即0 ~
4096。假设它的参考电压是3.3V，也就是说把参考电压分成4095份，最小分辨率为3.3V/4095，模拟值的范围对应于ADC值。因此，ADC拥有的比特越多，模拟的分区就越密集，最终转换的精度也就越高。

.. figure:: ./media/201302.png
   :alt: img

   img

纵坐标数字0 : 0V ~ 3.3/4095V 范围内的模拟量（横坐标）;

纵坐标数字1 : 3.3/ 4095V ~ 2*3.3 /4095V 范围内的模拟量（横坐标）;

……

模拟将被相应地划分。换算公式如下：

.. figure:: ./media/201303.png
   :alt: img

   img

DAC：这一过程的可逆需要DAC，数字到模拟转换器。数字I/O端口可以输出高电平和低电平(0或1)，但不能输出中间电压值，这就是DAC有用的地方。ESP32有两个8位精度的DAC输出引脚GPIO25和GPIO26，可以将VCC(这里是3.3V)分成2\ *8=256个部分。例如，当数字量为1时，输出电压值为3.3/256*
1V，当数字量为128时，输出电压值为3.3/256 \*128=1.65V,
DAC的精度越高，输出电压值的精度就越高。

换算公式如下：

.. figure:: ./media/201304.png
   :alt: img

   img

ADC on ESP32：

ESP32有16个引脚，可以用来测量模拟信号。GPIO引脚序列号和模拟引脚定义如下表所示：

======================= =====================
**ADC number in ESP32** **ESP32 GPIO number**
======================= =====================
ADC0                    GPIO 36
ADC3                    GPIO 39
ADC4                    GPIO 32
ADC5                    GPIO33
ADC6                    GPIO34
ADC7                    GPIO 35
ADC10                   GPIO 4
ADC11                   GPIO0
ADC12                   GPIO2
ADC13                   GPIO15
ADC14                   GPIO13
ADC15                   GPIO 12
ADC16                   GPIO 14
ADC17                   GPIO27
ADC18                   GPIO25
ADC19                   GPIO26
======================= =====================

DAC on ESP32：

ESP32有两个8位数字模拟转换器，分别连接到GPIO25和GPIO26引脚，它是不可变的。如下表所示：

======================= ===============
**Simulate pin number** **GPIO number**
======================= ===============
DAC1                    GPIO25
DAC2                    GPIO26
======================= ===============

1.4 实验组件

+----------------+------------------+-------------------+--------------+
| |img|          | |image240|       | |image241|        | |image242|   |
+================+==================+===================+==============+
| ESP32 Plus主板 | Keyes            | XH2.54-3P         | USB线 x1     |
| x1             | 旋转电位器传感器 | 转杜邦线母单线 x1 |              |
|                | x1               |                   |              |
+----------------+------------------+-------------------+--------------+

1.5 模块接线图

.. figure:: ./media/201501.png
   :alt: img

   img

1.6 代码说明

.. figure:: ./media/img-20241031092741.png
   :alt: Img

   Img

从指定的模拟管脚读取旋转电位器的模拟信号，模拟信号的范围为：0 ~ 4095
。ESP32主板包含一个多通道、12位模数转换器。 这意味着它会将
从0V和工作电压（5V 或
3.3V，本实验中是3.3V）之间的输入电压映射为0和4095之间的整数值。这会产生以下分辨率：3.3V/4096单位即每单位
0.0008V。

.. figure:: ./media/img-20241114102002.png
   :alt: Img

   Img

在串口监视器中自动换行打印旋转电位器的模拟信号。

1.7 实验代码

你可以打开我们提供的代码，也可以自己编写代码，其如下：

1. 从 “\ |Img|\ ” 拖出 “\ |image243|\ ”。

2. 从 “\ |image244|\ ” 拖出 “\ |image245|\ ” 放入
   “\ |image246|\ ”，设置波特率为 9600 。

3. 先从 “\ |image247|\ ” 拖出 “\ |image248|\ ” ；接着从 “ |image249| ”
   拖出 “ |image250| ”，管脚为 34 。

4. 从 “\ |Img|\ ” 拖出 “\ |image251|\ ”，设置延时为100毫秒。

完整代码：

.. figure:: ./media/img-20241114101828.png
   :alt: Img

   Img

1.8 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，打开串口监视器，设置波特率为
**9600**\ 。

转动电位器手柄时，串口监视器打印出此时电位器的模拟值。

.. figure:: ./media/img-20241114103141.png
   :alt: Img

   Img

项目二十一 水滴水蒸气传感器
~~~~~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

在这个套件中，有一个Keyes
水滴传感器，它是一个模拟（数字）输入模块，也叫雨水、雨量传感器。可用于各种天气状况的监测，检测是否下雨及雨量的大小，转成模拟信号（AO）输出，并广泛应用于Arduino
机器人套件，雨滴，下雨传感器，可用于各种天气状况的监测，也可用于汽车自动刮水系统、智能灯光系统和智能天窗系统等。

1.2 模块参数

工作电压 : DC 5V

电流 : 30 mA

最大功率 : 0.15 W

工作温度 ：-10°C ~ +50°C

控制信号 : 模拟信号

尺寸 ：32 x 23.8 x 9.3 mm

定位孔大小：直径为 4.8 mm

接口 ：间距为2.54 mm 3pin防反接口

1.3 模块原理图

.. figure:: ./media/211301.jpg
   :alt: img

   img

Keyes
水滴传感器通过电路板上裸露的印刷平行线检测水量的大小。水量越多，就会有更多的导线被联通，随着导电的接触面积增大，雨滴感应区
2 脚输出的电压就会逐步上升。信号端 S
检测到的模拟值就越大。除了可以检测水量的大小，它还可以检测空气中的水蒸气。

1.4 实验组件

+----------------+----------------+-------------------+--------------+
| |img|          | |image252|     | |image253|        | |image254|   |
+================+================+===================+==============+
| ESP32 Plus主板 | Keyes          | XH2.54-3P         | USB线 x1     |
| x1             | 水滴传感器 x1  | 转杜邦线母单线 x1 |              |
+----------------+----------------+-------------------+--------------+

1.5 模块接线图

.. figure:: ./media/211501.png
   :alt: img

   img

1.6 代码说明

.. figure:: ./media/img-20241114103319.png
   :alt: Img

   Img

从指定的模拟管脚读取水滴传感器的模拟信号，模拟信号的范围为：0 ~ 4095
。ESP32主板包含一个多通道、12位模数转换器。 这意味着它会将
从0V和工作电压（5V 或
3.3V，本实验中是3.3V）之间的输入电压映射为0和4095之间的整数值。这会产生以下分辨率：3.3V/4096单位即每单位
0.0008V。

.. figure:: ./media/img-20241114103405.png
   :alt: Img

   Img

在串口监视器中自动换行打印水滴传感器的模拟信号。

1.7 实验代码

你可以打开我们提供的代码，也可以自己编写代码，其编写代码的过程可以参考
“\ 第二十课 读取旋转电位器传感器的值\ ”，这里就不重复讲解：

.. figure:: ./media/img-20241114103508.png
   :alt: Img

   Img

1.8 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，打开串口监视器，设置波特率为
**9600**\ 。

.. figure:: ./media/211701.png
   :alt: img

   img

在水滴传感器的感应区滴几滴水（\ **小心用水，注意不要滴到感应区以外的其他任何地方，包括ESP32主板**\ ），串口监视器打印出此时水滴传感器的模拟值。水量变化，ADC值、DAC值和电压值也会发生变化。水量越多，输出的模拟值越大。

.. figure:: ./media/img-20241114103141.png
   :alt: Img

   Img

项目二十二 声音传感器检测声量
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

在这个套件中，有一个Keyes
声音传感器。实验中，我们利用这个传感器测试当前环境中的声音输出对应的模拟值。声音越大，模拟值越大；并在串口监视器上显示测试结果。

1.2 模块参数

工作电压 : DC 3.3 ~ 5V

工作电流 : 100 mA

最大功率 : 0.5 W

工作温度 ：-10°C ~ +50°C

输出信号 : 模拟信号

尺寸 ：32 x 23.8 x 10.3 mm

定位孔大小：直径为 4.8 mm

接口 ：间距为2.54 mm 3pin防反接口

1.3 模块原理图

.. figure:: ./media/img-20241203092507.png
   :alt: Img

   Img

Keyes
声音传感器主要由一个高感度麦克风元件和LM358音频功率放大器芯片组成。高感度麦克风元件用于检测外界的声音。利用LM358音频功率放大器芯片设计对高感度麦克风检测到的声音进行放大的电路，最大倍数为200倍。使用时我们可以通过旋转传感器上电位器，调节声音的放大倍数。顺时针调节电位器到尽头，放大倍数最大。

1.4 实验组件

+----------------+----------------+-------------------+--------------+
| |img|          | |image255|     | |image256|        | |image257|   |
+================+================+===================+==============+
| ESP32 Plus主板 | Keyes          | XH2.54-3P         | USB线 x1     |
| x1             | 声音传感器 x1  | 转杜邦线母单线 x1 |              |
+----------------+----------------+-------------------+--------------+

1.5 模块接线图

.. figure:: ./media/221501.png
   :alt: img

   img

1.6 代码说明

.. figure:: ./media/img-20241114104056.png
   :alt: Img

   Img

从指定的模拟管脚读取声音传感器的模拟信号，模拟信号的范围为：0 ~ 4095
。ESP32主板包含一个多通道、12位模数转换器。 这意味着它会将
从0V和工作电压（5V 或
3.3V，本实验中是3.3V）之间的输入电压映射为0和4095之间的整数值。这会产生以下分辨率：3.3V/4096单位即每单位
0.0008V。

.. figure:: ./media/img-20241114104151.png
   :alt: Img

   Img

在串口监视器中自动换行打印声音传感器的模拟信号。

1.7 实验代码

你可以打开我们提供的代码，也可以自己编写代码，其编写代码的过程可以参考
“\ 第二十课 读取旋转电位器传感器的值\ ”，这里就不重复讲解：

.. figure:: ./media/img-20241114104130.png
   :alt: Img

   Img

1.8 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，打开串口监视器，设置波特率为
**9600**\ 。

串口监视器打印出声音传感器接收到的声音对应的模拟值。对准MIC头大声说话，可以看到接收到的声音对应的模拟值变大。

.. figure:: ./media/img-20241114104523.png
   :alt: Img

   Img

--------------

项目二十三 光敏电阻传感器
~~~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

在这个套件中，有一个Keyes
光敏电阻传感器，这是一个常用的光敏电阻传感器，它主要由一个光敏电阻元件组成。光敏电阻元件的阻值随着光照强度的变化而变化，此传感器就是利用光敏电阻元件这一特性，设计电路将阻值变化转换为电压变化。光敏电阻传感器可以模拟人对环境光线的强度的判断，方便做出与人友好互动的应用。

1.2 模块参数

工作电压 : DC 3.3 ~ 5V

电流 : 20 mA

最大功率 : 0.1 W

工作温度 ：-10°C ~ +50°C

输出信号 : 模拟信号

尺寸 ：32 x 23.8 x 7.4 mm

定位孔大小：直径为 4.8 mm

接口 ：间距为2.54 mm 3pin防反接口

1.3 模块原理图

.. figure:: ./media/231301.png
   :alt: img

   img

当没有光照射时，电阻大小为0.2
MΩ，光敏电阻的信号端（2脚）检测的电压接近0。随着光照强度增大，光线传感器的电阻值越来越小，所以信号端能检测到的电压越来越大。

1.4 实验组件

+----------------+----------------+-------------------+--------------+
| |img|          | |image258|     | |image259|        | |image260|   |
+================+================+===================+==============+
| ESP32 Plus主板 | Keyes          | XH2.54-3P         | USB线 x1     |
| x1             | 光敏电阻传感器 | 转杜邦线母单线 x1 |              |
|                | x1             |                   |              |
+----------------+----------------+-------------------+--------------+

1.5 模块接线图

.. figure:: ./media/231501.png
   :alt: img

   img

1.6 代码说明

.. figure:: ./media/img-20241114104932.png
   :alt: Img

   Img

从指定的模拟管脚读取光敏电阻传感器的模拟信号，模拟信号的范围为：0 ~ 4095
。ESP32主板包含一个多通道、12位模数转换器。 这意味着它会将
从0V和工作电压（5V 或
3.3V，本实验中是3.3V）之间的输入电压映射为0和4095之间的整数值。这会产生以下分辨率：3.3V/4096单位即每单位
0.0008V。

.. figure:: ./media/img-20241114104855.png
   :alt: Img

   Img

在串口监视器中自动换行打印光敏电阻传感器的模拟信号。

1.7 实验代码

你可以打开我们提供的代码，也可以自己编写代码，其编写代码的过程可以参考
“\ 第二十课 读取旋转电位器传感器的值\ ”，这里就不重复讲解：

.. figure:: ./media/img-20241114104746.png
   :alt: Img

   Img

1.8 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，打开串口监视器，设置波特率为
**9600**\ 。

串口监视器打印出光敏传感器的模拟值。光照越强，可以看到模拟值越大。

.. figure:: ./media/img-20241114103141.png
   :alt: Img

   Img

项目二十四 NTC-MF52AT模拟温度传感器
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

在这个套件中，有一个Keyes
NTC-MF52AT模拟温度传感器，它的原理与光敏电阻传感器类似，只是感应的器件不同。将传感器信号端接到ESP32主板模拟口，可以读出对应的模拟值和温度值。我们可以利用模拟值，输出电压值，通过特定公式，计算出当前环境的温度。

1.2 模块参数

工作电压 : DC 3.3 ~ 5V

电流 : 20 mA

最大功率 : 0.1 W

工作温度 ：-10°C ~ +50°C

输出信号 : 模拟信号

尺寸 ：32 x 23.8 x 7.4 mm

定位孔大小：直径为 4.8 mm

接口 ：间距为2.54 mm 3pin防反接口

1.3 模块原理图

.. figure:: ./media/241301.png
   :alt: img

   img

Keyes
NTC-MF52AT模拟温度传感器主要由NTC-MF52AT热敏电阻元件组成。NTC-MF52AT热敏电阻元件能够感知周边环境温度的变化，随着温度的升高，热敏电阻的阻值降低，4.7K电阻两端的电压上升，从而引起信号端S的电压变化。

1.4 实验组件

+----------------+--------------------------+-------------------+--------------+
| |img|          | |image261|               | |image262|        | |image263|   |
+================+==========================+===================+==============+
| ESP32 Plus主板 | NTC-MF52AT模拟温度传感器 | XH2.54-3P         | USB线 x1     |
| x1             | x1                       | 转杜邦线母单线 x1 |              |
+----------------+--------------------------+-------------------+--------------+

1.5 模块接线图

.. figure:: ./media/241501.png
   :alt: img

   img

1.6 代码说明

.. figure:: ./media/img-20241029135544.png
   :alt: Img

   Img

读取模拟温度传感器(热敏电阻)的温度值。

.. figure:: ./media/img-20241114110105.png
   :alt: Img

   Img

在串口监视器中自动换行打印模拟温度传感器(热敏电阻)的温度值。

1.7 实验代码

你可以打开我们提供的代码，也可以自己编写代码，其如下：

1. 从 “\ |Img|\ ” 拖出 “\ |image264|\ ”。

2. 从 “\ |image265|\ ” 拖出 “\ |image266|\ ” 放入
   “\ |image267|\ ”，设置波特率为 9600 。

3. 先从 “\ |image268|\ ” 拖出 “\ |image269| ” ；接着从 “\ |image270|\ ”
   拖出 “\ |image271|\ ” ；将 “自动换行” 改成 “不换行” ，“hello” 改成
   “Temperature:” 。

4. 先从 “\ |image272|\ ” 拖出 “\ |image273| ” ；接着从 “\ |image274|\ ”
   拖出 “\ |image275|\ ” ，管脚为 34 ；将 “自动换行” 改成 “不换行” 。

5. 复制代码块 “ |image276|\ ” 1次，将 “不换行” 改成 “自动换行”
   ，“Temperature:” 改成 “ ℃ ” ；再从 “\ |Img|\ ” 拖出
   “\ |image277|\ ”，设置延时为100毫秒。

完整代码：

.. figure:: ./media/img-20241114105523.png
   :alt: Img

   Img

1.8 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，打开串口监视器，设置波特率为
**9600**\ 。

串口监视器打印出热敏传感器当前所处环境下的温度值。

.. figure:: ./media/img-20241114105753.png
   :alt: Img

   Img

--------------

项目二十五 薄膜压力传感器
~~~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

在这个套件中，有一个Keyes
薄膜压力传感器，薄膜压力传感器是基于新型纳米压敏材料辅以舒适杨式模量的超薄薄膜衬底一次性贴片而成，兼具防水和压敏双重功能。

通过采集模块上S端模拟信号，判断压力大小。模拟值越小，压力越大；并在串口监视器上显示测试结果。

1.2 模块参数

工作电压 : DC 3.3 ~ 5V

电流 : 20 mA

最大功率 : 0.1W

量程 : 0-5KG

响应点 : 150g

重复性 : ＜±9.7%（60%负载）

一致性 : ±10%

耐久性 : ＞100万次

初始电阻 : 大于10MΩ(无负载)

响应时间 : ＜1ms

恢复时间 : ＜15ms

工作温度 ：-10°C ~ +50°C

输出信号 : 模拟信号

尺寸 ：32 x 23.8 x 7.4 mm

定位孔大小：直径为 4.8 mm

接口 ：间距为2.54 mm 3pin防反接口

1.3 模块原理图

.. figure:: ./media/251301.png
   :alt: img

   img

当传感器感知到外界压力时，传感器的电阻值发生变化。Keyes
薄膜压力传感器使用LM321运算放大器芯片将传感器感知到的压力变化的压力信号转换成相应变化强度的电信号输出。这样就可以通过检测电压信号变化得知压力变化情况。

1.4 实验组件

+----------------+----------------+-------------------+--------------+
| |img|          | |image278|     | |image279|        | |image280|   |
+================+================+===================+==============+
| ESP32 Plus主板 | Keyes          | XH2.54-3P         | USB线 x1     |
| x1             | 薄膜压力传感器 | 转杜邦线母单线 x1 |              |
|                | x1             |                   |              |
+----------------+----------------+-------------------+--------------+

1.5 模块接线图

.. figure:: ./media/251501.png
   :alt: img

   img

1.6 代码说明

.. figure:: ./media/img-20241114111054.png
   :alt: Img

   Img

从指定的模拟管脚读取薄膜压力传感器的模拟信号，模拟信号的范围为：0 ~ 4095
。

.. figure:: ./media/img-20241114111115.png
   :alt: Img

   Img

在串口监视器中自动换行打印薄膜压力传感器的模拟信号。

1.7 实验代码

你可以打开我们提供的代码，也可以自己编写代码，其编写代码的过程可以参考
“\ 第二十课 读取旋转电位器传感器的值\ ”，这里就不重复讲解：

.. figure:: ./media/img-20241114111154.png
   :alt: Img

   Img

1.8 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，打开串口监视器，设置波特率为
**9600**\ 。为了使实验数据最精准，请将薄膜压力传感器尽量平放。

串口监视器打印出薄膜压力传感器的模拟值。用手按压薄膜时，随着力量的增大，可以看到模拟值逐渐变小。

.. figure:: ./media/img-20241114111515.png
   :alt: Img

   Img

项目二十六 火焰传感器
~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

在这个套件中，有一个Keyes
火焰传感器，它对火焰光谱特别灵敏，且灵敏度可调。性能稳定，是救火机器人的必备部件。火焰传感器上有一个远红外火焰探头，起着非常重要的作用，它可以用作机器人的眼睛来寻找火源或足球。利用它可以制作灭火机器人、足球机器人等。

该传感器有两个信号输出端，分别可输出数字信号与模拟信号。实验中，我们分别读取模块传感器数字信号与模拟信号，将测试结果在串口监视器上显示。

1.2 模块参数

工作电压 : DC 3.3 ~ 5V

电流 : 100 mA

最大功率 : 0.5 W

输出信号 ：模拟信号和数字信号

工作温度 ：-10°C ~ +50°C

尺寸 ：32 x 23.8 x 9.2 mm

定位孔大小：直径为 4.8 mm

接口 ：间距为2.54 mm 4pin防反接口

1.3 模块原理图

红外火焰传感器能够探测到波长在700纳米～1000纳米范围内的红外光，探测角度为60，其中红外光波长在880纳米附近时，其灵敏度达到最大。从电路原理图我们可以看到，上电后红色LED2先点亮，红色LED1处于熄灭状态，检测到火焰时，数字信号端D0输出低电平，红色LED1将点亮。红外火焰探头将外界红外光的强弱变化转化为电流的变化，通过A/D转换器反映为0～255范围内数值的变化。外界红外光越强，数值越小；红外光越弱，数值越大。

.. figure:: ./media/261301.png
   :alt: img

   img

1.4 实验组件

+----------------+----------------+-------------------+--------------+
| |img|          | |image281|     | |image282|        | |image283|   |
+================+================+===================+==============+
| ESP32 Plus主板 | Keyes          | XH2.54-4P         | USB线 x1     |
| x1             | 火焰传感器 x1  | 转杜邦线母单线 x1 |              |
+----------------+----------------+-------------------+--------------+

1.5 模块接线图

.. figure:: ./media/261501.png
   :alt: img

   img

1.6 代码说明

.. figure:: ./media/img-20241114111832.png
   :alt: Img

   Img

从指定的数字管脚读取火焰传感器的数字信号(高/低电平)。

.. figure:: ./media/img-20241114112111.png
   :alt: Img

   Img

从指定的模拟管脚读取火焰传感器的模拟信号，模拟信号的范围为：0 ~ 4095 。

.. figure:: ./media/img-20241114112204.png
   :alt: Img

   Img

在串口监视器中打印火焰传感器的数字信号和模拟信号。

1.7 实验代码

你可以打开我们提供的代码，也可以自己编写代码，其编写代码的过程可以参考
“\ 第二十课 读取旋转电位器传感器的值\ ”，这里就不重复讲解：

.. figure:: ./media/img-20241114112858.png
   :alt: Img

   Img

1.7 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，此时火焰传感器上的红色LED2点亮。旋转火焰传感器上的电位器，微调使传感器上红色LED1灯介于亮与不亮之间的\ **不亮**\ 状态。

.. figure:: ./media/261701.png
   :alt: img

   img

打开串口监视器，设置波特率为
**9600**\ 。串口监视器打印出火焰传感器的digital值，ADC值（即：模拟值）。当传感器检测到火焰时，红色LED1点亮，在串口监视器中可以看到数字值由1变为0，ADC值（即：模拟值）变小。

.. figure:: ./media/img-20241114112630.png
   :alt: Img

   Img

项目二十七 MQ-2 烟雾传感器
~~~~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

在这个套件中，有一个Keyes MQ-2模拟气体传感器，它主要用到了MQ-2
可燃气体、烟雾传感器元件。该元件所使用的气敏材料是在清新空气中电导率较低的二氧化锡(SnO2)。当传感器所处环境中存在可燃气体时，传感器的电导率随空气中可燃气体浓度的增加而增大。该传感器对液化气、丙烷、氢气的灵敏度高，对天然气和其它可燃蒸汽的检测也很理想。它可检测多种可燃性气体，是一款适合多种应用的低成本传感器。

实验中，我们读取传感器 A 端模拟值，和 D
端数字值，判断空气中气体的含量，以及它们是否超标。

1.2 模块参数

工作电压 : DC 3.3 ~ 5V

电流 : 100 mA

最大功率 : 0.5 W

输出信号 ：模拟信号和数字信号

工作温度 ：-10°C ~ +50°C

尺寸 ：47.6 x 23.8 x 17.9 mm

定位孔大小：直径为 4.8 mm

接口 ：间距为2.54 mm 4pin防反接口

1.3 模块原理图

当Keyes
MQ-2模拟气体传感器与烟雾接触时，晶粒间界处的势垒受到烟雾的浓度变化而变化，就会引起表面导电率的变化。利用这一点就可以获得这种烟雾存在的信息，烟雾的浓度越大，导电率越大，输出电阻越低，则输出的模拟信号就越大。

使用时，A 端读取对应气体的模拟值；D
端连接一个LM393芯片（电压比较器），我们可以通过电位器调节测量气体报警临界点，在
D 端输出数字值。当测量气体含量超过临界点时，D
端输出低电平；测量气体含量没超过临界点时，D 端输出高电平。

.. figure:: ./media/271301.png
   :alt: img

   img

1.4 实验组件

+----------------+--------------------+-------------------+--------------+
| |img|          | |image284|         | |image285|        | |image286|   |
+================+====================+===================+==============+
| ESP32 Plus主板 | Keyes              | XH2.54-4P         | USB线 x1     |
| x1             | MQ-2模拟气体传感器 | 转杜邦线母单线 x1 |              |
|                | x1                 |                   |              |
+----------------+--------------------+-------------------+--------------+

1.5 模块接线图

.. figure:: media/271501.png
   :alt: 271501

   271501

1.6 代码说明

.. figure:: ./media/img-20241114113057.png
   :alt: Img

   Img

从指定的数字管脚读取烟雾(MQ-2模拟气体)传感器的数字信号(高/低电平)。

.. figure:: ./media/img-20241114113214.png
   :alt: Img

   Img

从指定的模拟管脚读取烟雾(MQ-2模拟气体)传感器的模拟信号，模拟信号的范围为：0
~ 4095 。

.. figure:: ./media/img-20241114113316.png
   :alt: Img

   Img

在串口监视器中打印烟雾(MQ-2模拟气体)传感器的数字信号和模拟信号。

1.7 实验代码

你可以打开我们提供的代码，也可以自己编写代码，其编写代码的过程可以参考
“\ 第二十课 读取旋转电位器传感器的值\ ”，这里就不重复讲解：

.. figure:: ./media/img-20241114113345.png
   :alt: Img

   Img

1.8 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，旋转MQ-2模拟气体传感器上的电位器，微调使传感器上红色LED灯介于亮与不亮之间的\ **不亮**\ 状态。

打开串口监视器，设置波特率为\ **9600**\ 。串口监视器打印出对应的数据和字符，当传感器检测到烟雾或可燃性气体时，红色LED点亮，在串口监视器中可以看到数字值由1变为0，ADC值（即：模拟值）变大。

.. figure:: ./media/img-20241114113717.png
   :alt: Img

   Img

项目二十八 MQ-3 酒精传感器
~~~~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

在这个套件中，有一个Keyes
MQ-3酒精传感器，它跟我们上一课学习的烟雾传感器原理几乎相同，只有检测器件不同。它到的是MQ-3
酒精、乙醇蒸汽传感器元件。该元件所使用的气敏材料是在清新空气中电导率较低的二氧化锡(SnO2)。当传感器所处环境中存在酒精蒸汽时，传感器的电导率随空气中酒精气体浓度的增加而增大。使用简单的电路即可将电导率的变化转换为与该气体浓度相对应的输出信号。

实验中，我们读取传感器A 端模拟值，和D
端数字值，判断空气中气体的含量，以及它们是否超标。

1.2 模块参数

工作电压 : DC 3.3 ~ 5V

电流 : 100 mA

最大功率 : 0.5 W

输出信号 ：模拟信号和数字信号

工作温度 ：-10°C ~ +50°C

尺寸 ：47.6 x 23.8 x 17.9 mm

定位孔大小：直径为 4.8 mm

接口 ：间距为2.54 mm 4pin防反接口

1.3 模块原理图

当Keyes
MQ-2模拟气体传感器与烟雾接触时，晶粒间界处的势垒受到烟雾的浓度变化而变化，就会引起表面导电率的变化。利用这一点就可以获得这种烟雾存在的信息，烟雾的浓度越大，导电率越大，输出电阻越低，则输出的模拟信号就越大。

使用时，A 端读取对应气体的模拟值；D
端连接一个LM393芯片（电压比较器），我们可以通过电位器调节测量气体报警临界点，在
D 端输出数字值。当测量气体含量超过临界点时，D
端输出低电平；测量气体含量没超过临界点时，D 端输出高电平。

.. figure:: ./media/281301.png
   :alt: img

   img

1.4 实验组件

+----------------+----------------+-------------------+--------------+
| |img|          | |image287|     | |image288|        | |image289|   |
+================+================+===================+==============+
| ESP32 Plus主板 | Keyes          | XH2.54-4P         | USB线 x1     |
| x1             | MQ-3酒精传感器 | 转杜邦线母单线 x1 |              |
|                | x1             |                   |              |
+----------------+----------------+-------------------+--------------+

1.5 模块接线图

.. figure:: media/281501.png
   :alt: 281501

   281501

1.6 代码说明

.. figure:: ./media/img-20241114113826.png
   :alt: Img

   Img

从指定的数字管脚读取酒精传感器的数字信号(高/低电平)。

.. figure:: ./media/img-20241114113914.png
   :alt: Img

   Img

从指定的模拟管脚读取酒精传感器的模拟信号，模拟信号的范围为：0 ~ 4095 。

.. figure:: ./media/img-20241114113937.png
   :alt: Img

   Img

在串口监视器中打印酒精传感器的数字信号和模拟信号。

1.7 实验代码

你可以打开我们提供的代码，也可以自己编写代码，其编写代码的过程可以参考
“\ 第二十课 读取旋转电位器传感器的值\ ”，这里就不重复讲解：

.. figure:: ./media/img-20241114114056.png
   :alt: Img

   Img

1.7 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，旋转MQ-3酒精传感器上的电位器，微调使传感器上黄绿色LED灯介于亮与不亮之间的\ **不亮**\ 状态。

打开串口监视器，设置波特率为
**9600**\ 。串口监视器打印出对应的数据和字符，当传感器检测到酒精气体时，黄绿色LED点亮，在串口监视器中可以看到数字值由1变为0，ADC值（即：模拟值）变大。

.. figure:: ./media/img-20241114113717.png
   :alt: Img

   Img

项目二十九 五路AD按键
~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

第七课我们学习了单路按键模块，当按下按键时输出低电平，松开按键时输出高电平，只能读取到这两个数字信号。在这个套件中，有一个Keyes
五路AD按键模块，与单路按键模块原理不同，五路AD按键模块只占用一个模拟量端口，节省资源。模拟量采集，按下不同的按键输出不同的电压。

1.2 模块参数

工作电压 : DC 3.3 ~ 5V

电流 : 20 mA

最大功率 : 0.1 W

数据类型 : 模拟信号

工作温度 ：-10°C ~ +50°C

尺寸 ：47.6 x 23.8 x 9.3 mm

定位孔大小：直径为 4.8 mm

接口 ：间距为2.54 mm 3pin防反接口

1.3 模块原理图

.. figure:: ./media/291301.png
   :alt: img

   img

当没有按下按键时，输出到信号端S的OUT被R1拉低，此时我们读取到的是低电平0V；

当按下按键SW1时，输出到信号端S的OUT相当于直接连接到了VCC，此时我们读取到的是高电平3.3V；

当按下按键SW2时，我们读取到的信号OUT端电压就是R2与R1之间的电压，即VCC*R1/(R2+R1)，约为2.63V，模拟值约为3244；

当按下按键SW3时，我们读取到的信号OUT端电压就是R2+R3与R1之间的电压，即VCC*R1/(R3+R2+R1)，约为1.98V，模拟值约为2386；

当按下按键SW4时，我们读取到的信号OUT端电压就是R2+R3+R4与R1之间的电压，即VCC*R1/(R4+R3+R2+R1)，约为1.31V，模拟值约为1530；

当按下按键SW5时，我们读取到的信号OUT端电压就是R2+R3+R4+R5与R1之间的电压，即VCC*R1/(R5+R4+R3+R2+R1)，约为0.68V，模拟值约为707。

1.4 实验组件

+----------------+----------------+-------------------+--------------+
| |img|          | |image290|     | |image291|        | |image292|   |
+================+================+===================+==============+
| ESP32 Plus主板 | Keyes          | XH2.54-3P         | USB线 x1     |
| x1             | 五路AD按键模块 | 转杜邦线母单线 x1 |              |
|                | x1             |                   |              |
+----------------+----------------+-------------------+--------------+

1.5 模块接线图

.. figure:: ./media/291501.png
   :alt: img

   img

1.6 代码说明

.. figure:: ./media/img-20241114114950.png
   :alt: Img

   Img

从指定的模拟管脚读取五路AD按键模块的模拟信号，模拟信号的范围为：0 ~ 4095
。

.. figure:: ./media/img-20241114115601.png
   :alt: Img

   Img

将读取到的模拟值赋给变量val，串口监视器打印出val的值。

对读取到的模拟值进行判断，当模拟值低于500时，判断按键没有被按下；当模拟值处于500
~ 1000之间时，判断按键SW5被按下；当模拟值处于1000 ~
2000之间时，判断按键SW4被按下；当模拟值处于2000 ~
3000之间时，判断按键SW3被按下；当模拟值处于3000 ~
4000之间时，判断按键SW2被按下；当模拟值大于4000时，判断按键SW1被按下。

1.7 实验代码

你可以打开我们提供的代码，也可以自己编写代码，其编写代码的过程可以类似的参考
“\ 第七课 按键传感器检测实验\ ”，这里就不重复讲解：

.. figure:: media/image-20250506172125429.png
   :alt: image-20250506172125429

   image-20250506172125429

1.8 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，打开串口监视器，设置波特率为
**9600**\ 。

当按下按键时，串口监视器打印出对应的信息。

.. figure:: ./media/img-20241114115450.png
   :alt: Img

   Img

项目三十 摇杆模块
~~~~~~~~~~~~~~~~~

1.1 项目介绍

你看过游戏手柄吗？游戏手柄上有按键，还有摇杆。摇杆是什么工作原理呢？在我们这个套件中，就有一个Keyes
摇杆模块，它的主要元件是PS2手柄摇杆。控制时，我们需要将模块的X端口和Y端口连接至单片机的模拟口。B端口连接至单片机数字口，V端口接至单片机电源输出端（3.3-5V），GND接单片机GND。通过读取两个模拟值和一个数字口的高低电平情况，可以判断模块上摇杆的工作状态。

1.2 模块参数

工作电压 : DC 3.3 ~ 5V

电流 : 50 mA

最大功率 : 0.25 W

输出信号 : 信号端X、Y 模拟电压输出

信号端B : 数字电平输出

工作温度 ：-10°C ~ +50°C

控制信号 : 数字信号

尺寸 ：47.6 x 23.8 x 34.5 mm

定位孔大小：直径为 4.8 mm

接口 ：间距为2.54 mm 5pin防反接口

1.3 模块原理图

.. figure:: ./media/301301.png
   :alt: img

   img

其实它的原理非常简单，内部相当于两个可调电位器（左右和上下）和一个按键。按键没有按下时被R1下拉为低电平，按下时接通VCC即为高电平，与我们前面学习过的按键模块的电平值是相反的。摇动摇杆时内部的电位器就会根据摇杆的摇动调节，从而输出不同的电压，可以读取到模拟值。

1.4 实验组件

+----------------+----------------+-------------------+--------------+
| |img|          | |image293|     | |image294|        | |image295|   |
+================+================+===================+==============+
| ESP32 Plus主板 | Keyes 摇杆模块 | XH2.54-5P         | USB线 x1     |
| x1             | x1             | 转杜邦线母单线 x1 |              |
+----------------+----------------+-------------------+--------------+

1.5 模块接线图

.. figure:: ./media/301501.png
   :alt: img

   img

1.6 代码说明

.. figure:: ./media/img-20241029153241.png
   :alt: Img

   Img

读取摇杆模块在X轴、Y轴方向上的模拟值。

.. figure:: ./media/img-20241029153408.png
   :alt: Img

   Img

读取摇杆模块在Z轴方向上的按键值。

1.7 实验代码

你可以打开我们提供的代码，也可以自己编写代码，其如下：

1. 从 “\ |Img|\ ” 拖出 “\ |image296|\ ”。

2. 从 “\ |image297|\ ” 拖出 “\ |image298|\ ” 放入
   “\ |image299|\ ”，设置波特率为 9600 。

3. 先从 “\ |image300|\ ” 拖出 “\ |image301|\ ” ，将 “自动换行” 改成
   “不换行”；接着从 “ |image302| ” 拖出 “ |image303| ”，将 hello 改成 X:
   。

4. 先从 “\ |image304|\ ” 拖出 “\ |image305|\ ” ，将 “自动换行” 改成
   “不换行”；接着从 “ |image306| ” 拖出 “ |image307| ”，管脚为 34 ，选择
   x 。

5. 复制代码块 “\ |image308|\ ” 1次，将 X: 改成 Y：; 选择 y ，管脚为 35
   。

6. 先复制代码块 “\ |image309|\ ” 1 次，将 Y: 改成 Z: ；接着从
   “\ |image310|\ ” 拖出 “\ |image311|\ ” ，再从 “ |image312| ” 拖出 “
   |image313| ”，管脚为 13 。

7. 从 “\ |Img|\ ” 拖出 “\ |image314|\ ”，设置延时为100毫秒。

完整代码：

.. figure:: ./media/img-20241114131213.png
   :alt: Img

   Img

1.8 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，打开串口监视器，设置波特率为
**9600**\ 。

串口监视器窗口将打印出当前摇杆X轴和Y轴对应的模拟值以及Z轴对应的数字值，移动摇杆或按下它将改变串口监视器中的模拟值和数字值。当按下摇杆时，Z值为1；未按下摇杆时，Z值为0。X值从左到右由0增长到4095。Y值从下到上由0增长到4095。

.. figure:: ./media/301701.png
   :alt: img

   img

在X轴上移动摇杆，使数据从小到大。

.. figure:: ./media/img-20241114131816.png
   :alt: Img

   Img

在Y轴上移动摇杆，使数据从小到大。

.. figure:: ./media/img-20241114131849.png
   :alt: Img

   Img

按下摇杆。

.. figure:: ./media/img-20241114131913.png
   :alt: Img

   Img

项目三十一 继电器模块
~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

在日常生活中，一般使用交流电来驱动电气设备，有时我们会用开关来控制电器。如果将开关直接连接到交流电路上，一旦发生漏电，人就有危险。从安全的角度考虑，我们特别设计了这款具有NO（常开）端和NC（常闭）端的继电器模块。

1.2 模块参数

工作电压 : DC 5V

电流 : 50 mA

最大功率 : 0.25 W

输入信号 : 数字信号

触电电流 : 小于 3 A

工作温度 ：-10°C ~ +50°C

控制信号 : 数字信号

尺寸 ：47.6 x 23.8 x 19 mm

定位孔大小：直径为 4.8 mm

接口 ：间距为2.54 mm 3pin防反接口

1.3 模块原理图

.. figure:: ./media/311301.png
   :alt: img

   img

一个继电器拥有一个动触点以及两个静触点A和B。

当开关K断开时，继电器线路无电流通过，此时动触点与静触点B相接触，上半部分的电路导通。静触点B被称为常闭触点（NC）。常闭——NC（normal
close）通常情况下是关合状态，即线圈未得电的情况下闭合的。

当开关K闭合时，继电器电路通过电流产生磁力，此时动触点与静触点A相接触，下半部分电路导通。静触点A被称为常开触点（NO）。常开——NO（normal
open）通常情况下是断开状态，即线圈未得电的情况下断开的。

而动触点也被称为公共触点（COM）。

继电器简单来说就是一个开关，VCC表示电源正极、GND表示电源负极、IN表示信号输入脚，COM表示公共端，NC（normal
close）表示常闭端，NO(normal open)表示常开端。

.. figure:: ./media/311302.png
   :alt: img

   img

继电器能兼容多种单片机控制板，是用小电流去控制大电流运作的一种“自动开关”。它可以让单片机控制板驱动3A以下负载，如LED灯带、直流马达、微型水泵、电磁阀可插拔式接口设计，方便使用。

1.4 实验组件

+----------------+------------------+-------------------+--------------+
| |img|          | |image315|       | |image316|        | |image317|   |
+================+==================+===================+==============+
| ESP32 Plus主板 | Keyes            | XH2.54-3P         | USB线 x1     |
| x1             | 单路5V继电器模块 | 转杜邦线母单线 x1 |              |
|                | x1               |                   |              |
+----------------+------------------+-------------------+--------------+

1.5 模块接线图

.. figure:: ./media/311501.png
   :alt: img

   img

1.6 代码说明

.. figure:: ./media/img-20241114132133.png
   :alt: Img

   Img

向指定管脚设置“高”或“低”，选择“高”代表给该管脚设置高电平，有电压，有电流，则继电器吸合；选择“低”代表给管脚设置低电平，没电压，没有电流，则继电器断开。

1.7 实验代码

你可以打开我们提供的代码，也可以自己编写代码，其编写代码的过程可以参考
“\ 第二课 LED\ ”，这里就不重复讲解：

.. figure:: ./media/img-20241114132333.png
   :alt: Img

   Img

1.8 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电。

继电器将循环开与关，开启1秒，关闭1秒。同时可以听到继电器开与关的声音，还可以看到继电器上的指示灯指示状态的变化。

项目三十二 SK6812 RGB
~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

第六课学习了插件RGB模块，利用PWM信号对模块的三个引脚进行调色。我们这个套件中，还有一个Keyes
6812 RGB模块。SK6812 RGB
模块驱动原理与插件RGB模块的驱动原理不相同，只需要一个引脚控制。这是一个集控制电路与发光电路于一体的智能外控LED光源。每个LED原件其外型与一个5050LED灯珠相同，每个元件即为一个像素点，我们这个模块上有四个灯珠即四个像素点。

1.2 模块参数

工作电压 : DC 3.3 ~ 5V

最大功率 : 1W

光源 : SMD 5050 RGB

IC型号 : 4颗/WS2811

灰度等级 : 256级

发光角度 : 180°

发光颜色 : 可以通过控制器调为白，红，黄，蓝，绿,等

工作温度 ：-10°C ~ +50°C

尺寸 ：32 x 23.8 x 7.4 mm

定位孔大小：直径为 4.8 mm

接口 ：间距为2.54 mm 3pin防反接口

1.3 模块原理图

.. figure:: ./media/321301.png
   :alt: img

   img

从原理图中我们可以看出，这四个像素点灯珠串联。其实不论多少个灯珠串联，我们都可以用一个引脚控制其中任意一个灯让它显示任意一种颜色。像素点内部包含了智能数字接口数据锁存信号整形放大驱动电路，还包含有高精度的内部振荡器和12V高压可编程定电流控制部分，有效保证了像素点光的颜色高度一致。

数据协议采用单线归零码的通讯方式，像素点在上电复位以后，S端接受从控制器传输过来的数据，首先送过来的24bit数据被第一个像素点提取后，送到像素点内部的数据锁存器。这个6812RGB通讯协议与驱动已经在底层封装好了，我们直接调用函数的接口就可以使用。

1.4 实验组件

+----------------+----------------+-------------------+--------------+
| |img|          | |image318|     | |image319|        | |image320|   |
+================+================+===================+==============+
| ESP32 Plus主板 | Keyes 6812     | XH2.54-3P         | USB线 x1     |
| x1             | RGB模块 x1     | 转杜邦线母单线 x1 |              |
+----------------+----------------+-------------------+--------------+

1.5 模块接线图

.. figure:: ./media/321501.png
   :alt: img

   img

1.6 代码说明

.. figure:: ./media/img-20241118104141.png
   :alt: Img

   Img

设置 NeoPixel全彩LED 的管脚，灯数。

.. figure:: ./media/img-20241118104216.png
   :alt: Img

   Img

设置 NeoPixel全彩LED 的管脚，亮度（0~255）.

.. figure:: ./media/img-20241118104309.png
   :alt: Img

   Img

设置 NeoPixel全彩LED 的点亮，即工作生效。

.. figure:: ./media/img-20241118104434.png
   :alt: Img

   Img

设置R、G、B值，使NeoPixel全彩LED 点亮不同的颜色灯。

.. figure:: ./media/img-20241118104600.png
   :alt: Img

   Img

设置 NeoPixel全彩LED 的管脚，灯号和点亮的颜色灯。

.. figure:: ./media/img-20241118104726.png
   :alt: Img

   Img

选择NeoPixel全彩LED点亮的颜色。

1.7 实验代码

你可以打开我们提供的代码，也可以自己编写代码，其如下：

1. 从 “\ |Img|\ ” 拖出 “\ |image321|\ ”。

2. 从 “\ |image322|\ ” 拖出 “\ |image323|\ ” 和 “\ |image324|\ ” 放入
   “\ |image325|\ ” ，管脚都设为 4 ，灯数为 4 ，亮度为 60 。

.. figure:: ./media/img-20241118105827.png
   :alt: Img

   Img

3. 从 “\ |image326|\ ” 先拖出 “\ |image327|\ ” ，接着拖出
   “\ |image328|\ ” 放入 “\ |image329|\ ” 中；再复制代码块
   “\ |image330|\ ” 3 次；将管脚都设为 4 ，灯号 依次设为 1、2、3、4，R值
   120 都改成 255 ，G值和B值都不变。

.. figure:: ./media/img-20241118110411.png
   :alt: Img

   Img

4. 先从“\ |image331|\ ” 拖出 “\ |image332|\ ” ，管脚为 4；再从
   “\ |Img|\ ” 拖出 “\ |image333|\ ”，设置延时为1000毫秒。

.. figure:: ./media/img-20241118110726.png
   :alt: Img

   Img

4. 复制代码块 “\ |image334|\ ” 3 次 ，将 R值 255 G值 0 B值 0 依次改成
   R值 0 G值 255 B值 0 ，R值 0 G值 0 B值 255 ，和 R值 255 G值 255 B值
   255 。

.. figure:: ./media/img-20241118111032.png
   :alt: Img

   Img

完整代码：

.. figure:: ./media/img-20241114133714.png
   :alt: Img

   Img

1.8 实验结果

代码上传成功后，拔下USB线断电，按照接线图正确接好模块后再用USB线连接到计算机上电，我们可以看到模块上的4个RGB
LED 分别亮红灯、绿灯、蓝灯和白灯。

.. figure:: ./media/321701.png
   :alt: img

   img

.. figure:: ./media/321702.png
   :alt: 191702

   191702

项目三十三 旋转编码器模块计数
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

在这个套件中，有一个Keyes
旋转编码器模块，也叫开关编码器、旋转编码器。此款编码器有20脉冲20定位点、15脉冲30定位点两种。编码器主要用于汽车电子、多媒体音响、仪器仪表、家用电器、智能家居、计算机周边、医疗器械等领域。主要用于频率调节、亮度调节、温度调节、音量调节的参数控制等。

1.2 模块参数

工作电压 : DC 5V

电流 : 20 mA

最大功率 : 0.1 W

工作温度 ：-10°C ~ +50°C

控制信号 : 数字信号

尺寸 ：32 x 23.8 x 30.6 mm

定位孔大小：直径为 4.8 mm

接口 ：间距为2.54 mm 5pin防反接口

1.3 模块原理图

.. figure:: ./media/331301.png
   :alt: img

   img

增量式编码器是将位移转换成周期性的电信号，再把这个电信号转变成计数脉冲，用脉冲的个数表明位移的巨细。Keyes
旋转编码器模块采用的是20脉冲旋转编码器元件，它可以通过旋转计数正方向和反方向转动过程中输出脉冲的次数，这种转动计数是没有限制的，复位到初始状态，即从0开始计数。

旋转编码器提供两种交互方式： - **按钮**
单击旋钮以按下按钮。按下时，按钮将 SW 引脚与 GND
引脚连接，也就是SW引脚的电平为低电平。

- **旋转** 每次旋转旋钮时，会在 DT 和 CLK 引脚上产生一个 LOW 信号。

  - 顺时针旋转会导致 CLK 引脚首先变低，然后 DT 引脚也变低。

  - 逆时针旋转会导致 DT 引脚先变低，然后 CLK 引脚变低。

  两个引脚将在几毫秒内返回高电平。如下图所示：

  .. figure:: ./media/331302.png
     :alt: img

     img

1.4 实验组件

+----------------+----------------+-------------------+--------------+
| |img|          | |image335|     | |image336|        | |image337|   |
+================+================+===================+==============+
| ESP32 Plus主板 | Keyes          | XH2.54-5P         | USB线 x1     |
| x1             | 旋转编码器模块 | 转杜邦线母单线 x1 |              |
|                | x1             |                   |              |
+----------------+----------------+-------------------+--------------+

1.5 模块接线图

.. figure:: ./media/331501.png
   :alt: img

   img

1.6 代码说明

.. figure:: ./media/img-20241114141537.png
   :alt: Img

   Img

初始化旋转编码器1的模式、CLK管脚 和 DT管脚。

.. figure:: ./media/img-20241114141651.png
   :alt: Img

   Img

初始化旋转编码器1的初始为为0。

.. figure:: ./media/img-20241114141738.png
   :alt: Img

   Img

向左（即：顺时针）旋转旋转编码器1，串口监视器打印的数字逐渐加1。

.. figure:: ./media/img-20241114142015.png
   :alt: Img

   Img

向右（即：顺时针）旋转旋转编码器1，串口监视器打印的数字逐减少1。

.. figure:: ./media/img-20241114142045.png
   :alt: Img

   Img

按下按键时，串口监视器打印“Button pressed!”。

1.7 实验代码

.. figure:: ./media/img-20241114141434.png
   :alt: Img

   Img

1.8 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，打开串口监视器，设置波特率为
**9600**\ 。

先顺时针旋转编码器，串口监视器打印出来的数据\ **增大**\ ；再逆时针旋转编码器，串口监视器打印出来的数据\ **减小**\ ；最后按下编码器中间按键，串口监视器打印“\ **Button
pressed!**\ ”。

.. figure:: ./media/img-20241114140932.png
   :alt: Img

   Img

项目三十四 舵机的控制原理
~~~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

.. figure:: ./media/341101.png
   :alt: img

   img

舵机是一种位置伺服的驱动器，主要是由外壳、电路板、无核心马达、齿轮与位置检测器所构成。舵机有很多规格，但所有的舵机都有外接三根线。由于舵机品牌不同，颜色也会有所差异，我们实验用到的这款舵机分别用棕、红、橙三种颜色进行区分，棕色为接地线，红色为电源正极，橙色为信号线。

.. figure:: ./media/341102.png
   :alt: img

   img

舵机分为360度舵机、180度舵机和90度舵机，我们实验用到的这款舵机为90度舵机，但是它转动的角度范围最大接近180度，所以我们也可把它当做180度舵机使用，控制原理都是一样的。

.. figure:: ./media/341103.png
   :alt: img

   img

1.2 模块参数

工作电压 : DC 3.3 ~ 5V

工作温度 ：-10°C ~ +50°C

尺寸 ：32.25 x 12.25 x 30.42 mm

接口 ：间距为2.54 mm 3pin接口

1.3 模块原理图

.. figure:: ./media/341301.png
   :alt: img

   img

舵机的控制信号是周期为20ms （50Hz）的PWM（脉冲宽度调制）信号。

舵机的转动的角度是通过调节PWM信号的占空比来实现的，一般在 0.5ms ~ 2.5ms
的范围内去控制，总间隔为 2ms，相对应舵盘的位置为0度 ~
180度，呈线性变化。当脉冲宽度为 1.5ms 时，舵机旋转至中间角度，大于 1.5ms
时舵机旋转角度增大，小于 1.5ms 时舵机旋转角度减小。

也就是说，舵机的控制需要单片机产生一个周期为20ms的脉冲信号，以0.5ms到2.5ms的高电平来控制舵机转动的角度。具体脉冲参数下图所示：

.. figure:: ./media/341302.png
   :alt: img

   img

注意，由于舵机品牌不同，对于同一信号，不同品牌的舵机旋转的角度也会有所不同。

1.4 实验组件

+--------------------------+--------------------+----------------------+
| |img|                    | |image338|         | |image339|           |
+==========================+====================+======================+
| ESP32 Plus主板 x1        | 9G 180度数字舵机   | USB线 x1             |
|                          | x1                 |                      |
+--------------------------+--------------------+----------------------+

1.5 代码说明

.. figure:: ./media/img-20241030173136.png
   :alt: Img

   Img

向指定管脚设置舵机的转动角度和延时。

1.6 实验

1.6.1 实验①：

（1）实验接线图

.. figure:: ./media/341501.png
   :alt: img

   img

（2）实验代码

你可以打开我们提供的代码，也可以自己编写代码，其如下：

1. 从 “\ |Img|\ ” 拖出 “\ |image340|\ ”。

2. 从 “ |image341| ” 拖出 “ |image342| ” 放入 “\ |image343|\ ”，管脚为 4
   ，角度为 0 ，延时 200 毫秒。

.. figure:: ./media/img-20241030173438.png
   :alt: Img

   Img

3. 从 “ |image344| ” 拖出 “ |image345| ” 3 次，管脚为 4 ，角度分别设置为
   0 、90 和180 ，延时都为 1000 毫秒。

.. figure:: ./media/img-20241114143955.png
   :alt: Img

   Img

完整代码：

.. figure:: ./media/img-20241114143642.png
   :alt: Img

   Img

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，舵机由0度转到90度，停顿1秒；再转到180度，停顿1秒；然后回到0度，停顿1秒，循环转动。

1.6.2 实验②：

（1）实验接线图

.. figure:: ./media/341501.png
   :alt: img

   img

（2）实验代码

你可以打开我们提供的代码，也可以自己编写代码，其如下：

1. 从 “\ |Img|\ ” 拖出 “\ |image346|\ ”。

2. 从 “ |image347| ” 拖出 “ |image348| ” 放入 “\ |image349|\ ”，管脚为 4
   ，角度为 0 ，延时 200 毫秒。

.. figure:: ./media/img-20241030173438.png
   :alt: Img

   Img

3. 先从 “\ |Img|\ ” 拖出 “ |image350| ” 将 从 1 到 10 步长为 1 改成 从 0
   到 180 步长为 1；又从 “ |image351| ” 拖出 “ |image352| ” 放入 “
   |image353| ” ，管脚为 4 ；再从 “ |image354|\ ” 拖出 “ |image355| ”
   放入 “角度 0 ” 处 ；延时15毫秒。

.. figure:: ./media/img-20241114143121.png
   :alt: Img

   Img

4. 复制代码块 “ |image356| ” 1 次，将 从 0 到 180 步长为 1 改成 从 180
   到 0 步长为 -1 。

.. figure:: ./media/img-20241114143138.png
   :alt: Img

   Img

完整代码：

.. figure:: ./media/img-20241114143347.png
   :alt: Img

   Img

（3）实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，舵机在0度
~ 180度之间来回转动，每15ms转动一度。

项目三十五 超声波传感器的原理
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

蝙蝠和某些海洋动物都能够利用高频率的声音进行回声定位或信息交流。它们能通过口腔或鼻腔把从喉部产生的超声波发射出去，利用折回的声波来定向，并判定附近物体的位置、大小以及是否在移动。超声波是一种频率高于20000赫兹的声波，它的方向性好，穿透能力强，易于获得较集中的声能，在水中传播距离远，可用于测距、测速、清洗、焊接、碎石、杀菌消毒等。在医学、军事、工业、农业上有很多的应用。超声波因其频率下限大于人的听觉上限而得名。科学家们将每秒钟振动的次数称为声音的频率，它的单位是赫兹(Hz)。

在这个套件中，有一个HC-SR04超声波传感器，它可以发送出一种频率很高的人类无法听到的超声波信号，这些超声波的信号碰到障碍物，就会立刻反射回来。在接收到返回的信息之后，根据发射信号和接收信号的时间差，计算出传感器和障碍物的详细距离，和蝙蝠飞行的原理一样。

1.2 模块参数

超声波传感器工作电压 : DC 5V

超声波传感器工作电流 : 15 mA

超声波传感器工作频率 : 40 Hz

超声波传感器射程范围 : 2 cm ~ 4 m

超声波传感器测量角度 : <= 15度

超声波传感器输入触发信号 : 10 uS 的TTL脉冲

超声波传感器输出回响信号 : 输出TTL电平信号与射程成正比

工作温度 ：-10°C ~ +50°C

超声波传感器尺寸 ：45.5 x 26.7 x 17.6 mm

超声波转接板模块尺寸 ：32 x 23.8 x 11.85 mm

超声波转接板模块定位孔大小：直径为 4.8 mm

超声波转接板模块接口 ：间距为2.54 mm 4pin防反接口

1.3 模块原理图

最常用的超声测距的方法是回声探测法。当有脉冲电压触发时（单片机给Trig引脚发送高电平），超声波发射器探头里的晶片就会振动，继而产生超声波。在超声波发射时刻的同时计数器开始计时，超声波在空气中传播，途中碰到障碍物面阻挡就立即反射回来（Echo引脚发送高电平信号给单片机），超声波接收器收到反射回的超声波就立即停止计时。

超声波是一种声波，其声速V与温度有关。一般情况下超声波在空气中的传播速度为340m/s，根据计时器记录的时间t，就可以计算出超声波探头发射点距障碍物面的距离s，即：s=340t/2
。

.. figure:: ./media/351301.png
   :alt: img

   img

HC-SR04超声波测距模块可提供范围为2厘米至4米的非接触式距离感测功能，测距精度可达高到3mm。超声波传感器包括超声波发射器、超声波接收器与控制电路。其基本工作原理：

(1)采用IO口Trig触发测距，给至少10us的高电平信号;

(2)模块自动发送8个40khz的方波，自动检测是否有信号返回；

(3)有信号返回，通过IO口Echo输出一个高电平，高电平持续的时间就是超声波从发射到返回的时间。

.. figure:: ./media/351302.png
   :alt: img

   img

1.4 实验组件

+------------+----------------+---------------+----------------+------------+
| |img|      | |image357|     | |image358|    | |image359|     | |image360| |
+============+================+===============+================+============+
| ESP32      | Keyes          | HC-SR04       | XH2.54-4P      | USB线 x1   |
| Plus主板   | 超声波转接模块 | 超声波传感器  | 转杜邦线母单线 |            |
| x1         | x1             | x1            | x1             |            |
+------------+----------------+---------------+----------------+------------+

1.5 模块接线图

.. figure:: ./media/351501.png
   :alt: img

   img

.. figure:: ./media/351502.png
   :alt: img

   img

1.6 代码说明

.. figure:: ./media/img-20241029142305.png
   :alt: Img

   Img

读取超声波传感器检测的距离。

1.7 实验代码

你可以打开我们提供的代码，也可以自己编写代码，其如下：

1. 从 “\ |Img|\ ” 拖出 “\ |image361|\ ”。

2. 从 “\ |image362|\ ” 拖出 “\ |image363|\ ” 放入
   “\ |image364|\ ”，设置波特率为 115200 。

3. 先从 “ |image365|\ ” 拖出 “\ |image366|\ ” 放入 “\ |image367|\ ”
   中，将 “ 整数 ” 改成 “字符串” ；从 “\ |image368|\ ” 拖出
   “\ |image369|\ ” 放入 “\ |image370|\ ”中，将 item 改成 distance 。

.. figure:: ./media/img-20241029155850.png
   :alt: Img

   Img

4. 先从 “ |image371|\ ” 拖出 “\ |image372|\ ” ；再从 “ |image373| ” 拖出
   “ |image374| ” Trig管脚为 13 ，Echo 管脚为 12 。

.. figure:: ./media/img-20241029160216.png
   :alt: Img

   Img

5. 先从 “\ |image375|\ ” 拖出 “\ |image376|\ ” ，将 “自动换行” 改成
   “不换行”；接着从 “ |image377| ” 拖出 “ |image378| ”，将 hello 改成
   Distance: 。

.. figure:: ./media/img-20241029160600.png
   :alt: Img

   Img

6. 先从 “\ |image379|\ ” 拖出 “\ |image380|\ ” ，将 “自动换行” 改成
   “不换行”；接着从 “ |image381|\ ” 拖出 “ |image382| ”。

.. figure:: ./media/img-20241029160617.png
   :alt: Img

   Img

7. 复制代码块 “ |image383| ” 1次，将 “不换行” 改成 “自动换行”
   ，Distance: 改成 cm 。

.. figure:: ./media/img-20241029160906.png
   :alt: Img

   Img

8. 从 “\ |Img|\ ” 拖出 “\ |image384|\ ”，设置延时为100毫秒。

完整代码：

.. figure:: ./media/img-20241114144536.png
   :alt: Img

   Img

1.8 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，打开串口监视器，设置波特率为\ **9600**\ 。

放置障碍物在超声波传感器探头前感应，串口监视器窗口打印出超声波传感器与障碍物之间的距离值。

.. figure:: ./media/img-20241114144651.png
   :alt: Img

   Img

项目三十六 红外遥控与接收
~~~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

红外线遥控是目前使用最广泛的一种通信和遥控手段。因红外线遥控装置具有体积小、功耗低、功能强、成本低等特点，录音机、音响设备、空凋机以及玩具等其它小型电器装置上纷纷采用红外线遥控。红外遥控的发射电路是采用红外发光二极管发出经过调制的红外光波；红外接收电路由红外接收二极管、三极管或硅光电池组成，它们将红外发射器发射的红外光转换为相应的电信号，再送到后置放大器。

Keyes
红外接收模块选择的是VS1838B红外接收传感器元件，该元件是集接收、放大、解调一体的器件，内部IC就已经完成了解调，输出的就是数字信号。它可接收标准38KHz调制的遥控器信号。

1.2 模块参数

工作电压 : DC 3.3 ~ 5V

电流 : 50 mA

最大功率 : 0.25 W

工作温度 ：-10°C ~ +50°C

控制信号 : 数字信号

尺寸 ：32 x 23.8 x 10.8 mm

定位孔大小：直径为 4.8 mm

接口 ：间距为2.54 mm 3pin防反接口

1.3 模块原理图

.. figure:: ./media/361301.png
   :alt: img

   img

红外遥控系统的主要部分为调制、发射和接收。红外遥控是以调制的方式发射数据，就是把数据和一定频率的载波进行“与”操作，这样既可以提高发射效率又可以降低电源功耗。调制载波频率一般在30khz到60khz之间，大多数使用的是38kHz，占空比1/3的方波。红外接收的信号端加上了4.7K的上拉电阻R3，工作时，首先等待检测低电平，接收到信号后，信号端立即由高电平转为低电平。

1.4 实验组件

+------------+--------------+----------------+----------------+------------+
| |img|      | |image385|   | |image386|     | |image387|     | |image388| |
+============+==============+================+================+============+
| ESP32      | Keyes        | Keyes 遥控器   | XH2.54-3P      | USB线 x1   |
| Plus主板   | 红外接收模块 | x1             | 转杜邦线母单线 |            |
| x1         | x1           |                | x1             |            |
+------------+--------------+----------------+----------------+------------+

1.5 模块接线图

.. figure:: ./media/361501.png
   :alt: img

   img

1.6 代码说明

.. figure:: ./media/img-20241029112445.png
   :alt: Img

   Img

红外接收器接收红外遥控器上按键值信号，初始化管脚和等待解码，等等。

.. figure:: ./media/img-20241029112642.png
   :alt: Img

   Img

串口端口自动换行打印接收到的十六进制的红外遥控器按键值信号。

1.7 实验代码

你可以打开我们提供的代码，也可以自己编写代码，其如下：

1. 从 “\ |Img|\ ” 拖出 “\ |image389|\ ”。

2. 从 “\ |image390|\ ” 拖出 “\ |image391|\ ” 放入
   “\ |image392|\ ”，设置波特率为 9600 。

3. 从 “ |image393| ” 拖出 “ |image394| ” ，管脚为 4 。

4. 先从 “\ |image395|\ ” 拖出 “\ |image396|\ ” 放入 “ |image397| ”
   中；再从 “\ |image398|\ ” 拖出 “ |image399| ” 放入 “\ |image400|\ ”
   中数字 0 处，将 “不换行” 改成 “自动换行”。

.. figure:: ./media/img-20241114145153.png
   :alt: Img

   Img

完整代码：

.. figure:: ./media/img-20241114153545.png
   :alt: Img

   Img

18 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，打开串口监视器，设置波特率为
**9600**\ 。

找到红外遥控器，拔出绝缘片。对准红外接收模块的红外接收传感器的接收头，按下遥控器任意按键，接收到信号后，串口监视器窗口打印出当前接收到的按键值，同时，红外接收传感器上的LED会闪烁。

.. figure:: ./media/img-20241114153428.png
   :alt: Img

   Img

Keyes 遥控器上每一个按键都对应着一个按键值，如下图所示。

.. figure:: ./media/361703.png
   :alt: img

   img

项目三十七 DS18B20温度传感器检测温度
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

在这个套件中，有一个Keyes DS18B20温度传感器，DS18B20
是美国DALLAS公司的一款温度传感器，单片机可以通过 1-Wire 协议与 DS18B20
进行通信，最终将温度读出。测试结果为℃,范围为-55℃到+125℃。

1.2 模块参数

工作电压 : DC 5V

电流 : 20 mA

最大功率 : 0.1 W

工作温度 ：-10°C ~ +50°C

测量精度 ：±0.5℃（-10℃至+85℃范围内）

输出信号 : 数字信号

尺寸 ：32 x 23.8 x 9.35 mm

定位孔大小：直径为 4.8 mm

接口 ：间距为2.54 mm 3pin防反接口

1.3 模块原理图

.. figure:: ./media/371301.png
   :alt: img

   img

1-Wire 总线的硬件接口很简单，只需要把 DS18B20 的数据引脚和单片机的一个
IO
口接上就可以了。硬件简单，随之而来的，就是软件时序的复杂。1-Wire总线的时序比较复杂，很多同学在这里独立看时序图都看不明白，我们在库里面已经把复杂的时序操作封装好了，直接使用库函数就可以。我们来看一下
DS18B20 的硬件原理图，如图所示。 DS18B20 通过编程，可以实现最高 12
位的温度存储值，在寄存器中，以补码的格式存储，如下图所示。

1.4 实验组件

+----------------+-------------------+-------------------+--------------+
| |img|          | |image401|        | |image402|        | |image403|   |
+================+===================+===================+==============+
| ESP32 Plus主板 | DS18B20温度传感器 | XH2.54-3P         | USB线 x1     |
| x1             | x1                | 转杜邦线母单线 x1 |              |
+----------------+-------------------+-------------------+--------------+

1.5 模块接线图

.. figure:: ./media/371501.png
   :alt: img

   img

1.6 代码说明

.. figure:: ./media/img-20241114161618.png
   :alt: Img

   Img

从指定的数字管脚读取DS18B20温度传感器的温度值(单位：℃或℉)。

1.7 实验代码

你可以打开我们提供的代码，也可以自己编写代码，其编写代码的过程可以参考后面一课
“\ 第三十八课 XHT11温湿度传感器检测温湿度\ ” ，这里就不重复讲解：

.. figure:: ./media/img-20241114154753.png
   :alt: Img

   Img

1.8 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，打开串口监视器，设置波特率为
**9600**\ 。

串口监视器打印出当前环境的温度值。

.. figure:: ./media/img-20241114162619.png
   :alt: Img

   Img

项目三十八 XHT11温湿度传感器检测温湿度
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

在这个套件中，有一个Keyes
XHT11温湿度传感器。XHT11作为一款低价的入门级温湿度传感器，它主要由一个电阻式感湿元件和一个NTC测温元件组成。XHT11为4针单排引脚封装，采用单线制串行接口，只需加适当的上拉电阻，信号传输距离可达20米以上，Keyes
XHT11温湿度传感器具有超快响应、抗干扰能力强、性价比极高等优点。

1.2 模块参数

工作电压 : DC 3.3 ~ 5V

电流 : 50 mA

最大功率 : 0.25 W

工作温度 : -25°C ~ +60°C

温度范围 : 0 ~ 50°C ± 2℃

湿度范围 : 20% ~ 90%RH ± 5%RH

输出信号 : 数字双向单总线

尺寸 ：32 x 23.8 x 9.7 mm

定位孔大小：直径为 4.8 mm

接口 ：间距为2.54 mm 3pin防反接口

1.3 模块原理图

.. figure:: ./media/381301.png
   :alt: img

   img

单片机与
XHT11之间的通讯和同步,采用单总线数据格式,一次通讯时间4ms左右,数据分小数部分和整数部分,具体格式在下面说明,当前小数部分用于以后扩展,现读出为零，操作流程：一次完整的数据传输为40bit，高位先出。

**数据格式：**\ 8bit湿度整数数据+8bit湿度小数数据+8bi温度整数数据+8bit温度小数数据+8bit校验和。

**8位校验和：**\ 8bit湿度整数数据+8bit湿度小数数据+8bi温度整数数据+8bit温度小数数据”相加所得结果的末8位。

1.4 实验组件

+----------------+-------------------+-------------------+--------------+
| |img|          | |image404|        | |image405|        | |image406|   |
+================+===================+===================+==============+
| ESP32 Plus主板 | Keyes             | XH2.54-3P         | USB线 x1     |
| x1             | DS18B20温度传感器 | 转杜邦线母单线 x1 |              |
|                | x1                |                   |              |
+----------------+-------------------+-------------------+--------------+

1.5 模块接线图

.. figure:: ./media/381501.png
   :alt: img

   img

1.6 代码说明

.. figure:: ./media/img-20241029143841.png
   :alt: Img

   Img

这是读取温湿度传感器检测的温度和湿度，温湿度传感器有 3
种型号，根据不同型号选择，这里是选择 DHT11 型号。

1.7 实验代码

你可以打开我们提供的代码，也可以自己编写代码，其如下：

1. 从 “\ |Img|\ ” 拖出 “\ |image407|\ ”。

2. 从 “\ |image408|\ ” 拖出 “\ |image409|\ ” 放入
   “\ |image410|\ ”，设置波特率为 9600 。

3. 先从 “\ |image411|\ ” 拖出 “\ |image412|\ ” ，将 “自动换行” 改成
   “不换行”；接着从 “ |image413| ” 拖出 “ |image414| ”，将 hello 改成
   RH: 。

4. 先从 “\ |image415|\ ” 拖出 “\ |image416|\ ” ，将 “自动换行” 改成
   “不换行”；接着从 “ |image417| ” 拖出 “ |image418| ”，管脚为 13 ，选择
   “获得湿度” 。

5. 复制代码块 “ |image419| ” 1次，将 RH: 改成 % 。

6. 复制代码块 “\ |image420|\ ” 1次，将 RH: 改成 Temp: ，选择 “获得温度”
   ，将 % 改成 C ，将最下面的 “不换行” 改成 “自动换行” 。

7. 从 “\ |Img|\ ” 拖出 “\ |image421|\ ”，设置延时为100毫秒。

完整代码：

.. figure:: ./media/img-20241029154701.png
   :alt: Img

   Img

1.8 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，打开串口监视器，设置波特率为
**9600**\ 。

串口监视器打印出当前环境的温湿度值。

.. figure:: ./media/img-20241114163713.png
   :alt: Img

   Img

项目三十九 DS1307时钟模块
~~~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

这个模块主要用到的芯片是美国DALLAS公司推出的I2C总线接口实时时钟芯片DS1307，它可独立于CPU工作，不受CPU主晶振及其电容的影响；计时准确，月累积误差一般小于10秒。此芯片还具有主电源掉电情况下的时钟保护电路，DS1307的时钟靠后备电池维持工作，拒绝CPU对其读出和写入访问。同时还具有备用电源自动切换控制电路，因而可在主电源掉电和其它一些恶劣环境场合中保证系统时钟的定时准确性。DS1307具有产生秒、分、时、日、月、年等功能，且具有闰年自动调整功能。同时，DS1307芯片内部还集成有一定容量、具有掉电保护特性的静态RAM，可用于保存一些关键数据。

1.2 模块参数

中断类型 : 全天时间

存储器容量 : 56 bytes

存储器类型 : RAM

接口类型 : I2C

时钟频率 : 32.768kHz

特点 : 方波输出

电压, Vcc 最大 : 5V

电源电压 最小 : 4.5V

类型 : RTC

工作温度 ：-10°C ~ +50°C

通讯方式 ：I2C通讯

尺寸 ：47.6 x 23.8 x 9.3 mm

定位孔大小：直径为 4.8 mm

接口 ：间距为2.54 mm 4pin防反接口

1.3 模块原理图

.. figure:: ./media/391301.png
   :alt: img

   img

DS1307 把8 个寄存器和56 字节的RAM
进行了统一编址，记录年、月、日、时、分、秒及星期; AM、PM
分别表示上午和下午; 56 个字节的NVRAM存放数据; 2线串口;
可编程的方波输出;电源故障检测及自动切换电路;电池电流小于500nA。

主要引脚定义如下：

========== ====================
DS1307引脚 定义
========== ====================
X1、X2     32.768kHz 晶振接入端
VBAT       +3V 电池电压输入
VCC        电源电压
SQW        方波驱动器
SCL        串行时钟
SDA        串行数据
========== ====================

1.4 实验组件

+---------------+----------------------+------------------+-------------+
| |img|         | |image422|           | |image423|       | |image424|  |
+===============+======================+==================+=============+
| ESP32         | Keyes                | XH2.54-4P        | USB线 x1    |
| Plus主板 x1   | DS1307时钟传感器模块 | 转杜邦线母单线   |             |
|               | x1                   | x1               |             |
+---------------+----------------------+------------------+-------------+

1.5 模块接线图

.. figure:: ./media/391501.png
   :alt: img

   img

1.6 代码说明

.. figure:: ./media/img-20241114170208.png
   :alt: Img

   Img

初始化 DS1307 时钟模块，将时间设置成实时时间。

.. figure:: ./media/img-20241114170329.png
   :alt: Img

   Img

如果模块上没有电池那么我们就要设置，如果模块带了电池，那么模块自动在运行，我们就只需要这句代码块。

.. figure:: ./media/img-20241114170423.png
   :alt: Img

   Img

是用于获取系统的时间和日期，有：年、月、日、时、分、秒、星期。

1.7 实验代码

你可以打开我们提供的代码，也可以自己编写代码，其如下：

1. 从 “\ |Img|\ ” 拖出 “\ |image425|\ ”。

2. 从 “\ |image426|\ ” 拖出 “\ |image427|\ ” 放入
   “\ |image428|\ ”，设置波特率为 57600 。

3. 从 “ |image429| ” 拖出 “ |image430| ” ，设置 年2024 月11 日17 时07
   分10 秒 20 ；再拖出 “\ |image431|\ ” 。

.. figure:: ./media/img-20241114171339.png
   :alt: Img

   Img

4. 先从 “\ |image432|\ ” 拖出 “\ |image433|\ ” 2 次，将 “自动换行” 改成
   “不换行”；接着从“ |image434| ” 拖出 “ |image435| ” ，设置为 年 ；再从
   “ |image436| ” 拖出 “ |image437| ”，将 “hello” 改成空格“ ” 。

.. figure:: ./media/img-20241114171729.png
   :alt: Img

   Img

5. 复制代码块 “\ |image438|\ ” 6 次，将 年
   分别改成：月、日、时、分、秒、星期；再将最后的 “不换行” 改成
   “自动换行” ；延时100毫秒。

.. figure:: ./media/img-20241114172113.png
   :alt: Img

   Img

完整代码：

.. figure:: ./media/img-20241114170853.png
   :alt: Img

   Img

1.8 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，打开串口监视器，设置波特率为
**57600**\ 。

串口监视器打印出年、月、日、时、分、秒、星期，并每秒刷新一次，显示如下图。

.. figure:: ./media/img-20241114170807.png
   :alt: Img

   Img

项目四十 ADXL345加速度传感器
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

在这个套件中，有一个Keyes ADXL345加速度传感器模块，它主要由 ADXL345BCCZ
芯片组成。ADXL345BCCZ
是一款小而薄的低功耗3轴加速度计芯片，分辨率高（13位），测量范围达±16g，既能测量运动或冲击导致的动态加速度，也能测量静止加速度，例如重力加速度，使得器件可作为倾斜传感器使用。

1.2 模块参数

工作电压 ：DC 3.3 ~ 5V

测量范围 ：±16 g

工作温度 ：-10°C ~ +50°C

通讯方式 ：IIC/SPI 通信协议

尺寸 ：47.6 x 23.8 x 9.3 mm

定位孔大小：直径为 4.8 mm

接口 ：间距为2.54 mm 4pin防反接口

1.3 模块原理图

.. figure:: ./media/401301.png
   :alt: img

   img

ADXL345是一款完整的3轴加速度测量系统，可选择的测量范围有±2 g，±4 g，±8
g或±16
g。它数字输出数据为16位二进制补码格式，可通过SPI（3线或4线）或I2C数字接口访问。该传感器可以在倾斜检测应用中测量静态重力加速度，还可以测量运动或冲击导致的动态加速度。其高分辨率(3.9mg/LSB)，能够测量不到1.0°的倾斜角度变化。

1.4 实验组件

+---------------+-------------------------+------------------+-------------+
| |img|         | |image439|              | |image440|       | |image441|  |
+===============+=========================+==================+=============+
| ESP32         | Keyes                   | XH2.54-4P        | USB线 x1    |
| Plus主板 x1   | ADXL345加速度传感器模块 | 转杜邦线母单线   |             |
|               | x1                      | x1               |             |
+---------------+-------------------------+------------------+-------------+

1.5 模块接线图

.. figure:: ./media/401501.png
   :alt: img

   img

1.6 代码说明

.. figure:: ./media/img-20241118175246.png
   :alt: Img

   Img

从指定的管脚读取ADXL345加速度传感器在X轴、Y轴和Z轴方向上的加速度(单位：g)。

1.7 实验代码

你可以打开我们提供的代码，也可以自己编写代码，其编写代码的过程可以参考
“\ 第三十八课 XHT11温湿度传感器检测温湿度\ ” ，这里就不重复讲解：

.. figure:: ./media/img-20241118175120.png
   :alt: Img

   Img

1.8 实验结果

上传代码，代码上传成功后，拔下USB线断电，然后按照接线图正确接好模块后再用USB线连接到计算机上电，打开串口监视器，设置波特率为
**57600**\ 。

串口监视器打印出三轴加速度对应的值，单位为g。

.. figure:: ./media/img-20241118175025.png
   :alt: Img

   Img

项目四十一 TM1650四位数码管模块
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

Keyes TM1650四位数码管模块选用的 0.36
英寸红色共阴4位数码管的驱动芯片是TM1650。TM1650是一种带键盘扫描接口的LED驱动控制专用电路的芯片。内部集成有MCU输入输出控制数字接口、数据锁存器、LED
驱动、键盘扫描等电路。TM1650性能稳定、质量可靠、抗干扰能力强，可适用于24小时长期连续工作的应用场合。TM1650采用两线串行传输协议通讯（注意：该数据传输协议不是标准的I2C协议）。该芯片只需要通过两个引脚与MCU通讯就可以完成数码管的驱动，可以节省MCU引脚资源。

实验中使用Keyes
TM1650四位数码管模块时，我们只需要2根信号线即可使单片机控制4位数码管，大大节约了控制板IO口资源。

1.2 模块参数

工作电压 : DC 5V

电流 : 100 mA

最大功率 : 0.5 W

数码管显示颜色 : 红色

LED极性 : 共阴

通讯方式 ：2线高速串行接口（CLK,DAT）

工作温度 ：-10°C ~ +50°C

尺寸 ：47.6 x 23.8 x 10.6 mm

定位孔大小：直径为 4.8 mm

接口 ：间距为2.54 mm 4pin防反接口

1.3 模块原理图

TM1650与MCU之间的通讯采用2线高速串行接口（CLK,DAT），这两个连线分别是数据线DAT和同步时钟线CLK。其中DAT为双向数据传输线，TM1650既用该线从MCU接收数据，也用该线向MCU发送数据。

.. figure:: ./media/411301.png
   :alt: img

   img

实验中我们使用封装好的库函数。 如果大家有兴趣也可以接着往下学习了解
1.3.1 TM1650通讯时序格式和 1.3.2
指令集说明，然后再去了解底层的库函数是如何实现的。

#1.3.1 TM1650通讯时序格式

TM1650采用下图1 中2线串行传输协议通讯：

.. figure:: ./media/411302.png
   :alt: img

   img

（1）开始信号（START）/结束信号(STOP)

开始信号：保持 CLK 为“1”电平，DAT 从“1”跳“0”，认为是开始信号，如上图1的
A 段； 结束信号：保持 CLK 为“1”电平，DAT
从“0”跳“1”，认为是结束信号，如上图1的 E 段；

（2）ACK 信号

如果本次通讯正常，芯片在串行通讯的第 8 个时钟下降沿后，TM1650 主动把 DAT
拉低，直到 CLK 检测到上升沿，DAT 释放为输入状态（对芯片而言）,如上图1的
D 段。

（3） 写“1”和写“0”

写“1”：保持 DAT 为“1”电平，CLK
从“0”跳到“1”,再从“1”跳到“0”，则认为是写入“1” ，如上图 1的 B 段。
写“0”：保持 DAT 为“0”电平，CLK
从“0”跳到“1”,再从“1”跳到“0”，则认为是写入“0” ，如上图 1的 C 段。

（4） 一个字节（8 位）数据传输格式

.. figure:: ./media/411303.png
   :alt: img

   img

一个字节数据的传输格式如图上 2，数据发送时 MSB 在前，LSB
在后，即高位先进。微处理器的数据通过 2 线 串行接口和 TM1650 通信，当 CLK
是高电平时，DAT 上的信号必须保持不变；只有 CLK 上的时钟信号为低电平时，
DAT 上的信号才能改变。数据输入的开始条件是 CLK 为高电平时，DAT
由高变低；结束条件是 CLK 为高时，DAT 由低电平变为高电平。

（5）写显示操作

.. figure:: ./media/411304.png
   :alt: img

   img

ADDRESS：显示地址（68H、6AH、6CH、6EH）； DATA：显示数据。

（6）完整操作时序

.. figure:: ./media/411305.png
   :alt: img

   img

command1：系统命令 48H； command2：系统参数设置；
ADDRESS：显示地址（68H、6AH、6CH、6EH）； DATA：显示数据。

备注：
1、设置系统参数和写入显存数据是两个独立的过程，它们之间的顺序不影响实际应用；
2、每次输入系统命令（48H）和系统参数设置命令都会改变系统参数，请特别注意待机指令操作。

#1.3.2 指令集说明

（1）数据命令设置

.. figure:: ./media/411306.png
   :alt: img

   img

注意：使用的指令是 16 进制 H，输入数据和读取数据都是从高位开始。

所以在代码中我们数据命令设置为
0x48，使用TM1650点亮数码管的功能，而不使用按键扫描的功能。

（2）显示命令设置

.. figure:: ./media/411307.png
   :alt: img

   img

注意：在发送上述系统显示命令前需要先输入系统命令48H,如48H+11H=1级亮度开屏显示。

B[7:0] 这里实际是一个字节数据，只是不同位部分代表不同功能。 B[6:4]
：设置数码管亮度。注意，000 最亮。 B[3] ：设置是否显示小数点。 B[0]
：设置数码管的开屏、关屏。

（3） 显存地址

.. figure:: ./media/411308.png
   :alt: img

   img

如果要显示小数点，则必须先需要将段模式设置为 8 段输出。

.. figure:: ./media/411309.png
   :alt: img

   img

--------------

1.4 实验组件

+---------------+----------------------+------------------+-------------+
| |img|         | |image442|           | |image443|       | |image444|  |
+===============+======================+==================+=============+
| ESP32         | Keyes                | XH2.54-4P        | USB线 x1    |
| Plus主板 x1   | TM1650四位数码管模块 | 转杜邦线母单线   |             |
|               | x1                   | x1               |             |
+---------------+----------------------+------------------+-------------+

1.5 模块接线图

.. figure:: ./media/411501.png
   :alt: img

   img

1.6 代码说明

.. figure:: ./media/img-20241028165636.png
   :alt: Img

   Img

初始化TM1650四位数码管模块的管脚。

.. figure:: ./media/img-20241028170011.png
   :alt: Img

   Img

打开/关闭，或清屏四位数码管模块

.. figure:: ./media/img-20241028170127.png
   :alt: Img

   Img

四位数码管模块显示 4 位字符串（数字或字母等等）。

1.7 实验代码

你可以打开我们提供的代码，也可以自己编写代码，其如下：

1. 从 “\ |Img|\ ” 拖出 “\ |image445|\ ”。

2. 从 “\ |image446|\ ” 分别拖出 “\ |image447|\ ” 和 “\ |image448|\ ”
   放入 “\ |image449|\ ”，CLK管脚为 22 ，DIO管脚为 21。

.. figure:: ./media/img-20241029081328.png
   :alt: Img

   Img

3. 先从 “\ |image450|\ ” 拖出 “\ |image451|\ ” ，将字符串 1234 改成
   0000；再从 “\ |Img|\ ” 拖出 “\ |image452|\ ”，设置延时为1000毫秒。

.. figure:: ./media/img-20241029081908.png
   :alt: Img

   Img

4. 复制代码块 “\ |image453|\ ” 9次，分别将字符串 0000 改成
   1111、2222、3333、4444、5555、6666、7777、8888、9999。

完整代码：

.. figure:: ./media/img-20241115091356.png
   :alt: Img

   Img

1.8 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，4位数码管显示数字，从0000开始，一直到9999，并在一个无限循环中重复这些动作。

.. figure:: ./media/411701.png
   :alt: img

   img

项目四十二 HT16K33_8X8点阵模块
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

点阵，多个LED组成的阵列，他们的集合称为“阵”，其中单个单元称为“点”。8X8点阵共由64个发光二极管组成，且每个发光二极管是放置在行线和列线的交叉点上。

第二课我们学习了一个IO口控制一个led，这节课我们来学习用更少的IO口控制更多的led。

1.2 模块参数

工作电压 : DC 5V

电流 : 200 mA

最大功率 : 1 W

工作温度 ：-10°C ~ +50°C

通讯方式 ：I2C通讯

I2C通信地址 ：0X70

点阵屏显示颜色 ：蓝色

尺寸 ：32 x 23.8 x 9.3 mm

定位孔大小：直径为 4.8 mm

接口 ：间距为2.54 mm 4pin防反接口

1.3 模块原理图

.. figure:: ./media/421301.png
   :alt: img

   img

如原理图所示，如果想要点亮第一行第一列的LED灯，只需要将C1置高电平、R1置低电平就可以了。如果我们想让第一行led全部点亮，只需要将R1置为低电平，C1~C8全部置为高电平就可以了。原理非常简单，但是这样设置的话我们总共需要用到16个IO口，非常浪费单片机资源。为了节省IO口不浪费单片机资源，我们特别设计了这个HT16K33_8X8点阵模块，利用HT16K33芯片驱动1个8*8点阵，只需要利用单片机的I2C通信端口就能控制点阵的64个发光二极管。

我们这款Keyes HT16K33_8X8点阵模块已经固定了通信地址，地址为0x70。

1.4 实验组件

+----------------+---------------------+------------------+-------------+
| |img|          | |image454|          | |image455|       | |image456|  |
+================+=====================+==================+=============+
| ESP32 Plus主板 | Keyes               | XH2.54-4P        | USB线 x1    |
| x1             | HT16K33_8X8点阵模块 | 转杜邦线母单线   |             |
|                | x1                  | x1               |             |
+----------------+---------------------+------------------+-------------+

1.5 模块接线图

.. figure:: ./media/421501.png
   :alt: img

   img

1.6 代码说明

.. figure:: ./media/img-20241029083648.png
   :alt: Img

   Img

初始化HT16K338×8点阵屏模块的地址和管脚。

.. figure:: ./media/img-20241029083853.png
   :alt: Img

   Img

对HT16K338×8点阵屏模块清屏

.. figure:: ./media/img-20241029083953.png
   :alt: Img

   Img

可以对HT16K338×8点阵屏设置图案，每个灰点对应于模块上的LED
，勾选其中一个灰点，模块上对应的LED点亮。

1.7 实验代码

你可以打开我们提供的代码，也可以自己编写代码，其如下：

1. 从 “\ |Img|\ ” 拖出 “\ |image457|\ ”。

2. 从 “\ |image458|\ ” 分别拖出 “\ |image459|\ ” 和 “\ |image460|\ ”
   放入 “\ |image461|\ ”，SDA管脚为 21 ，SCL管脚为 22，地址默认为 0x70
   。

.. figure:: ./media/img-20241029084434.png
   :alt: Img

   Img

3. 从 “\ |image462|\ ” 拖出 “\ |image463|\ ”
   ，点击灰点(√)，设置显示的图案。

.. figure:: ./media/img-20241029084713.png
   :alt: Img

   Img

完整代码：

.. figure:: ./media/img-20241029084808.png
   :alt: Img

   Img

1.8 实验结果

上传代码，代码上传成功后，拔下USB线断电。按照接线图正确接好模块后再用USB线连接到计算机上电。HT16K33_8X8点阵模块显示“笑脸”图案。

.. figure:: ./media/421701.png
   :alt: img

   img

若代码上传成功后点阵屏不显示“笑脸”图案，尝试按一下RESET键。

.. figure:: ./media/RESET.jpg
   :alt: img

   img

项目四十三 LCD_128X32_DOT模块
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

在这个套件中，有一个Keyes
LCD_128X32_DOT模块，它是一个像素为128*32的液晶屏模块，驱动芯片为
ST7567A。此模块使用IIC通信方式。我们提供了包含所有英文字母和常用符号的库，可以直接调用，还能设置大小。

1.2 模块参数

工作电压 ：DC 5V

分辨率 ：128 X 32

电流 ：100 mA

最大功率 ：0.5W

工作温度 ：0°C ~ +40°C

通讯方式 ：IIC/SPI 通信协议

尺寸 ：47.6 x 23.8 x 9.3 mm

定位孔大小：直径为 4.8 mm

接口 ：间距为2.54 mm 4pin防反接口

1.3 模块原理图

.. figure:: ./media/431301.png
   :alt: img

   img

该模块使用IIC通讯原理，底层函数已经封装在库里面，直接调用库函数就可以。如果感兴趣的话可以自行了解底层驱动。

1.4 实验组件

+----------------+--------------------+-------------------+--------------+
| |img|          | |image464|         | |image465|        | |image466|   |
+================+====================+===================+==============+
| ESP32 Plus主板 | Keyes              | XH2.54-4P         | USB线 x1     |
| x1             | LCD_128X32_DOT模块 | 转杜邦线母单线 x1 |              |
|                | x1                 |                   |              |
+----------------+--------------------+-------------------+--------------+

1.5 模块接线图

.. figure:: ./media/431501.png
   :alt: img

   img

1.6 代码说明

.. figure:: ./media/img-20241029091418.png
   :alt: Img

   Img

初始化LCD_128X32_DOT的管脚。

.. figure:: ./media/img-20241029091523.png
   :alt: Img

   Img

对LCD_128X32_DOT清屏

.. figure:: ./media/img-20241029091630.png
   :alt: Img

   Img

设置LCD_128X32_DOT显示内容的位置。

.. figure:: ./media/img-20241029091724.png
   :alt: Img

   Img

LCD_128X32_DOT显示字符串（数字，符号和字母等等）。

1.7 实验代码

你可以打开我们提供的代码，也可以自己编写代码，其如下：

1. 从 “\ |Img|\ ” 拖出 “\ |image467|\ ”。

2. 从 “\ |image468|\ ” 分别拖出 “\ |image469|\ ” 和 “\ |image470|\ ”
   放入 “\ |image471|\ ” 。

.. figure:: ./media/img-20241029092104.png
   :alt: Img

   Img

3. 从 “\ |image472|\ ” 分别拖出 “\ |image473|\ ” 和 “\ |image474|\ ”
   ，设置第 0 行第 8 ，将字符串 abcd 改成 KEYES 。

.. figure:: ./media/img-20241029095149.png
   :alt: Img

   Img

4. 复制代码块 “\ |image475|\ ”
   3次，将（0，8）分别改成（1，0）、（2，0）、（3，0）；将字符串 KEYES
   分别改成 ABCDEFGHIJKLMNOPQR 、123456789+-\*/<>=$@
   、%^&(){}:;’\|?,.~\\[] 。

.. figure:: ./media/img-20241029095601.png
   :alt: Img

   Img

完整代码：

.. figure:: ./media/img-20241029095635.png
   :alt: Img

   Img

1.8 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，模块显示屏第一行显示“\ **KEYES**\ ”、第二行显示“\ **ABCDEFGHIJKLMNOPQR**\ ”、第三行显示“\ **123456789+-/<>=$@\*\ ”、第四行显示“**\ %^&(){}:;’\|?,.~\\[]*\*”。

.. figure:: ./media/431701.png
   :alt: img

   img

项目四十四 RFID刷卡模块
~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

在这个套件中，有一个Keyes
RFID刷卡模块。RFIDRFID-RC522射频模块采用Philips
MFRC522原装芯片设计读卡电路，使用方便，成本低廉，适用于设备开发、读卡器开发等高级应用的用户，也适用于需要进行射频卡终端设计/生产的用户。本模块可直接装入各种读卡器模具,通过IIC接口简单的2条线就可以直接与用户任何CPU主板或单片机相连接通信。实验中用刷卡模块读取到的数据是4个16进制数，我们把这四个16进制数串以字符串的形式打印出来。例如本实验中读取到的IC卡的数据为：0xED、0xF7、0x94、0x5A，在串口监视器显示出信息字符串就是ED
F7 94
5A；读取钥匙扣的数据为：0x4C、0x09、0x6B、0x6E，在串口监视器打印出来的信息字符串就是4C
09 6B
6E。有时候看到的不是两位数，是因为前面有个0省略了，如0a它显示的就是a。不同的IC卡和钥匙扣，其数据是不一样的。

1.2 模块参数

工作电压 : DC 5V

工作电流 : 13 ~ 100 mA /DC 5V

空闲电流 : 10 ~ 13 mA /DC 5V

休眠电流 : < 80 uA

峰值电流 : < 100 mA

工作频率 : 13.56 MHz

最大功率 : 0.5 W

支持的卡类型：mifare1 S50、mifare1 S70、mifare UltraLight、mifare
Pro、mifare Desfire

数据传输速率：最大10Mbit/s

工作温度 ：-10°C ~ +50°C

尺寸 ：47.6 x 23.8 x 9.3 mm

定位孔大小：直径为 4.8 mm

接口 ：间距为2.54 mm 4pin防反接口

1.3 模块原理图

.. figure:: ./media/441301.png
   :alt: img

   img

RFID（Radio Frequency
Identification）：无线射频识别，读卡器由频射模块及高平磁场组成。Tag应答器为待感应设备，此设备不包含电池。他只包含微型集成电路芯片及存储数据的介质以及接收和发送信号的天线。读取tag中的数据，首先要放到读卡器的读取范围内。读卡器会产生一个磁场，因为磁能生电由楞次定律，RFID
Tag就会供电，从而激活设备。

.. figure:: ./media/441302.png
   :alt: img

   img

1.4 实验组件

+---------------------+---------------------+-------------------------+
| |img|               | |image476|          | |image477|              |
+=====================+=====================+=========================+
| ESP32 Plus主板 x1   | Keyes RFID刷卡模块  | XH2.54-4P               |
|                     | x1                  | 转杜邦线母单线 x1       |
+---------------------+---------------------+-------------------------+
| |image478|          | |image479|          | |image480|              |
+---------------------+---------------------+-------------------------+
| USB线 x1            | 钥匙扣 x1           | IC卡 x1                 |
+---------------------+---------------------+-------------------------+

1.5 模块接线图

.. figure:: ./media/441501.png
   :alt: img

   img

1.6 代码说明

.. figure:: ./media/img-20241029132843.png
   :alt: Img

   Img

初始化RFID RC522 I2C模块的管脚等等。

.. figure:: ./media/img-20241029133020.png
   :alt: Img

   Img

RFID RC522 I2C模块读取白色磁卡和钥匙扣的值。

1.7 实验代码

你可以打开我们提供的代码，也可以自己编写代码，其如下：

1. 从 “\ |Img|\ ” 拖出 “\ |image481|\ ”。

2. 从 “\ |image482|\ ” 拖出 “\ |image483|\ ” 放入
   “\ |image484|\ ”，设置波特率为 115200 。

3. 从 “\ |image485|\ ” 拖出 “\ |image486|\ ” 放入 “\ |image487|\ ”中。

.. figure:: ./media/img-20241029133756.png
   :alt: Img

   Img

4. 先从 “ |image488|\ ” 拖出 “\ |image489|\ ” 放入 “\ |image490|\ ”
   中，将 “ 整数 ” 改成 “字符串” ；再从 “\ |image491|\ ” 拖出
   “\ |image492|\ ” 放入 “\ |image493|\ ”中，删除 “hello”。

.. figure:: ./media/img-20241029133729.png
   :alt: Img

   Img

5. 从 “ |image494|\ ” 拖出 “\ |image495|\ ” ，再从 “ |image496| ” 拖出 “
   |image497| ” 。

.. figure:: ./media/img-20241029134204.png
   :alt: Img

   Img

6. 先从 “\ |image498|\ ” 拖出 “\ |image499| ”；接着从 “ |image500|\ ”
   拖出 “\ |image501|\ ” ；再从 “\ |Img|\ ” 拖出
   “\ |image502|\ ”，设置延时为100毫秒。

.. figure:: ./media/img-20241029134610.png
   :alt: Img

   Img

完整代码：

.. figure:: ./media/img-20241029134631.png
   :alt: Img

   Img

--------------

1.8 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，打开串口监视器，设置波特率为
**115200**\ 。用IC卡和钥匙扣靠近RFID模块，串口监视器打印出RFID刷卡模块读取到的数据信息。

.. figure:: ./media/img-20241115100353.png
   :alt: Img

   Img

**注意：不同的IC卡和钥匙扣，其数据是不一样的。**\ 请记录下你的IC卡和钥匙扣的UID码，第59课会用到。

若代码上传成功后串口监视器不打印数据信息，尝试按一下RESET键。

.. figure:: ./media/RESET.jpg
   :alt: img

   img

项目四十五 按键控制LED灯
~~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

从前面的实验课程中我们学习了按键模块，按下按键我们的单片机读取到低电平，松开按键读取到高电平。在这一实验课程中，我们将按键模块和紫色LED模块组合实验，实现按下按键LED点亮，再次按下按键LED熄灭，再次按下再次点亮的效果。

1.2 实验组件

+-------------+--------------+-------------+----------------+------------+
| |img|       | |image503|   | |image504|  | |image505|     | |image506| |
+=============+==============+=============+================+============+
| ESP32       | Keyes        | Keyes       | XH2.54-3P      | USB线 x1   |
| Plus主板 x1 | 单路按键模块 | 紫色LED模块 | 转杜邦线母单线 |            |
|             | x1           | x1          | x2             |            |
+-------------+--------------+-------------+----------------+------------+

1.3 实验接线图

.. figure:: ./media/451301.png
   :alt: img

   img

1.4 代码说明

.. figure:: ./media/img-20241115103741.png
   :alt: Img

   Img

布尔型（bool）变量的值只有真 （true) 和假 （false）。
C++中如果值非零就为True,为零就是False。这里可以知道ledState初始值为0。

.. figure:: ./media/img-20241115103826.png
   :alt: Img

   Img

将ledState的当前值取反后再赋值给ledState本身。

.. figure:: ./media/img-20241115103926.png
   :alt: Img

   Img

这里延时的作用是软件方法消抖。按键机械触点断开、闭合时，由于触点的弹性作用，按键开关不会马上稳定接通或一下子断开，在闭合及断开的瞬间均伴随有一连串的抖动，为了不产生这种现象而作的措施就是按键消抖。代码中检测出键闭合后执行一个延时程序，10ms的延时，让前沿抖动消失后再一次检测键的状态，如果仍保持闭合状态电平，则确认为真正有键按下.

1.5 实验代码

.. figure:: ./media/img-20241115103518.png
   :alt: Img

   Img

1.6 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，按下按键，LED点亮，再次按下，LED熄灭。循环进行。

.. figure:: ./media/451501.png
   :alt: img

   img

.. figure:: ./media/451502.png
   :alt: img

   img

项目四十六 障碍物报警实验
~~~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

在前面实验课程中中，我们使用一个输入模块控制另一个输出模块。在这一实验中，我们还是用一个模块控制另一个模块。

生活中，我们可以利用一个检测传感器控制一个有源蜂鸣器响起或者LED点亮，做声光报警设备，如检测磁场（干簧管）、检测倾斜（倾斜模块）等等。这一实验课程中我们将避障传感器和有源蜂鸣器模块组合实验，实现避障传感器检测到障碍物时有源蜂鸣器响起的效果。

1.2 实验组件

+-------------+-------------+----------------+----------------+------------+
| |img|       | |image507|  | |image508|     | |image509|     | |image510| |
+=============+=============+================+================+============+
| ESP32       | Keyes       | Keyes          | XH2.54-3P      | USB线 x1   |
| Plus主板 x1 | 避障传感器  | 有源蜂鸣器模块 | 转杜邦线母单线 |            |
|             | x1          | x1             | x2             |            |
+-------------+-------------+----------------+----------------+------------+

1.3 实验接线图

.. figure:: ./media/461301.png
   :alt: img

   img

1.4 代码解释

.. figure:: ./media/img-20241115110115.png
   :alt: Img

   Img

避障传感器检测是否有障碍物，读取避障传感器的数字信号赋予变量item，如果检测的障碍物，蜂鸣器鸣叫；否则，蜂鸣器不鸣叫。

1.5 实验代码

.. figure:: ./media/img-20241115105102.png
   :alt: Img

   Img

1.6 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，当避障传感器检测到障碍物时，避障传感器上SLED灯亮起，同时有源蜂鸣器发出声响；当避障传感器检测不到障碍物时，有源蜂鸣器停止发出声响。

.. figure:: ./media/461501.png
   :alt: img

   img

项目四十七 入侵检测报警器
~~~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

上一课实验中我们学习了使用避障传感器检测障碍物进行报警提醒。在这一实验课程中我们将人体红外热释传感器、紫色LED模块和有源蜂鸣器模块组合实验，实现人体红外热释传感器检测到附近有人经过时有源蜂鸣器响起，紫色LED快速闪烁的效果。

1.2 实验组件

+---------------------+-------------------------+---------------------+
| |img|               | |image511|              | |image512|          |
+=====================+=========================+=====================+
| ESP32 Plus主板 x1   | Keyes                   | Keyes               |
|                     | 人体红外热释传感器 x1   | 有源蜂鸣器模块 x1   |
+---------------------+-------------------------+---------------------+
| |image513|          | |image514|              | |image515|          |
+---------------------+-------------------------+---------------------+
| Keyes 紫色LED模块   | XH2.54-3P               | USB线 x1            |
| x1                  | 转杜邦线母单线 x3       |                     |
+---------------------+-------------------------+---------------------+

1.3 模块接线图

.. figure:: ./media/471301.png
   :alt: img

   img

1.4 实验代码

.. figure:: ./media/img-20241115105755.png
   :alt: Img

   Img

1.5 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，当人体红外热释传感器检测到附近有人经过时，人体红外热释传感器上的红灯灭，有源蜂鸣器发出警报，紫色LED灯快速闪烁。

.. figure:: ./media/471501.png
   :alt: img

   img

.. figure:: ./media/471502.png
   :alt: img

   img

项目四十八 模拟灭火机器人
~~~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

你知道灭火机器人吗？根据国家犯罪记录局（NCRB）的估计，从2010年至2014年，印度发生的火灾事故已造成超过120万死亡。即使为火灾事故采取了许多预防措施，但这些自然/人为灾难却还是时有发生。发生火灾时，为了营救人员和灭火，非常需要消防员等人力资源。随着技术的进步、机器人技术的发展，未来很有可能使用机器人代替消防员灭火。这将提高灭火的效率，也能保障消防员的生命安全。

在这个项目中，我们将学习如何使用ESP32主板构建一个非常简单的机器人。用火焰传感器检测火焰，并启动130电机吹灭火源。

1.2 实验组件

+----------------+----------------+---------------------+-------------------+
| |img|          | |image516|     | |image517|          | |image518|        |
+================+================+=====================+===================+
| ESP32 Plus主板 | Keyes          | Keyes 火焰传感器 x1 | XH2.54-4P         |
| x1             | 130电机模块 x1 |                     | 转杜邦线母单线 x2 |
+----------------+----------------+---------------------+-------------------+
| |image519|     | |image520|     | |image521|          |                   |
+----------------+----------------+---------------------+-------------------+
| USB线 x1       | 6节5号电池盒   | 5号电池\ **(自备)** |                   |
|                | x1             | x6                  |                   |
+----------------+----------------+---------------------+-------------------+

1.3 模块接线图

.. figure:: ./media/481301.png
   :alt: img

   img

**注意：130电机模块的GND线一定要接到图示位置，电池盒也必须接上，否则容易造成瞬时电流过大。**

1.4 实验代码

.. figure:: ./media/img-20241115111057.png
   :alt: Img

   Img

1.5 实验结果

由于风扇在转动时，所需的电流比其他传感器要大，会引起电路中电压电流波动，特别是风扇进行正反转时，电压电流波动过大，导致ESP32开发板的电压电流过低，会导致复位。

按照接线图正确接好模块后再上传代码，上传成功后，外接电源给主控板供电，打开串口监视器，设置波特率为
**9600**\ 。

串口监视器上打印出火焰的ADC值（即：模拟值），当ADC值（即：模拟值）低于
3000 时打开风扇灭火，串口监视器打印出“\ **Put out a
fire**\ ”；当ADC值高于 3000 时关闭风扇，串口监视器打印出“\ **No flame
detected**\ ”。这个ADC阈值可以根据实际情况设置。

.. figure:: ./media/img-20241118103810.png
   :alt: Img

   Img

在代码中我们设置了阈值为3000（item <
3000），阈值可以根据实际情况更改。当火焰传感器检测到ADC值（即：模拟值）低于这个阈值时，风扇将自动开启；否则关闭。风扇的驱动方式请查看课程十九。

项目四十九 旋转编码器控制RGB
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

在第三十三课的实验中我们学习了使用旋转编码器计数。在这一实验课程中我们将旋转编码器模块和共阴RGB模块组合实验，通过旋转编码器计数的结果，控制RGB模块上LED显示不同的颜色。

1.2 实验组件

+------------------------+------------------------+--------------------+
| |img|                  | |image522|             | |image523|         |
+========================+========================+====================+
| ESP32 Plus主板 x1      | Keyes 旋转编码器模块   | Keyes 共阴RGB模块  |
|                        | x1                     | x1                 |
+------------------------+------------------------+--------------------+
| |image524|             | |image525|             | |image526|         |
+------------------------+------------------------+--------------------+
| XH2.54-5P              | XH2.54-4P              | USB线 x1           |
| 转杜邦线母单线 x1      | 转杜邦线母单线 x1      |                    |
+------------------------+------------------------+--------------------+

1.3 模块接线图

.. figure:: ./media/491301.png
   :alt: img

   img

1.4 代码说明

.. figure:: ./media/img-20240606131612.png
   :alt: Img

   Img

|image527|\ 是模除运算符。代码中模除的结果是旋转编码器计数的值与3相除的余数。

1.5 实验代码

.. figure:: ./media/img-20241115113703.png
   :alt: Img

   Img

1.5 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，打开串口监视器，设置波特率为\ **9600**\ 。

任意方向(最好先顺时针方向)旋转编码器，串口监视器打印出对应余数；RGB模块上的LED显示余数对应的颜色：余数0显示红色、余数1显示绿色、余数2显示蓝色。按下旋转编码器，RGB模块上LED保持当前颜色不变。是不是很像变色龙呀！

.. figure:: ./media/img-20240611105909.png
   :alt: Img

   Img

项目五十 电位器调节灯光亮度
~~~~~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

从前面的课程实验中我们学习了设计呼吸灯和按键控制LED灯。在这一实验课程中我们尝试将呼吸灯和按键控制LED灯这两个实验现象组合起来，用可调电位器代替按键，实现利用旋转可调电位器读取到的模拟值控制紫色LED亮度的效果。可调电位器模拟值的范围是0
~ 4095；LED的亮度由PWM值控制，范围为0 ~ 255。

1.2 实验组件

+-------------+------------------+-------------+----------------+------------+
| |img|       | |image528|       | |image529|  | |image530|     | |image531| |
+=============+==================+=============+================+============+
| ESP32       | Keyes            | Keyes       | XH2.54-3P      | USB线 x1   |
| Plus主板 x1 | 旋转电位器传感器 | 紫色LED模块 | 转杜邦线母单线 |            |
|             | x1               | x1          | x2             |            |
+-------------+------------------+-------------+----------------+------------+

1.3 模块接线图

.. figure:: ./media/501301.png
   :alt: img

   img

1.4 代码说明

.. figure:: ./media/img-20241031092741.png
   :alt: Img

   Img

从指定的模拟管脚读取旋转电位器的模拟信号，模拟信号的范围为：0 ~ 4095 。

.. figure:: ./media/img-20241031101130.png
   :alt: Img

   Img

将旋转电位器的模拟信号（0 ~ 4095）映射给LED的亮度（0 ~ 255）。

1.5 实验代码

.. figure:: ./media/img-20241115114019.png
   :alt: Img

   Img

1.6 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，旋转电位器，可以调节紫色LED的亮度。

.. figure:: ./media/501501.png
   :alt: img

   img

.. figure:: ./media/501502.png
   :alt: img

   img

项目五十一 模拟智能窗户
~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

生活中能看到各种各样的智能产品，例如智能窗帘、智能窗户、智能电视、智能灯光等等。这一课我们来学习做一个智能窗帘，利用水滴水蒸气传感器模块检测雨水，然后通过设置舵机的角度来达到关窗和开窗的效果。

当然，这只是我们模拟的一个场景，主要用于加深我们的印象，达到对模块学以致用的效果。现实生活中，智能窗户并不是使用舵机来开关的。

1.2 实验组件

+-------------+-------------+---------------+----------------+------------+
| |img|       | |image532|  | |image533|    | |image534|     | |image535| |
+=============+=============+===============+================+============+
| ESP32       | Keyes       | 9G            | XH2.54-3P      | USB线 x1   |
| Plus主板 x1 | 水滴传感器  | 180度数字舵机 | 转杜邦线母单线 |            |
|             | x1          | x1            | x1             |            |
+-------------+-------------+---------------+----------------+------------+

1.3 模块接线图

.. figure:: ./media/511301.png
   :alt: img

   img

1.4 实验代码

.. figure:: ./media/img-20241115114724.png
   :alt: Img

   Img

1.5 实验结果

代码上传成功后，拔下USB线断电，按照接线图正确接好模块后再用USB线连接到计算机上电。当水滴传感器检测到一定水量，舵机转动达到关窗的效果。否则舵机转动到另一个角度，达到开窗的效果。

项目五十二 声控灯
~~~~~~~~~~~~~~~~~

1.1 项目介绍

如今智能家居发展迅速，你使用过智能家居当中的智能声控灯吗？当我们跺跺脚或者拍拍手时，智能声控灯自动亮起；当没有声音时，智能声控灯处于熄灭状态。智能声控灯上安装有声音探测传感器，这些传感器将外界声音的大小，转换成对应数值。智能声控灯设置一个临界点，当声音转换后对应的数值超过该临界点时，灯光亮起一段时间。

在这一实验课程中，我们将声音传感器和紫色LED模块组合实验，学习制作一个最简单的智能声控灯。

1.2 实验组件

+-------------+-------------+-------------+----------------+------------+
| |img|       | |image536|  | |image537|  | |image538|     | |image539| |
+=============+=============+=============+================+============+
| ESP32       | Keyes       | Keyes       | XH2.54-3P      | USB线 x1   |
| Plus主板 x1 | 声音传感器  | 紫色LED模块 | 转杜邦线母单线 |            |
|             | x1          | x1          | x2             |            |
+-------------+-------------+-------------+----------------+------------+

1.3 模块接线图

.. figure:: ./media/521301.png
   :alt: img

   img

1.4 实验代码

.. figure:: ./media/img-20241115115308.png
   :alt: Img

   Img

1.5 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，打开串口监视器，设置波特率为
**9600**\ 。

串口监视器打印出声音传感器接收到的声音对应的ADC值，接收到的声音增大时ADC值(即：模拟值)也增大，当ADC值(即：模拟值)大于400时，LED模块上LED亮起3秒，然后熄灭。

.. figure:: ./media/img-20241115115536.png
   :alt: Img

   Img

项目五十三 火焰报警
~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

生活中，火灾的危害是相当大的。这一课我们来学习制作一个火灾报警系统，它虽然简单，但却是非常具有意义的。原理很简单，利用火焰传感器检测，检测的结果控制一个有源蜂鸣器响起。

1.2 实验组件

+------------------------+------------------------+--------------------+
| |img|                  | |image540|             | |image541|         |
+========================+========================+====================+
| ESP32 Plus主板 x1      | Keyes 有源蜂鸣器模块   | Keyes 火焰传感器   |
|                        | x1                     | x1                 |
+------------------------+------------------------+--------------------+
| |image542|             | |image543|             | |image544|         |
+------------------------+------------------------+--------------------+
| XH2.54-3P              | XH2.54-4P              | USB线 x1           |
| 转杜邦线母单线 x1      | 转杜邦线母单线 x1      |                    |
+------------------------+------------------------+--------------------+

1.3 模块接线图

.. figure:: ./media/531301.png
   :alt: img

   img

1.4 实验代码

.. figure:: ./media/img-20241115131716.png
   :alt: Img

   Img

1.5 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，此时火焰传感器上的红色LED2点亮。旋转火焰传感器上的电位器，微调使传感器上红色LED1灯介于亮与不亮之间的\ **不亮**\ 状态。

.. figure:: ./media/261701.png
   :alt: img

   img

当火焰传感器检测到火焰时，有源蜂鸣器响起，否则有源蜂鸣器不响。

项目五十四 烟雾报警器
~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

在前面课程中，我们学习了如何使用有源蜂鸣器模块、学习了如何使用MQ-2
烟雾传感器检测可燃气体、还学会了如何控制四位数码管显示数字或字符。这一课程，我们尝试着将这三个实验结合在一起，制作一个烟雾报警器。制作思路是通过烟雾传感器测试出可燃气体的浓度，然后利用检测结果控制有源蜂鸣器报警、四位数码管显示检测到的值。

1.2 实验组件

+------------------+------------------+----------------+----------------+
| |img|            | |image545|       | |image546|     | |image547|     |
+==================+==================+================+================+
| ESP32 Plus主板   | Keyes            | Keyes          | Keyes          |
| x1               | 有源蜂鸣器模块   | 模拟气体传感器 | 四位数码管模块 |
|                  | x1               | x1             | x1             |
+------------------+------------------+----------------+----------------+
| |image548|       | |image549|       | |image550|     |                |
+------------------+------------------+----------------+----------------+
| XH2.54-3P        | XH2.54-4P        | USB线 x1       |                |
| 转杜邦线母单线   | 转杜邦线母单线   |                |                |
| x1               | x2               |                |                |
+------------------+------------------+----------------+----------------+

1.3 模块接线图

.. figure:: ./media/541301.png
   :alt: img

   img

1.4 代码说明

定义一个整数变量adcVal，用于存储传感器检测到烟雾的ADC值，最大为4095。然后将这个ADC值显示在四位数码管中，再设置一个阈值（阈值为1000，可以根据实际情况重新更改），达到这个阈值时有源蜂鸣器响起。

1.5 实验代码

.. figure:: ./media/img-20241115132251.png
   :alt: Img

   Img

1.6 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，当传感器检测到可燃气体浓度超标（Val值（即：模拟值）大于1000）时，有源蜂鸣器模块发出警报，四位数码管显示浓度值。

.. figure:: ./media/541501.png
   :alt: img

   img

项目五十五 酒精报警器
~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

在上一课程中，我们制作了烟雾报警器，这一课利用同样的原理，使用有源蜂鸣器模块，MQ-3
酒精传感器，四位数码管制作一个酒精报警器。通过酒精传感器测试出酒精浓度，然后利用浓度大小控制有源蜂鸣器发出警报、四位数码管显示浓度值。从而达到酒精检测仪的模拟效果。

1.2 实验组件

+------------------+------------------+---------------+----------------+
| |img|            | |image551|       | |image552|    | |image553|     |
+==================+==================+===============+================+
| ESP32 Plus主板   | Keyes            | Keyes         | Keyes          |
| x1               | 有源蜂鸣器模块   | 酒精传感器 x1 | 四位数码管模块 |
|                  | x1               |               | x1             |
+------------------+------------------+---------------+----------------+
| |image554|       | |image555|       | |image556|    |                |
+------------------+------------------+---------------+----------------+
| XH2.54-3P        | XH2.54-4P        | USB线 x1      |                |
| 转杜邦线母单线   | 转杜邦线母单线   |               |                |
| x1               | x2               |               |                |
+------------------+------------------+---------------+----------------+

1.3 模块接线图

.. figure:: ./media/551301.png
   :alt: img

   img

1.4 实验代码

.. figure:: ./media/img-20241115134231.png
   :alt: Img

   Img

1.5 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，当传感器检测到可燃气体浓度超标（Val值(即：模拟值)大于740，阈值740可调，可参考第二十八课的实验结果设置）时，有源蜂鸣器模块发出警报，四位数码管显示浓度值。

.. figure:: ./media/551501.png
   :alt: img

   img

项目五十六 超声波雷达
~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

蝙蝠飞行与获取猎物是通过回声定位的。回声定位：某些动物能通过口腔或鼻腔把从喉部产生的超声波发射出去，利用折回的声音来定向，这种空间定向的方法称为回声定位。科学家们从蝙蝠身上得到的启示发明了雷达，即雷达的天线相当于蝙蝠的嘴,而天线发出的无线电波就相当于蝙蝠的超声波,雷达接收电波的荧光屏就相当于蝙蝠的耳朵。

这一课我们就来学习制作一个简易雷达。将HC-SR04 超声波传感器、8002b功放
喇叭模块、共阴RGB模块和TM1650四位数码管模块组合实验，利用距离大小控制功放喇叭模块模块响起对应频率的声音、RGB亮起对应颜色，然后把这个距离显示在四位数码管上。这样就搭建好了一个简易的超声波雷达系统。

1.2 实验组件

+----------------------+----------------------+-----------------------+
| |img|                | |image557|           | |image558|            |
+======================+======================+=======================+
| ESP32 Plus主板 x1    | HC-SR04 超声波传感器 | Keyes 超声波转接模块  |
|                      | x1                   | x1                    |
+----------------------+----------------------+-----------------------+
| |image559|           | |image560|           | |image561|            |
+----------------------+----------------------+-----------------------+
| Keyes 8002b功放      | Keyes 共阴RGB模块 x1 | Keyes                 |
| 喇叭模块 x1          |                      | TM1650四位数码管模块  |
|                      |                      | x1                    |
+----------------------+----------------------+-----------------------+
| |image562|           | |image563|           | |image564|            |
+----------------------+----------------------+-----------------------+
| XH2.54-3P            | XH2.54-4P            | USB线 x1              |
| 转杜邦线母单线 x1    | 转杜邦线母单线 x3    |                       |
+----------------------+----------------------+-----------------------+

1.3 模块接线图

.. figure:: ./media/561301.png
   :alt: img

   img

1.4 实验代码

.. figure:: ./media/img-20241115140019.png
   :alt: Img

   Img

1.5 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电。

当超声波传感器检测到障碍物距离范围在10cm 以内时，RGB
LED灯亮红色，并将检测到障碍物的距离显示在四位数码管上。同时8002b功放
喇叭模块发出声响，起到提示的作用。

.. figure:: ./media/561501.png
   :alt: img

   img

当超声波传感器检测到障碍物距离范围在10cm ~ 20cm 以内时，RGB
LED灯亮绿色，并将检测到障碍物的距离显示在四位数码管上。

.. figure:: ./media/561502.png
   :alt: img

   img

当超声波传感器检测到障碍物距离范围在20cm 以外时，RGB
LED灯亮蓝色，并将检测到障碍物的距离显示在四位数码管上。

.. figure:: ./media/561503.png
   :alt: img

   img

项目五十七 红外遥控灯
~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

在前面实验中，我们学会了点亮或熄灭LED、学会了利用PWM调节灯光的亮度、学会了使用红外接收模块，并将接收到的遥控器对应的键值打印出来。在这一实验课程中，我们将红外接收模块和紫色LED模块组合实验，实现用红外遥控器控制紫色LED的亮灭以及控制紫色LED显示不同亮度。

当红外接收模块接收到红外遥控器的按键值时，通过设置此按键值的输出PWM值实现设置不同LED亮度的效果，控制LED的亮灭也一样。

在这一实验课程中我们使用
“①“、”②“、”③”三个按键来控制紫色LED实现弱亮、正常亮、强亮三种不同亮度。如果想要使用
“OK”
键这一个按键来控制LED亮和灭的两种情况该如何实现呢？这一实验课程我们将学习使用一个新的基本数据类型
—— boolean，来实现同一个按键控制LED亮灭的效果。

**boolean 数据类型**\ ，变量存储为 8位（1 个字节）的数值形式，\ **只能是
True 或是 False**\ 。boolean 变量的值显示为 True 或 False（在使用 Print
的时候），或者 #TRUE# 或 #FALSE#（在使用 Write #
的时候）。使用关键字True 与 False 可将 boolean
变量赋值为这两个状态中的一个。

设置代码，按下“OK”键且满足某一条件，点亮LED；按下“OK”键且满足另一条件，熄灭LED。这个条件我们用
boolean 来实现是最简单方便的，因为 boolean 只有 True 或是 False
两种状态。我们只需要设置按下“OK”键的同时 flag 为
true，即可点亮LED；同理按下“OK”键的同时 flag 为 false，熄灭LED。

1.2 实验组件

+--------------------------+-----------------------+-------------------+
| |img|                    | |image565|            | |image566|        |
+==========================+=======================+===================+
| ESP32 Plus主板 x1        | Keyes 红外接收模块 x1 | Keyes 紫色LED模块 |
|                          |                       | x1                |
+--------------------------+-----------------------+-------------------+
| |image567|               | |image568|            | |image569|        |
+--------------------------+-----------------------+-------------------+
| Keyes 遥控器 x1          | XH2.54-3P             | USB线 x1          |
|                          | 转杜邦线母单线 x2     |                   |
+--------------------------+-----------------------+-------------------+

1.3 模块接线图

.. figure:: ./media/img-20241115151544.png
   :alt: Img

   Img

1.4 代码说明

.. figure:: ./media/img-20241115150350.png
   :alt: Img

   Img

设置一个变量 flag 为 boolean 数据类型，数值为 true 或 false 。

.. figure:: ./media/img-20241115150436.png
   :alt: Img

   Img

boolean 数据类型的 flag 赋值为 false ，以便再次按下
“OK”键时满足熄灭LED的条件。

1.5 实验代码

.. figure:: ./media/img-20241115150226.png
   :alt: Img

   Img

1.6 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，打开串口监视器，设置波特率为
**9600**\ 。

第一次按下红外遥控器上的 “\ **OK**\ ”
键，紫色LED被点亮，实现开灯的效果。串口监视器打印出按下的按键值和LED灯的亮灭情况：“\ **FF02FD
led on**\ ” 。

再次按下红外遥控器上的 “\ **OK**\ ”
键，紫色LED熄灭，实现关灯的效果。串口监视器打印出按下的按键值和LED灯的亮灭情况：“\ **FF02FD
led off**\ ” 。

按下红外遥控器上的 “\ **①**\ ”
键，紫色LED被设置为弱亮。串口监视器打印出按下的按键值和LED灯的亮灭情况：“\ **FF6897
weak light**\ ” 。

按下红外遥控器上的 “\ **②**\ ”
键，紫色LED被设置为正常亮。串口监视器打印出按下的按键值和LED灯的亮灭情况：“\ **FF9867
normal light**\ ” 。

按下红外遥控器上的 “\ **③**\ ”
键，紫色LED被设置为强亮。串口监视器打印出按下的按键值和LED灯的亮灭情况：“\ **FFB04F
strong light**\ ” 。

.. figure:: ./media/img-20241115152001.png
   :alt: Img

   Img

项目五十八 模拟温度散热装置
~~~~~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

生活中，我们的电脑或者电路板芯片等器件会由于工作时间过长或者功耗过大的问题而发热严重，所以我们常常需要一个散热装置。

在前面的课程我们学习了如何使用温度传感器和电机模块，这一课我们学习把它们结合起来做成一个智能散热装置。当检测到环境温度高于某一个值时的时候，电机开启，从而达到降低环境温度、散热效果。再把此刻的温度值显示在四位数码管中。

1.2 实验组件

+--------------------+-----------------------+------------------------+
| |img|              | |image570|            | |image571|             |
+====================+=======================+========================+
| ESP32 Plus主板 x1  | Keyes 130电机模块 x1  | Keyes                  |
|                    |                       | TM1650四位数码管模块   |
|                    |                       | x1                     |
+--------------------+-----------------------+------------------------+
| |image572|         | |image573|            | |image574|             |
+--------------------+-----------------------+------------------------+
| Keyes              | XH2.54-3P             | XH2.54-4P              |
| 18B20温度传感器 x1 | 转杜邦线母单线 x1     | 转杜邦线母单线 x2      |
+--------------------+-----------------------+------------------------+
| |image575|         | |image576|            | |image577|             |
+--------------------+-----------------------+------------------------+
| USB线 x1           | 6节5号电池盒 x1       | 5号电池\ **(自备)** x6 |
+--------------------+-----------------------+------------------------+

1.3 模块接线图

.. figure:: ./media/img-20241115161223.png
   :alt: Img

   Img

1.4 实验代码

.. figure:: ./media/img-20241115155918.png
   :alt: Img

   Img

1.5 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，可以在四位数码管模块上看到当前温度值，当温度超过代码中设定的30°C时，风扇转动，散热。

.. figure:: ./media/581501.png
   :alt: img

   img

1.6 代码说明

变量的设置与存储检测值，与前面我们学习的一样，也是通过设置一个温度的阈值（阈值30可以根据实际情况重新更改），超过这个阈值进行控制电机转动，四位数码管显示温度值。

项目五十九 智能门禁系统
~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

生活中，很多门禁系统都是使用射频模块进行开锁的，既方便又安全。这一课，学习利用RFID522刷卡模块和舵机设置一个智能门禁系统。

原理很简单，使用RFID522刷卡模块感应，使用IC卡或者钥匙卡来开锁，舵机的作用即门禁锁。

1.2 实验组件

+----------------+----------------+-------------------+--------------+
| |img|          | |image578|     | |image579|        | |image580|   |
+================+================+===================+==============+
| ESP32 Plus主板 | Keyes          | 钥匙扣 x1         | USB线 x1     |
| x1             | RFID刷卡模块   |                   |              |
|                | x1             |                   |              |
+----------------+----------------+-------------------+--------------+
| |image581|     | |image582|     | |image583|        |              |
+----------------+----------------+-------------------+--------------+
| IC卡 x1        | 9G             | XH2.54-4P         |              |
|                | 180度数字舵机  | 转杜邦线母单线 x1 |              |
|                | x1             |                   |              |
+----------------+----------------+-------------------+--------------+

1.3 模块接线图

.. figure:: ./media/591301.png
   :alt: img

   img

1.4 实验代码

**特别注意：对于不同的IC卡和钥匙扣，其读取的IC卡和钥匙扣的UID码值可能都不一样。在代码运行前，需要将你自己的IC卡和钥匙扣的UID码值替换程序代码中的UID码（UID码在第44课完成实验可以得知），替换位置如下图所示。**

.. figure:: ./media/img-20241115162027.png
   :alt: Img

   Img

.. figure:: ./media/img-20241115162002.png
   :alt: Img

   Img

1.5 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，打开串口监视器，波特率设置为
**115200**\ 。使用正确的IC卡或者钥匙扣刷卡时，串口监视器打印出卡的UID码并提示“\ **open
the door!**\ ”，同时舵机转动到相应的角度模拟开门的效果。

.. figure:: ./media/img-20241031142309.png
   :alt: Img

   Img

1.6 代码说明

在前面的课程中，使用RFID刷卡模块已经测试出来了IC卡和钥匙扣的UID码。这一课利用对应的UID码信息来控制舵机转动对应的角度，模拟开门的效果。

项目六十 Bluetooth
~~~~~~~~~~~~~~~~~~

1.1 项目介绍

ESP32是一系列低成本，低功耗的单片机微控制器，集成了Wi-Fi和双模蓝牙。ESP32
可作为独立系统运行应用程序或作为主机 MCU 的从设备，通过 SPI / SDIO 或
I2C / UART 接口提供 Wi-Fi 和蓝牙功能。

蓝牙是一种短距离通信系统，其简单的数据传输有两种模式：主设备工作模式和从设备工作模式。蓝牙技术规定每一对设备之间进行蓝牙通讯时，必须一个为\ **主端**\ ，另一个为\ **从端**\ ，才能进行通信。通信时，必须由主端进行查找，发起配对，建链成功后，双方即可收发数据。

- **主设备工作模式**
  ：主设备是能够搜索并\ **主动建立连接**\ 的一方，从扫描状态转化而来的。其可以和一个或多个从设备进行连接通信，它会\ **定期的扫描**\ 周围的广播状态设备发送的广播信息，可以对周围设备进行搜索并选择所需要连接的从设备进行配对连接，\ **建立通信链路成功后，主从双方就可以发送接收数据**\ 。例如智能手机，数据传输中做主机的蓝牙模块。

  **一个蓝牙设备以主模式发起连接时，需要知道从设备的地址，配对密码等信息，配对完成后，可直接连接。**\ 同时主设备可以\ **设置默认连接**\ 从设备的地址，这样主设备模块上电会自动搜索该地址的从设备并且进行连接。并且\ **支持白名单功能**\ ，用户只需要把需要连接的设备的地址写入白名单中，模块搜索到符合白名单的设备时就进行连接。主从透传协议相同时，用户不需要关注串口数据与无线数据包之间的数据转换过程，只需通过简单的参数设置，即可实现主设备串口与从设备串口之间的数据透传。

  为保证连接的稳定性，预防断电、信号等异常问题导致模块之间断开连接，可以开启断线重连功能，当异常干扰问题消失，模块工作环境恢复正常，主设备会自动搜索刚刚断连的从设备，尽可能减少数据的丢失，提高系统稳定性。

- **从设备工作模式**
  ：从设备模式是从广播者模式转化而来的，未被连接的从设备首先进入广播状态，\ **等待被主机搜索**\ 。当从设备被主机扫描到并\ **建立连接后**\ ，就可以和主机设备\ **进行数据的收发**\ 。从设备\ **不能主动建立连接**\ 。从设备模式的蓝牙模块是可以被连接的，定期的和主机进行连接和数据传输，在数据传输过程中作从机。例如蓝牙手表手环，蓝牙鼠标等工作在从设备模式。

一对一应用中从设备可以设为两种类型。一是静默状态，即只能与指定的主设备通信，不被别的蓝牙设备查找；二是开发状态，既可被指定主设备查找，也可以被别的蓝牙设备查找后建立连接。

当手机与ESP32进行数据交换时，\ **手机通常处于主设备工作模式，ESP32为从设备工作模式。**

这一实验课程我们先学习利用ESP32的蓝牙功能与手机进行简单的数据传输，然后学习用蓝牙控制LED灯的亮灭。

1.2 实验组件

在本课程中，我们需要使用一个名为 “**串行蓝牙终端**”
的蓝牙应用程序来协助实验。

================= ==========
|img|             |image584|
================= ==========
ESP32 Plus主板 x1 USB线 x1
================= ==========

1.3 实验接线图

.. figure:: ./media/011301.png
   :alt: img

   img

1.4 实验代码

**提醒：** 此代码从 “ |image585| ” 一起拖出，将 “ **ESP32BT** ” 改成 “
**ESP32test** ” 即可。

.. figure:: ./media/img-20241101140501.png
   :alt: Img

   Img

1.5 实验结果

代码上传成功后，打开串口监视器，设置波特率为 **115200**\ 。

**注意：如果打开串口监视器且设置好波特率，串口监视器窗口还是没有显示任何信息，可以尝试按下ESP32的RESET按键。**

.. figure:: ./media/RESET.jpg
   :alt: RESET

   RESET

确保你的手机已经打开蓝牙且已安装 “\ **串口蓝牙终端**\ ”
应用程序。搜索附近的蓝牙设备，选择 “\ **ESP32test**\ ” 进行连接。

.. figure:: ./media/601302.png
   :alt: img

   img

出现蓝牙配对请求，选择“\ **配对**\ ”。

.. figure:: ./media/601317.png
   :alt: img

   img

.. figure:: ./media/601303.png
   :alt: img

   img

配对成功。

.. figure:: ./media/601304.png
   :alt: img

   img

打开“串口蓝牙终端”应用程序，单击图示箭头所指地方。选择 “**Devices**”。

.. figure:: ./media/601305.png
   :alt: img

   img

.. figure:: ./media/601306.png
   :alt: img

   img

选择经典蓝牙模式下的 “**ESP32test**”。

.. figure:: ./media/601307.png
   :alt: img

   img

出现连接的成功提示，现在ESP32与你的手机已经建链成功了，可以在ESP32与你的手机之间传输数据了。

.. figure:: ./media/601308.png
   :alt: img

   img

先来尝试一下主设备传输数据到从设备，在串口监视器中的文本框输入“Hi!”，当手机收到它的时候，给你的手机回复“Hi!”；

.. figure:: ./media/img-20241101135753.png
   :alt: Img

   Img

.. figure:: ./media/601312.png
   :alt: img

   img

接下来尝试一下从设备传输数据到主设备，手机发送“Hello!”，当电脑收到它的时候，给你的电脑回复“Hello!”。

.. figure:: ./media/601309.png
   :alt: img

   img

.. figure:: ./media/img-202411011357530.png
   :alt: Img

   Img

项目六十一 WiFi Station Mode
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

ESP32有3种不同的WiFi工作模式：

- Station模式（作为WiFi设备主动连接路由器，也叫做WiFi Client）
- AP模式（作为一个Access Point，让其他WiFi设备来连接）即WiFi热点
- Station+AP共存模式（ESP32连接路由器的同时自身也是一个热点供其他WiFi设备来连接）

所有WiFi编程项目在使用WiFi前必须配置WiFi运行模式，否则无法使用WiFi。在这节实验课程中，我们将学习使用ESP32的WiFi
Station模式。

**Station 模式：**

当ESP32选择Station模式时，它作为一个WiFi客户端。它可以连接路由器网络，通过WiFi连接与路由器上的其他设备通信。如下图所示，PC和路由器已经连接，ESP32如果要与PC通信，需要将PC和路由器连接起来。

.. figure:: ./media/611101.png
   :alt: img

   img

1.2 实验组件

================= ==========
|img|             |image586|
================= ==========
ESP32 Plus主板 x1 USB线 x1
================= ==========

1.3 模块接线图

.. figure:: ./media/011301.png
   :alt: img

   img

1.4 实验代码

特别提醒：路由器的SSID是无线网的无线名称。SSID是 ServiceSetldentifier
的缩写，意思是:服务集标识。SSID技术可以将一个无线局域网分为几个需要不同身份验证的子网络，每一个子网络都需要独立的身份验证，只有通过身份验证的用户才可以进入相应的子网络，防止未被授权的用户进入本网络。所以在代码运行之前，需要配置
WiFi 名称和密码，将其修改为你自己使用的WiFi 名称和密码。。

.. figure:: ./media/img-20241105083150.png
   :alt: Img

   Img

你可以打开我们提供的代码，也可以自己编写代码，其如下：

1. 从 “\ |Img|\ ” 拖出 “\ |image587|\ ”。

2. 从 “ |image588|\ ” 拖出 “ |image589| ” 放入 “ |image590| ”
   ，设置波特率为 115200 。

3. 从 “\ |image591|\ ” 拖出 “\ |image592|\ ” 。

完整代码：

.. figure:: ./media/img-20241105090857.png
   :alt: Img

   Img

1.5 实验结果

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，打开串口监视器，设置波特率为
**115200**\ 。

开始连接，串口监视器打印出“\ **Connecting to ChinaNet_2.4G**\ ”
提示正在连接到路由器的SSID，当ESP32成功连接到路由器的 SSID
时，串行监视器将打印出 WiFi 分配给ESP32的\ **IP地址**\ 。

.. figure:: ./media/img-20241105090946.png
   :alt: Img

   Img

**注意：如果打开串口监视器且设置好波特率，串口监视器窗口还是没有显示任何信息，可以尝试按下ESP32的RESET按键。**

.. figure:: ./media/RESET.jpg
   :alt: RESET

   RESET

项目六十二 WiFi智能家居
~~~~~~~~~~~~~~~~~~~~~~~

1.1 项目介绍

在前面的实验中，我们已经了解了ESP32的WiFi Station、WiFi AP和WiFi
AP+Station三种模式。在本课程实验中，我们将利用ESP32的WiFi
Station模式通过APP连接WIFI来控制多个传感器/模块工作，模拟实现WiFi控制智能家居的效果。

1.2 实验组件

+----------------+---------------+---------------------+-------------------------------+
| |img|          | |image593|    | |image594|          | |image595|                    |
+================+===============+=====================+===============================+
| ESP32 Plus主板 | Keyes         | Keyes               | Keyes XHT11 温度传感器 x1     |
| x1             | 130电机模块   | 单路5V继电器模块 x1 |                               |
|                | x1            |                     |                               |
+----------------+---------------+---------------------+-------------------------------+
| |image596|     | |image597|    | |image598|          | |image599|                    |
+----------------+---------------+---------------------+-------------------------------+
| HC-SR04        | 9G            | XH2.54-3P           | XH2.54-4P 转杜邦线母单线 x2   |
| 超声波传感器   | 180度数字舵机 | 转杜邦线母单线 x2   |                               |
| x1             | x1            |                     |                               |
+----------------+---------------+---------------------+-------------------------------+
| |image600|     | |image601|    | |image602|          | |image603|                    |
+----------------+---------------+---------------------+-------------------------------+
| USB线 x1       | 6节5号电池盒  | 5号电池\ **(自备)** | 智能手机/平板电脑\ **(自备)** |
|                | x1            | x6                  | x1                            |
+----------------+---------------+---------------------+-------------------------------+

1.3 模块接线图

====== ========= ================== =========
继电器 ESP32主板 XHT11 温湿度传感器 ESP32主板
====== ========= ================== =========
G      G         G                  G
V      5V        V                  5V
S      IO4       S                  IO27
====== ========= ================== =========

============ ========= ============ =========
超声波传感器 ESP32主板 130 风扇模块 ESP32主板
============ ========= ============ =========
Vcc          5V        G            G
Trig         IO12      V            5V
Echo         IO13      IN+          IO23
Gnd          G         IN-          IO5
============ ========= ============ =========

====== =========
舵机   ESP32主板
====== =========
红色线 5V
棕色线 G
橙色线 IO32
====== =========

.. figure:: ./media/651301.png
   :alt: img

   img

1.4 安装APP

**安卓系统设备（手机/平板）APP：**

我们提供了Android APP 的安装包：在教程开头即可下载

.. figure:: ./media/image-20250628110048016.png
   :alt: image-20250628110048016

   image-20250628110048016

将Android APP 的安装包中的 keyes wifi.apk
文件使用数据线复制到安卓系统手机或平板电脑上，点击 **keyes wifi.apk**
文件进入安装页面。

.. figure:: ./media/651402.png
   :alt: img

   img

点击 “\ **ALLOW**\ ” 按钮。

.. figure:: ./media/651403.png
   :alt: img

   img

然后点击 “\ **INSTALL**\ ” 按钮。

.. figure:: ./media/651404.png
   :alt: img

   img

稍等片刻，安装完成后点击 “\ **OPEN**\ ” 就可以进入APP界面。

**IOS系统设备（手机/iPad）APP**

打开APP Store

.. figure:: ./media/651405.png
   :alt: img

   img

在搜索框输入 keyes link ，点击搜索，出现下载界面，点击\ |image604|,下载
keyes link 。

1.5 实验代码

特别注意：需要先将项目代码 |image605| 中的用户Wifi名称（SSID
名称）和用户Wifi密码（PASSWD 密码）改成你们自己的Wifi名称和Wifi密码。

.. figure:: ./media/img-20241115172426.png
   :alt: Img

   Img

1.6 实验结果

特别注意：\ 确保计算机网络，手机/平板的网络，ESP32主板，路由器，代码中输入你自己的WiFi名称和密码都必须是在同一个局域网（WiFi）下。

.. figure:: ./media/img-20241118093524.png
   :alt: Img

   Img

按照接线图正确接好模块后再上传代码，上传成功后，给主控板供电，打开串口监视器，设置波特率为
**115200**\ ，串口显示IP信息如下图所示。

.. figure:: ./media/img-20241105090946.png
   :alt: Img

   Img

**注意：如果打开串口监视器且设置好波特率，串口监视器窗口还是没有显示任何信息，可以尝试按下ESP32的RESET按键。**

.. figure:: ./media/RESET.jpg
   :alt: img

   img

然后打开WiFi APP，在WIFI按钮前面的文本框中输入检测到的WIFI
IP地址（例如，上面串口监视器检测到的IP地址：192.168.1.136），接着点击WIFI按钮来连接WiFi。（WiFi的IP地址有时候会改变，如果原来的IP地址不行，需要重新检测WiFi的IP地址）

.. figure:: ./media/b42be62a79b4b9639584699eb6bd1e06.png
   :alt: Img

   Img

+---------------+----------+---------------------------------------------------+
| 按钮          | 点击     | 效果                                              |
+===============+==========+===================================================+
| |image606|    | 首次点击 | 继电器打开，APP上显示 “turn on the                |
|               |          | relay”，模块上的指示灯点亮。                      |
+---------------+----------+---------------------------------------------------+
| |image607|    | 再次点击 | 继电器关闭，APP上显示 “turn off the relay”        |
|               |          | ，模块上指示灯灭。                                |
+---------------+----------+---------------------------------------------------+
| |image608|    | 首次点击 | 舵机转动180°，APP上显示 “Bring the steering gear  |
|               |          | over 180”。                                       |
+---------------+----------+---------------------------------------------------+
| |image609|    | 再次点击 | 舵机转动0°，APP上显示“Bring the steering gear     |
|               |          | over 0” 。                                        |
+---------------+----------+---------------------------------------------------+
| |image610|    | 首次点击 | 电机（带小风扇叶)转动，APP 上显示 “esp32 already  |
|               |          | turn on the fans”。                               |
+---------------+----------+---------------------------------------------------+
| |image611|    | 再次点击 | 关闭电机，APP 上显示 “esp32 already turn off the  |
|               |          | fans” 。                                          |
+---------------+----------+---------------------------------------------------+
| |image612|    | 首次点击 | 超声波传感器测距，在超声波传感器前放一个物体，APP |
|               |          | 上显示 “Distance(cm) = X” ，X代表实测距离。       |
+---------------+----------+---------------------------------------------------+
| |image613|    | 再次点击 | 关闭超声波传感器测距功能，APP 上显示 “turn off    |
|               |          | the ultrasonic” 。                                |
+---------------+----------+---------------------------------------------------+
| |image614|    | 首次点击 | 温湿度传感器测量环境中的温度，APP上显示 “         |
|               |          | Temperature(°C) = X”                              |
|               |          | ，X代表温度值，说明此时的环境温度为X°C 。         |
+---------------+----------+---------------------------------------------------+
| |image615|    | 再次点击 | 关闭温湿度传感器，APP上显示 “turn off the         |
|               |          | temperature”。                                    |
+---------------+----------+---------------------------------------------------+
| |image616|    | 首次点击 | 温湿度传感器测量环境中的湿度，APP上显示           |
|               |          | ”Humidity(%) = X“                                 |
|               |          | ，X代表湿度值，说明此时的环境湿度为X% 。          |
+---------------+----------+---------------------------------------------------+
| |image617|    | 再次点击 | 关闭温湿度传感器，APP上显示 ”trun off the         |
|               |          | humidity” 。                                      |
+---------------+----------+---------------------------------------------------+

--------------

.. |image1| image:: ./media/image-20250610134847834-1749613529493-1.png
.. |image2| image:: ./media/image-20250610135141637-1749613529493-5.png
.. |image3| image:: ./media/image-20250610135733798-1749613529493-6.png
.. |image4| image:: ./media/image-20250610141058386-1749613529493-3.png
.. |image5| image:: ./media/image-20250610144118850-1749613529494-11.png
.. |image6| image:: ./media/image-20250610144636311-1749613529493-4.png
.. |image7| image:: ./media/image-20250610150044409-1749613529493-7.png
.. |image8| image:: ./media/image-20250610150604640-1749613529494-10.png
.. |image9| image:: ./media/image-20250610151244614-1749613529494-9.png
.. |image10| image:: ./media/image-20250610151446877-1749613529494-8.png
.. |image11| image:: ./media/image-20250623091441563.png
.. |img| image:: ./media/KS5016.png
.. |image12| image:: ./media/USB.jpg
.. |Img| image:: ./media/img-20241023140031.png
.. |image13| image:: ./media/img-20241023140106.png
.. |image14| image:: ./media/img-20241023140218.png
.. |image15| image:: ./media/img-20241023140243.png
.. |image16| image:: ./media/img-20241023140106.png
.. |image17| image:: ./media/img-20241023140218.png
.. |image18| image:: ./media/img-20241023140328.png
.. |image19| image:: ./media/img-20241023140400.png
.. |image20| image:: ./media/img-20241023140426.png
.. |image21| image:: ./media/img-20241023140328.png
.. |image22| image:: ./media/img-20241023140625.png
.. |image23| image:: ./media/img-20241023135146.png
.. |image24| image:: ./media/img-20241023142105.png
.. |image25| image:: ./media/KE4001.png
.. |image26| image:: ./media/3pin.jpg
.. |image27| image:: ./media/USB.jpg
.. |image28| image:: ./media/img-20241023140106.png
.. |image29| image:: ./media/img-20241024131848.png
.. |image30| image:: ./media/img-20241029163433.png
.. |image31| image:: ./media/img-20241023140106.png
.. |image32| image:: ./media/img-20241024131848.png
.. |image33| image:: ./media/img-20241029163433.png
.. |image34| image:: ./media/img-20241023140625.png
.. |image35| image:: ./media/img-20241029163924.png
.. |image36| image:: ./media/img-20241023135146.png
.. |image37| image:: ./media/KE4008.png
.. |image38| image:: ./media/5pin.jpg
.. |image39| image:: ./media/USB.jpg
.. |image40| image:: ./media/img-20241023140106.png
.. |image41| image:: ./media/img-20241024131848.png
.. |image42| image:: ./media/img-20241029171029.png
.. |image43| image:: ./media/img-20241029171054.png
.. |image44| image:: ./media/img-20241029171118.png
.. |image45| image:: ./media/img-20241023140106.png
.. |image46| image:: ./media/img-20241029171205.png
.. |image47| image:: ./media/img-20241023140625.png
.. |image48| image:: ./media/img-20241029171205.png
.. |image49| image:: ./media/img-20241029165415.png
.. |image50| image:: ./media/img-20241029171728.png
.. |image51| image:: ./media/img-20241029171832.png
.. |image52| image:: ./media/img-20241029171728.png
.. |image53| image:: ./media/img-20241029171839.png
.. |image54| image:: ./media/img-20241029172025.png
.. |image55| image:: ./media/img-20241029171728.png
.. |image56| image:: ./media/KE4043.png
.. |image57| image:: ./media/3pin.jpg
.. |image58| image:: ./media/USB.jpg
.. |image59| image:: ./media/img-20241023140106.png
.. |image60| image:: ./media/img-20241024131848.png
.. |image61| image:: ./media/img-20241113155203.png
.. |image62| image:: ./media/img-20241023140106.png
.. |image63| image:: ./media/img-20241024131848.png
.. |image64| image:: ./media/img-20241113155203.png
.. |image65| image:: ./media/img-20241023140625.png
.. |image66| image:: ./media/img-20241113155355.png
.. |image67| image:: ./media/KE4001.png
.. |image68| image:: ./media/3pin.jpg
.. |image69| image:: ./media/USB.jpg
.. |image70| image:: ./media/img-20241023140106.png
.. |image71| image:: ./media/img-20241024131848.png
.. |image72| image:: ./media/img-20241029165252.png
.. |image73| image:: ./media/img-20241023140106.png
.. |image74| image:: ./media/img-20241029165415.png
.. |image75| image:: ./media/img-20241024131848.png
.. |image76| image:: ./media/img-20241029165252.png
.. |image77| image:: ./media/img-20241029165529.png
.. |image78| image:: ./media/img-20241024133608.png
.. |image79| image:: ./media/img-20241024133651.png
.. |image80| image:: ./media/img-20241023140625.png
.. |image81| image:: ./media/img-20241029165529.png
.. |image82| image:: ./media/img-20241029165711.png
.. |image83| image:: ./media/KE4074.png
.. |image84| image:: ./media/4pin.jpg
.. |image85| image:: ./media/USB.jpg
.. |image86| image:: ./media/img-20241023140106.png
.. |image87| image:: ./media/img-20241024131848.png
.. |image88| image:: ./media/img-20241101090120.png
.. |image89| image:: ./media/img-20241023140106.png
.. |image90| image:: ./media/img-20241029165415.png
.. |image91| image:: ./media/img-20241113162646.png
.. |image92| image:: ./media/img-20241029174446.png
.. |image93| image:: ./media/img-20241024133608.png
.. |image94| image:: ./media/img-20241024133651.png
.. |image95| image:: ./media/img-20241024143857.png
.. |image96| image:: ./media/img-20241029174654.png
.. |image97| image:: ./media/img-20241029174845.png
.. |image98| image:: ./media/img-20241029175119.png
.. |image99| image:: ./media/KE4012.png
.. |image100| image:: ./media/3pin.jpg
.. |image101| image:: ./media/USB.jpg
.. |image102| image:: ./media/img-20241023140106.png
.. |image103| image:: ./media/img-20241023140218.png
.. |image104| image:: ./media/img-20241023140243.png
.. |image105| image:: ./media/img-20241023140106.png
.. |image106| image:: ./media/img-20241024133608.png
.. |image107| image:: ./media/img-20241028131724.png
.. |image108| image:: ./media/img-20241023140106.png
.. |image109| image:: ./media/img-20241024143857.png
.. |image110| image:: ./media/img-20241028132058.png
.. |image111| image:: ./media/img-20241028131724.png
.. |image112| image:: ./media/img-20241024133608.png
.. |image113| image:: ./media/img-20241030141123.png
.. |image114| image:: ./media/img-20241029163044.png
.. |image115| image:: ./media/img-20241113165040.png
.. |image116| image:: ./media/img-20241023140218.png
.. |image117| image:: ./media/img-20241030141723.png
.. |image118| image:: ./media/img-20241024133608.png
.. |image119| image:: ./media/img-20241030141816.png
.. |image120| image:: ./media/img-20241028135641.png
.. |image121| image:: ./media/img-20241113165644.png
.. |image122| image:: ./media/img-20241113165735.png
.. |image123| image:: ./media/img-20241113165824.png
.. |image124| image:: ./media/img-20241113165644.png
.. |image125| image:: ./media/img-20241028132537.png
.. |image126| image:: ./media/img-20241028135823.png
.. |image127| image:: ./media/img-20241028135641.png
.. |image128| image:: ./media/img-20241024133608.png
.. |image129| image:: ./media/img-20241030141816.png
.. |image130| image:: ./media/img-20241028132016.png
.. |image131| image:: ./media/img-20241028132058.png
.. |image132| image:: ./media/img-20241023140218.png
.. |image133| image:: ./media/img-20241029151254.png
.. |image134| image:: ./media/img-20241113170215.png
.. |image135| image:: ./media/img-20241029152415.png
.. |image136| image:: ./media/img-20241029152450.png
.. |image137| image:: ./media/img-20241113170352.png
.. |image138| image:: ./media/img-20241113170657.png
.. |image139| image:: ./media/KE4013.png
.. |image140| image:: ./media/3pin.jpg
.. |image141| image:: ./media/USB.jpg
.. |image142| image:: ./media/KE4019.png
.. |image143| image:: ./media/3pin.jpg
.. |image144| image:: ./media/USB.jpg
.. |image145| image:: ./media/KE4024.png
.. |image146| image:: ./media/3pin.jpg
.. |image147| image:: ./media/USB.jpg
.. |image148| image:: ./media/KE4014.png
.. |image149| image:: ./media/3pin.jpg
.. |image150| image:: ./media/USB.jpg
.. |image151| image:: ./media/img-20241023140106.png
.. |image152| image:: ./media/img-20241023140218.png
.. |image153| image:: ./media/img-20241023140243.png
.. |image154| image:: ./media/img-20241023140106.png
.. |image155| image:: ./media/img-20241024133608.png
.. |image156| image:: ./media/img-20241028131724.png
.. |image157| image:: ./media/img-20241023140106.png
.. |image158| image:: ./media/img-20241024143857.png
.. |image159| image:: ./media/img-20241028132058.png
.. |image160| image:: ./media/img-20241028131724.png
.. |image161| image:: ./media/img-20241024133608.png
.. |image162| image:: ./media/img-20241114082545.png
.. |image163| image:: ./media/img-20241029163044.png
.. |image164| image:: ./media/img-20241114082449.png
.. |image165| image:: ./media/img-20241028135641.png
.. |image166| image:: ./media/img-20241028132537.png
.. |image167| image:: ./media/img-20241028135823.png
.. |image168| image:: ./media/img-20241028135641.png
.. |image169| image:: ./media/img-20241024133608.png
.. |image170| image:: ./media/img-20241114082745.png
.. |image171| image:: ./media/img-20241114082830.png
.. |image172| image:: ./media/img-20241114083100.png
.. |image173| image:: ./media/img-20241114083100.png
.. |image174| image:: ./media/img-20241114082830.png
.. |image175| image:: ./media/img-20241028132058.png
.. |image176| image:: ./media/img-20241024133608.png
.. |image177| image:: ./media/img-20241114083712.png
.. |image178| image:: ./media/img-20241114083522.png
.. |image179| image:: ./media/img-20241024143857.png
.. |image180| image:: ./media/img-20241114083835.png
.. |image181| image:: ./media/img-20241114083712.png
.. |image182| image:: ./media/img-20241024133608.png
.. |image183| image:: ./media/img-20241114083953.png
.. |image184| image:: ./media/img-20241114083835.png
.. |image185| image:: ./media/img-20241023140218.png
.. |image186| image:: ./media/img-20241029151254.png
.. |image187| image:: ./media/img-20241114083522.png
.. |image188| image:: ./media/img-20241114083953.png
.. |image189| image:: ./media/img-20241029151254.png
.. |image190| image:: ./media/img-20241024133608.png
.. |image191| image:: ./media/img-20241114084422.png
.. |image192| image:: ./media/img-20241114084443.png
.. |image193| image:: ./media/img-20241114083522.png
.. |image194| image:: ./media/KE4017.png
.. |image195| image:: ./media/3pin.jpg
.. |image196| image:: ./media/USB.jpg
.. |image197| image:: ./media/121702.png
.. |image198| image:: ./media/img-20241114091328.png
.. |image199| image:: ./media/KE4023.png
.. |image200| image:: ./media/3pin.jpg
.. |image201| image:: ./media/USB.jpg
.. |image202| image:: ./media/KE4016.png
.. |image203| image:: ./media/3pin.jpg
.. |image204| image:: ./media/USB.jpg
.. |image205| image:: ./media/KE4015.png
.. |image206| image:: ./media/3pin.jpg
.. |image207| image:: ./media/USB.jpg
.. |image208| image:: ./media/KE4018.png
.. |image209| image:: ./media/3pin.jpg
.. |image210| image:: ./media/USB.jpg
.. |image211| image:: ./media/KE4010.png
.. |image212| image:: ./media/3pin.jpg
.. |image213| image:: ./media/USB.jpg
.. |image214| image:: ./media/KE4067.png
.. |image215| image:: ./media/3pin.jpg
.. |image216| image:: ./media/USB.jpg
.. |image217| image:: ./media/img-20241023140106.png
.. |image218| image:: ./media/img-20241024131848.png
.. |image219| image:: ./media/img-20241030113019.png
.. |image220| image:: ./media/img-20241023140106.png
.. |image221| image:: ./media/img-20241024131848.png
.. |image222| image:: ./media/img-20241118102224.png
.. |image223| image:: ./media/img-20241030113019.png
.. |image224| image:: ./media/img-20241023140625.png
.. |image225| image:: ./media/img-20241118102331.png
.. |image226| image:: ./media/KE4038.png
.. |image227| image:: ./media/4pin.jpg
.. |image228| image:: ./media/USB.jpg
.. |image229| image:: ./media/OR0266.png
.. |image230| image:: ./media/6.png
.. |image231| image:: ./media/img-20241023140106.png
.. |image232| image:: ./media/img-20241030153108.png
.. |image233| image:: ./media/img-20241030153046.png
.. |image234| image:: ./media/img-20241023140106.png
.. |image235| image:: ./media/img-20241030153108.png
.. |image236| image:: ./media/img-20241030153046.png
.. |image237| image:: ./media/img-20241023140625.png
.. |image238| image:: ./media/img-20241114095941.png
.. |image239| image:: ./media/img-20241114100139.png
.. |image240| image:: ./media/KE4030.png
.. |image241| image:: ./media/3pin.jpg
.. |image242| image:: ./media/USB.jpg
.. |image243| image:: ./media/img-20241023140106.png
.. |image244| image:: ./media/img-20241023140218.png
.. |image245| image:: ./media/img-20241023140243.png
.. |image246| image:: ./media/img-20241023140106.png
.. |image247| image:: ./media/img-20241023140218.png
.. |image248| image:: ./media/img-20241029151254.png
.. |image249| image:: ./media/img-20241029151343.png
.. |image250| image:: ./media/img-20241031095329.png
.. |image251| image:: ./media/img-20241029134512.png
.. |image252| image:: ./media/KE4048.png
.. |image253| image:: ./media/3pin.jpg
.. |image254| image:: ./media/USB.jpg
.. |image255| image:: ./media/KE4027.png
.. |image256| image:: ./media/3pin.jpg
.. |image257| image:: ./media/USB.jpg
.. |image258| image:: ./media/KE4026.png
.. |image259| image:: ./media/3pin.jpg
.. |image260| image:: ./media/USB.jpg
.. |image261| image:: ./media/KE4025.png
.. |image262| image:: ./media/3pin.jpg
.. |image263| image:: ./media/USB.jpg
.. |image264| image:: ./media/img-20241023140106.png
.. |image265| image:: ./media/img-20241023140218.png
.. |image266| image:: ./media/img-20241023140243.png
.. |image267| image:: ./media/img-20241023140106.png
.. |image268| image:: ./media/img-20241023140218.png
.. |image269| image:: ./media/img-20241029130617.png
.. |image270| image:: ./media/img-20241104104046.png
.. |image271| image:: ./media/img-20241104104112.png
.. |image272| image:: ./media/img-20241023140218.png
.. |image273| image:: ./media/img-20241029130617.png
.. |image274| image:: ./media/img-20241029135740.png
.. |image275| image:: ./media/img-20241029135820.png
.. |image276| image:: ./media/img-20241104104423.png
.. |image277| image:: ./media/img-20241029134512.png
.. |image278| image:: ./media/KE4069.png
.. |image279| image:: ./media/3pin.jpg
.. |image280| image:: ./media/USB.jpg
.. |image281| image:: ./media/KE4020.png
.. |image282| image:: ./media/4pin.jpg
.. |image283| image:: ./media/USB.jpg
.. |image284| image:: ./media/KE4029.png
.. |image285| image:: ./media/4pin.jpg
.. |image286| image:: ./media/USB.jpg
.. |image287| image:: ./media/KE4028.png
.. |image288| image:: ./media/4pin.jpg
.. |image289| image:: ./media/USB.jpg
.. |image290| image:: ./media/KE4068.png
.. |image291| image:: ./media/3pin.jpg
.. |image292| image:: ./media/USB.jpg
.. |image293| image:: ./media/KE4050.png
.. |image294| image:: ./media/5pin.jpg
.. |image295| image:: ./media/USB.jpg
.. |image296| image:: ./media/img-20241023140106.png
.. |image297| image:: ./media/img-20241023140218.png
.. |image298| image:: ./media/img-20241023140243.png
.. |image299| image:: ./media/img-20241023140106.png
.. |image300| image:: ./media/img-20241023140218.png
.. |image301| image:: ./media/img-20241029151254.png
.. |image302| image:: ./media/img-20241029152415.png
.. |image303| image:: ./media/img-20241029152450.png
.. |image304| image:: ./media/img-20241023140218.png
.. |image305| image:: ./media/img-20241029151254.png
.. |image306| image:: ./media/img-20241029153615.png
.. |image307| image:: ./media/img-20241029153652.png
.. |image308| image:: ./media/img-20241029153829.png
.. |image309| image:: ./media/img-20241114131049.png
.. |image310| image:: ./media/img-20241023140218.png
.. |image311| image:: ./media/img-20241029151254.png
.. |image312| image:: ./media/img-20241029153615.png
.. |image313| image:: ./media/img-20241029154054.png
.. |image314| image:: ./media/img-20241029134512.png
.. |image315| image:: ./media/KE4062.png
.. |image316| image:: ./media/3pin.jpg
.. |image317| image:: ./media/USB.jpg
.. |image318| image:: ./media/KE4009.png
.. |image319| image:: ./media/3pin.jpg
.. |image320| image:: ./media/USB.jpg
.. |image321| image:: ./media/img-20241023140106.png
.. |image322| image:: ./media/img-20241114134602.png
.. |image323| image:: ./media/img-20241118105641.png
.. |image324| image:: ./media/img-20241118105707.png
.. |image325| image:: ./media/img-20241023140106.png
.. |image326| image:: ./media/img-20241114134602.png
.. |image327| image:: ./media/img-20241118105946.png
.. |image328| image:: ./media/img-20241118110018.png
.. |image329| image:: ./media/img-20241118105946.png
.. |image330| image:: ./media/img-20241118110148.png
.. |image331| image:: ./media/img-20241114134602.png
.. |image332| image:: ./media/img-20241118110511.png
.. |image333| image:: ./media/img-20241023140625.png
.. |image334| image:: ./media/img-20241118110759.png
.. |image335| image:: ./media/KE4049.png
.. |image336| image:: ./media/5pin.jpg
.. |image337| image:: ./media/USB.jpg
.. |image338| image:: ./media/9G.jpg
.. |image339| image:: ./media/USB.jpg
.. |image340| image:: ./media/img-20241023140106.png
.. |image341| image:: ./media/img-20241030173255.png
.. |image342| image:: ./media/img-20241030173321.png
.. |image343| image:: ./media/img-20241023140106.png
.. |image344| image:: ./media/img-20241030173255.png
.. |image345| image:: ./media/img-20241030173321.png
.. |image346| image:: ./media/img-20241023140106.png
.. |image347| image:: ./media/img-20241030173255.png
.. |image348| image:: ./media/img-20241030173321.png
.. |image349| image:: ./media/img-20241023140106.png
.. |image350| image:: ./media/img-20241030142241.png
.. |image351| image:: ./media/img-20241030173255.png
.. |image352| image:: ./media/img-20241030173321.png
.. |image353| image:: ./media/img-20241030173700.png
.. |image354| image:: ./media/img-20241024133608.png
.. |image355| image:: ./media/img-20241024133651.png
.. |image356| image:: ./media/img-20241030174059.png
.. |image357| image:: ./media/KE4039.png
.. |image358| image:: ./media/ultrasonic.png
.. |image359| image:: ./media/4pin.jpg
.. |image360| image:: ./media/USB.jpg
.. |image361| image:: ./media/img-20241023140106.png
.. |image362| image:: ./media/img-20241023140218.png
.. |image363| image:: ./media/img-20241023140243.png
.. |image364| image:: ./media/img-20241023140106.png
.. |image365| image:: ./media/img-20241024133608.png
.. |image366| image:: ./media/img-20241028131724.png
.. |image367| image:: ./media/img-20241023140106.png
.. |image368| image:: ./media/img-20241028132016.png
.. |image369| image:: ./media/img-20241028132058.png
.. |image370| image:: ./media/img-20241028131724.png
.. |image371| image:: ./media/img-20241024133608.png
.. |image372| image:: ./media/img-20241029134032.png
.. |image373| image:: ./media/img-20241029153615.png
.. |image374| image:: ./media/img-20241029160051.png
.. |image375| image:: ./media/img-20241023140218.png
.. |image376| image:: ./media/img-20241029151254.png
.. |image377| image:: ./media/img-20241029152415.png
.. |image378| image:: ./media/img-20241029152450.png
.. |image379| image:: ./media/img-20241023140218.png
.. |image380| image:: ./media/img-20241029151254.png
.. |image381| image:: ./media/img-20241024133608.png
.. |image382| image:: ./media/img-20241029160503.png
.. |image383| image:: ./media/img-20241029160651.png
.. |image384| image:: ./media/img-20241029134512.png
.. |image385| image:: ./media/KE4036.png
.. |image386| image:: ./media/remote_control.png
.. |image387| image:: ./media/3pin.jpg
.. |image388| image:: ./media/USB.jpg
.. |image389| image:: ./media/img-20241023140106.png
.. |image390| image:: ./media/img-20241023140218.png
.. |image391| image:: ./media/img-20241023140243.png
.. |image392| image:: ./media/img-20241023140106.png
.. |image393| image:: ./media/img-20241029112954.png
.. |image394| image:: ./media/img-20241029113045.png
.. |image395| image:: ./media/img-20241023140218.png
.. |image396| image:: ./media/img-20241029113136.png
.. |image397| image:: ./media/img-20241114145108.png
.. |image398| image:: ./media/img-20241029113248.png
.. |image399| image:: ./media/img-20241029114726.png
.. |image400| image:: ./media/img-20241029113136.png
.. |image401| image:: ./media/KE4034.png
.. |image402| image:: ./media/3pin.jpg
.. |image403| image:: ./media/USB.jpg
.. |image404| image:: ./media/KE4033.png
.. |image405| image:: ./media/3pin.jpg
.. |image406| image:: ./media/USB.jpg
.. |image407| image:: ./media/img-20241023140106.png
.. |image408| image:: ./media/img-20241023140218.png
.. |image409| image:: ./media/img-20241023140243.png
.. |image410| image:: ./media/img-20241023140106.png
.. |image411| image:: ./media/img-20241023140218.png
.. |image412| image:: ./media/img-20241029151254.png
.. |image413| image:: ./media/img-20241029152415.png
.. |image414| image:: ./media/img-20241029152450.png
.. |image415| image:: ./media/img-20241023140218.png
.. |image416| image:: ./media/img-20241029151254.png
.. |image417| image:: ./media/img-20241029153615.png
.. |image418| image:: ./media/img-20241029154515.png
.. |image419| image:: ./media/img-20241029154805.png
.. |image420| image:: ./media/img-20241029154957.png
.. |image421| image:: ./media/img-20241029134512.png
.. |image422| image:: ./media/KE4072.png
.. |image423| image:: ./media/4pin.jpg
.. |image424| image:: ./media/USB.jpg
.. |image425| image:: ./media/img-20241023140106.png
.. |image426| image:: ./media/img-20241023140218.png
.. |image427| image:: ./media/img-20241023140243.png
.. |image428| image:: ./media/img-20241023140106.png
.. |image429| image:: ./media/img-20241029153615.png
.. |image430| image:: ./media/img-20241114171113.png
.. |image431| image:: ./media/img-20241114171311.png
.. |image432| image:: ./media/img-20241023140218.png
.. |image433| image:: ./media/img-20241029151254.png
.. |image434| image:: ./media/img-20241029153615.png
.. |image435| image:: ./media/img-20241114171556.png
.. |image436| image:: ./media/img-20241029152415.png
.. |image437| image:: ./media/img-20241029152450.png
.. |image438| image:: ./media/img-20241114171759.png
.. |image439| image:: ./media/KE4073.png
.. |image440| image:: ./media/4pin.jpg
.. |image441| image:: ./media/USB.jpg
.. |image442| image:: ./media/KE4060.png
.. |image443| image:: ./media/4pin.jpg
.. |image444| image:: ./media/USB.jpg
.. |image445| image:: ./media/img-20241023140106.png
.. |image446| image:: ./media/img-20241029081006.png
.. |image447| image:: ./media/img-20241029081056.png
.. |image448| image:: ./media/img-20241029081252.png
.. |image449| image:: ./media/img-20241023140106.png
.. |image450| image:: ./media/img-20241029081006.png
.. |image451| image:: ./media/img-20241029081730.png
.. |image452| image:: ./media/img-20241023140625.png
.. |image453| image:: ./media/img-20241029081942.png
.. |image454| image:: ./media/KE4066.png
.. |image455| image:: ./media/4pin.jpg
.. |image456| image:: ./media/USB.jpg
.. |image457| image:: ./media/img-20241023140106.png
.. |image458| image:: ./media/img-20241029081006.png
.. |image459| image:: ./media/img-20241029084232.png
.. |image460| image:: ./media/img-20241029084251.png
.. |image461| image:: ./media/img-20241023140106.png
.. |image462| image:: ./media/img-20241029081006.png
.. |image463| image:: ./media/img-20241029084537.png
.. |image464| image:: ./media/KE4061.png
.. |image465| image:: ./media/4pin.jpg
.. |image466| image:: ./media/USB.jpg
.. |image467| image:: ./media/img-20241023140106.png
.. |image468| image:: ./media/img-20241029081006.png
.. |image469| image:: ./media/img-20241029092015.png
.. |image470| image:: ./media/img-20241029092035.png
.. |image471| image:: ./media/img-20241023140106.png
.. |image472| image:: ./media/img-20241029081006.png
.. |image473| image:: ./media/img-20241029094759.png
.. |image474| image:: ./media/img-20241029094851.png
.. |image475| image:: ./media/img-20241029095316.png
.. |image476| image:: ./media/KE4065.png
.. |image477| image:: ./media/4pin.jpg
.. |image478| image:: ./media/USB.jpg
.. |image479| image:: ./media/钥匙扣.png
.. |image480| image:: ./media/IC卡.png
.. |image481| image:: ./media/img-20241023140106.png
.. |image482| image:: ./media/img-20241023140218.png
.. |image483| image:: ./media/img-20241023140243.png
.. |image484| image:: ./media/img-20241023140106.png
.. |image485| image:: ./media/img-20241029133231.png
.. |image486| image:: ./media/img-20241029133304.png
.. |image487| image:: ./media/img-20241023140106.png
.. |image488| image:: ./media/img-20241024133608.png
.. |image489| image:: ./media/img-20241028131724.png
.. |image490| image:: ./media/img-20241023140106.png
.. |image491| image:: ./media/img-20241029133543.png
.. |image492| image:: ./media/img-20241029133610.png
.. |image493| image:: ./media/img-20241028131724.png
.. |image494| image:: ./media/img-20241024133608.png
.. |image495| image:: ./media/img-20241029134032.png
.. |image496| image:: ./media/img-20241029133231.png
.. |image497| image:: ./media/img-20241029134122.png
.. |image498| image:: ./media/img-20241023140218.png
.. |image499| image:: ./media/img-20241029130617.png
.. |image500| image:: ./media/img-20241024133608.png
.. |image501| image:: ./media/img-20241029134328.png
.. |image502| image:: ./media/img-20241029134512.png
.. |image503| image:: ./media/KE4012.png
.. |image504| image:: ./media/KE4001.png
.. |image505| image:: ./media/3pin.jpg
.. |image506| image:: ./media/USB.jpg
.. |image507| image:: ./media/KE4019.png
.. |image508| image:: ./media/KE4010.png
.. |image509| image:: ./media/3pin.jpg
.. |image510| image:: ./media/USB.jpg
.. |image511| image:: ./media/KE4018.png
.. |image512| image:: ./media/KE4010.png
.. |image513| image:: ./media/KE4001.png
.. |image514| image:: ./media/3pin.jpg
.. |image515| image:: ./media/USB.jpg
.. |image516| image:: ./media/KE4038.png
.. |image517| image:: ./media/KE4020.png
.. |image518| image:: ./media/4pin.jpg
.. |image519| image:: ./media/USB.jpg
.. |image520| image:: ./media/OR0266.png
.. |image521| image:: ./media/6.png
.. |image522| image:: ./media/KE4049.png
.. |image523| image:: ./media/KE4074.png
.. |image524| image:: ./media/5pin.jpg
.. |image525| image:: ./media/4pin.jpg
.. |image526| image:: ./media/USB.jpg
.. |image527| image:: ./media/img-20240606131657.png
.. |image528| image:: ./media/KE4030.png
.. |image529| image:: ./media/KE4001.png
.. |image530| image:: ./media/3pin.jpg
.. |image531| image:: ./media/USB.jpg
.. |image532| image:: ./media/KE4048.png
.. |image533| image:: ./media/9G.jpg
.. |image534| image:: ./media/3pin.jpg
.. |image535| image:: ./media/USB.jpg
.. |image536| image:: ./media/KE4027.png
.. |image537| image:: ./media/KE4001.png
.. |image538| image:: ./media/3pin.jpg
.. |image539| image:: ./media/USB.jpg
.. |image540| image:: ./media/KE4010.png
.. |image541| image:: ./media/KE4020.png
.. |image542| image:: ./media/3pin.jpg
.. |image543| image:: ./media/4pin.jpg
.. |image544| image:: ./media/USB.jpg
.. |image545| image:: ./media/KE4010.png
.. |image546| image:: ./media/KE4029.png
.. |image547| image:: ./media/KE4060.png
.. |image548| image:: ./media/3pin.jpg
.. |image549| image:: ./media/4pin.jpg
.. |image550| image:: ./media/USB.jpg
.. |image551| image:: ./media/KE4010.png
.. |image552| image:: ./media/KE4028.png
.. |image553| image:: ./media/KE4060.png
.. |image554| image:: ./media/3pin.jpg
.. |image555| image:: ./media/4pin.jpg
.. |image556| image:: ./media/USB.jpg
.. |image557| image:: ./media/ultrasonic.png
.. |image558| image:: ./media/KE4039.png
.. |image559| image:: ./media/KE4067.png
.. |image560| image:: ./media/KE4074.png
.. |image561| image:: ./media/KE4060.png
.. |image562| image:: ./media/3pin.jpg
.. |image563| image:: ./media/4pin.jpg
.. |image564| image:: ./media/USB.jpg
.. |image565| image:: ./media/KE4036.png
.. |image566| image:: ./media/KE4001.png
.. |image567| image:: ./media/remote_control.png
.. |image568| image:: ./media/3pin.jpg
.. |image569| image:: ./media/USB.jpg
.. |image570| image:: ./media/KE4038.png
.. |image571| image:: ./media/KE4060.png
.. |image572| image:: ./media/KE4034.png
.. |image573| image:: ./media/3pin.jpg
.. |image574| image:: ./media/4pin.jpg
.. |image575| image:: ./media/USB.jpg
.. |image576| image:: ./media/OR0266.png
.. |image577| image:: ./media/6.png
.. |image578| image:: ./media/KE4065.png
.. |image579| image:: ./media/3210.png
.. |image580| image:: ./media/USB.jpg
.. |image581| image:: ./media/IC.png
.. |image582| image:: ./media/9G.jpg
.. |image583| image:: ./media/4pin.jpg
.. |image584| image:: ./media/USB.jpg
.. |image585| image:: ./media/img-20241101140602.png
.. |image586| image:: ./media/USB.jpg
.. |image587| image:: ./media/img-20241023140106.png
.. |image588| image:: ./media/img-20241023140218.png
.. |image589| image:: ./media/img-20241023140243.png
.. |image590| image:: ./media/img-20241023140106.png
.. |image591| image:: ./media/img-20241105083758.png
.. |image592| image:: ./media/img-20241105083837.png
.. |image593| image:: ./media/KE4038.png
.. |image594| image:: ./media/KE4062.png
.. |image595| image:: ./media/KE4033.png
.. |image596| image:: ./media/ultrasonic.png
.. |image597| image:: ./media/9G.jpg
.. |image598| image:: ./media/3pin.jpg
.. |image599| image:: ./media/4pin.jpg
.. |image600| image:: ./media/USB.jpg
.. |image601| image:: ./media/OR0266.png
.. |image602| image:: ./media/6.png
.. |image603| image:: ./media/pc.png
.. |image604| image:: ./media/651406.png
.. |image605| image:: ./media/img-20241105083150.png
.. |image606| image:: ./media/651604.png
.. |image607| image:: ./media/651604.png
.. |image608| image:: ./media/651605.png
.. |image609| image:: ./media/651605.png
.. |image610| image:: ./media/651606.png
.. |image611| image:: ./media/651606.png
.. |image612| image:: ./media/651607.png
.. |image613| image:: ./media/651607.png
.. |image614| image:: ./media/651608.png
.. |image615| image:: ./media/651608.png
.. |image616| image:: ./media/651609.png
.. |image617| image:: ./media/651609.png
